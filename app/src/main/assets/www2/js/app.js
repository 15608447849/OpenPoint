// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `cstruct.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(module, require, exports)
{
    var Ice = require("ice").Ice;
    var __M = Ice.__M;
    var Slice = Ice.Slice;

    var cstruct = __M.module("cstruct");

    cstruct.boolMessage = Slice.defineStruct(
        function(flag, smessage, fmessage)
        {
            this.flag = flag !== undefined ? flag : false;
            this.smessage = smessage !== undefined ? smessage : "";
            this.fmessage = fmessage !== undefined ? fmessage : "";
        },
        true,
        function(__os)
        {
            __os.writeBool(this.flag);
            __os.writeString(this.smessage);
            __os.writeString(this.fmessage);
        },
        function(__is)
        {
            this.flag = __is.readBool();
            this.smessage = __is.readString();
            this.fmessage = __is.readString();
        },
        3, 
        false);

    /**
     * 专家、招聘、志愿者认证审核信息数据模型
     **/
    cstruct.Ceraud = Slice.defineStruct(
        function(oid, appeo, appeoName, certype, cerid, audpeo, audpeoName, audes, audate, audtime, cstates)
        {
            this.oid = oid !== undefined ? oid : 0;
            this.appeo = appeo !== undefined ? appeo : 0;
            this.appeoName = appeoName !== undefined ? appeoName : "";
            this.certype = certype !== undefined ? certype : 0;
            this.cerid = cerid !== undefined ? cerid : 0;
            this.audpeo = audpeo !== undefined ? audpeo : 0;
            this.audpeoName = audpeoName !== undefined ? audpeoName : "";
            this.audes = audes !== undefined ? audes : "";
            this.audate = audate !== undefined ? audate : "";
            this.audtime = audtime !== undefined ? audtime : "";
            this.cstates = cstates !== undefined ? cstates : 0;
        },
        true,
        function(__os)
        {
            __os.writeInt(this.oid);
            __os.writeLong(this.appeo);
            __os.writeString(this.appeoName);
            __os.writeInt(this.certype);
            __os.writeLong(this.cerid);
            __os.writeLong(this.audpeo);
            __os.writeString(this.audpeoName);
            __os.writeString(this.audes);
            __os.writeString(this.audate);
            __os.writeString(this.audtime);
            __os.writeInt(this.cstates);
        },
        function(__is)
        {
            this.oid = __is.readInt();
            this.appeo = __is.readLong();
            this.appeoName = __is.readString();
            this.certype = __is.readInt();
            this.cerid = __is.readLong();
            this.audpeo = __is.readLong();
            this.audpeoName = __is.readString();
            this.audes = __is.readString();
            this.audate = __is.readString();
            this.audtime = __is.readString();
            this.cstates = __is.readInt();
        },
        41, 
        false);

    /**
     * 用户扩展信息数据模型
     **/
    cstruct.Userdet = Slice.defineStruct(
        function(oid, userid, username, userproid, userpro, usertel, useremail, useradd, usereduid, useredu, usertitleid, usertitle, userstp, cstates, webchat)
        {
            this.oid = oid !== undefined ? oid : 0;
            this.userid = userid !== undefined ? userid : 0;
            this.username = username !== undefined ? username : "";
            this.userproid = userproid !== undefined ? userproid : 0;
            this.userpro = userpro !== undefined ? userpro : "";
            this.usertel = usertel !== undefined ? usertel : "";
            this.useremail = useremail !== undefined ? useremail : "";
            this.useradd = useradd !== undefined ? useradd : "";
            this.usereduid = usereduid !== undefined ? usereduid : 0;
            this.useredu = useredu !== undefined ? useredu : "";
            this.usertitleid = usertitleid !== undefined ? usertitleid : 0;
            this.usertitle = usertitle !== undefined ? usertitle : "";
            this.userstp = userstp !== undefined ? userstp : "";
            this.cstates = cstates !== undefined ? cstates : 0;
            this.webchat = webchat !== undefined ? webchat : "";
        },
        true,
        function(__os)
        {
            __os.writeInt(this.oid);
            __os.writeLong(this.userid);
            __os.writeString(this.username);
            __os.writeInt(this.userproid);
            __os.writeString(this.userpro);
            __os.writeString(this.usertel);
            __os.writeString(this.useremail);
            __os.writeString(this.useradd);
            __os.writeInt(this.usereduid);
            __os.writeString(this.useredu);
            __os.writeInt(this.usertitleid);
            __os.writeString(this.usertitle);
            __os.writeString(this.userstp);
            __os.writeInt(this.cstates);
            __os.writeString(this.webchat);
        },
        function(__is)
        {
            this.oid = __is.readInt();
            this.userid = __is.readLong();
            this.username = __is.readString();
            this.userproid = __is.readInt();
            this.userpro = __is.readString();
            this.usertel = __is.readString();
            this.useremail = __is.readString();
            this.useradd = __is.readString();
            this.usereduid = __is.readInt();
            this.useredu = __is.readString();
            this.usertitleid = __is.readInt();
            this.usertitle = __is.readString();
            this.userstp = __is.readString();
            this.cstates = __is.readInt();
            this.webchat = __is.readString();
        },
        37, 
        false);
    Slice.defineSequence(cstruct, "UserdetSeqHelper", "cstruct.Userdet", false);

    /**
     * 用户扩展认证资料信息数据模型
     **/
    cstruct.Cermat = Slice.defineStruct(
        function(oid, userid, doctypeid, doctype, docid, docurl, cstates)
        {
            this.oid = oid !== undefined ? oid : 0;
            this.userid = userid !== undefined ? userid : 0;
            this.doctypeid = doctypeid !== undefined ? doctypeid : 0;
            this.doctype = doctype !== undefined ? doctype : "";
            this.docid = docid !== undefined ? docid : "";
            this.docurl = docurl !== undefined ? docurl : "";
            this.cstates = cstates !== undefined ? cstates : 0;
        },
        true,
        function(__os)
        {
            __os.writeInt(this.oid);
            __os.writeLong(this.userid);
            __os.writeInt(this.doctypeid);
            __os.writeString(this.doctype);
            __os.writeString(this.docid);
            __os.writeString(this.docurl);
            __os.writeInt(this.cstates);
        },
        function(__is)
        {
            this.oid = __is.readInt();
            this.userid = __is.readLong();
            this.doctypeid = __is.readInt();
            this.doctype = __is.readString();
            this.docid = __is.readString();
            this.docurl = __is.readString();
            this.cstates = __is.readInt();
        },
        23, 
        false);

    cstruct.Page = Slice.defineStruct(
        function(pageSize, pageIndex, totalItems, totalPageCount)
        {
            this.pageSize = pageSize !== undefined ? pageSize : 0;
            this.pageIndex = pageIndex !== undefined ? pageIndex : 0;
            this.totalItems = totalItems !== undefined ? totalItems : 0;
            this.totalPageCount = totalPageCount !== undefined ? totalPageCount : 0;
        },
        true,
        function(__os)
        {
            __os.writeInt(this.pageSize);
            __os.writeInt(this.pageIndex);
            __os.writeInt(this.totalItems);
            __os.writeInt(this.totalPageCount);
        },
        function(__is)
        {
            this.pageSize = __is.readInt();
            this.pageIndex = __is.readInt();
            this.totalItems = __is.readInt();
            this.totalPageCount = __is.readInt();
        },
        16, 
        true);
    Slice.defineSequence(cstruct, "CermatSeqHelper", "cstruct.Cermat", false);
    Slice.defineSequence(cstruct, "longSeqHelper", "Ice.LongHelper", true);
    Slice.defineSequence(cstruct, "intSeqHelper", "Ice.IntHelper", true);
    Slice.defineSequence(cstruct, "byteSeqHelper", "Ice.ByteHelper", true);
    exports.cstruct = cstruct;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : this.Ice.__require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : this));

// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `ema.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(module, require, exports)
{
    var Ice = require("ice").Ice;
    var __M = Ice.__M;
    var usermanage = require("usermanager").usermanage;
    var Slice = Ice.Slice;

    var ema = __M.module("ema");

    /**
     * 咨询信息数据模型
     **/
    ema.EmaInfo = Slice.defineStruct(
        function(emaid, ematitle, emacon, imgurl, eatype, userid, ppn, shn, sortn, emaowner, emaownerName, reldate, reltime, cstates)
        {
            this.emaid = emaid !== undefined ? emaid : 0;
            this.ematitle = ematitle !== undefined ? ematitle : "";
            this.emacon = emacon !== undefined ? emacon : "";
            this.imgurl = imgurl !== undefined ? imgurl : "";
            this.eatype = eatype !== undefined ? eatype : 0;
            this.userid = userid !== undefined ? userid : 0;
            this.ppn = ppn !== undefined ? ppn : 0;
            this.shn = shn !== undefined ? shn : 0;
            this.sortn = sortn !== undefined ? sortn : 0;
            this.emaowner = emaowner !== undefined ? emaowner : 0;
            this.emaownerName = emaownerName !== undefined ? emaownerName : "";
            this.reldate = reldate !== undefined ? reldate : "";
            this.reltime = reltime !== undefined ? reltime : "";
            this.cstates = cstates !== undefined ? cstates : 0;
        },
        true,
        function(__os)
        {
            __os.writeInt(this.emaid);
            __os.writeString(this.ematitle);
            __os.writeString(this.emacon);
            __os.writeString(this.imgurl);
            __os.writeInt(this.eatype);
            __os.writeLong(this.userid);
            __os.writeInt(this.ppn);
            __os.writeInt(this.shn);
            __os.writeInt(this.sortn);
            __os.writeLong(this.emaowner);
            __os.writeString(this.emaownerName);
            __os.writeString(this.reldate);
            __os.writeString(this.reltime);
            __os.writeInt(this.cstates);
        },
        function(__is)
        {
            this.emaid = __is.readInt();
            this.ematitle = __is.readString();
            this.emacon = __is.readString();
            this.imgurl = __is.readString();
            this.eatype = __is.readInt();
            this.userid = __is.readLong();
            this.ppn = __is.readInt();
            this.shn = __is.readInt();
            this.sortn = __is.readInt();
            this.emaowner = __is.readLong();
            this.emaownerName = __is.readString();
            this.reldate = __is.readString();
            this.reltime = __is.readString();
            this.cstates = __is.readInt();
        },
        46, 
        false);
    Slice.defineSequence(ema, "EmaInfoSeqHelper", "ema.EmaInfo", false);

    /**
     * 咨询内容信息集合模型
     **/
    ema.EmaDetail = Slice.defineStruct(
        function(emaid, emacon, hpurl, nickname, usertel)
        {
            this.emaid = emaid !== undefined ? emaid : 0;
            this.emacon = emacon !== undefined ? emacon : "";
            this.hpurl = hpurl !== undefined ? hpurl : "";
            this.nickname = nickname !== undefined ? nickname : "";
            this.usertel = usertel !== undefined ? usertel : 0;
        },
        true,
        function(__os)
        {
            __os.writeInt(this.emaid);
            __os.writeString(this.emacon);
            __os.writeString(this.hpurl);
            __os.writeString(this.nickname);
            __os.writeLong(this.usertel);
        },
        function(__is)
        {
            this.emaid = __is.readInt();
            this.emacon = __is.readString();
            this.hpurl = __is.readString();
            this.nickname = __is.readString();
            this.usertel = __is.readLong();
        },
        15, 
        false);

    /**
     * 专家类型数据模型
     **/
    ema.Eatype = Slice.defineStruct(
        function(eaid, eaname, cstates)
        {
            this.eaid = eaid !== undefined ? eaid : 0;
            this.eaname = eaname !== undefined ? eaname : "";
            this.cstates = cstates !== undefined ? cstates : 0;
        },
        true,
        function(__os)
        {
            __os.writeInt(this.eaid);
            __os.writeString(this.eaname);
            __os.writeInt(this.cstates);
        },
        function(__is)
        {
            this.eaid = __is.readInt();
            this.eaname = __is.readString();
            this.cstates = __is.readInt();
        },
        9, 
        false);
    Slice.defineSequence(ema, "EatypeSeqHelper", "ema.Eatype", false);

    /**
     * 屏蔽关键词数据模型
     **/
    ema.Emaskw = Slice.defineStruct(
        function(oid, keyword, cstates)
        {
            this.oid = oid !== undefined ? oid : 0;
            this.keyword = keyword !== undefined ? keyword : "";
            this.cstates = cstates !== undefined ? cstates : 0;
        },
        true,
        function(__os)
        {
            __os.writeInt(this.oid);
            __os.writeString(this.keyword);
            __os.writeInt(this.cstates);
        },
        function(__is)
        {
            this.oid = __is.readInt();
            this.keyword = __is.readString();
            this.cstates = __is.readInt();
        },
        9, 
        false);
    Slice.defineSequence(ema, "EmaskwSeqHelper", "ema.Emaskw", false);

    /**
     * 咨询回复评论数据模型
     **/
    ema.EmaReply = Slice.defineStruct(
        function(oid, emaid, relcon, relpeo, relpeoName, reldate, reltime, relaging, reltype, ppn, eaname, cstates, relpeoUrl)
        {
            this.oid = oid !== undefined ? oid : 0;
            this.emaid = emaid !== undefined ? emaid : 0;
            this.relcon = relcon !== undefined ? relcon : "";
            this.relpeo = relpeo !== undefined ? relpeo : 0;
            this.relpeoName = relpeoName !== undefined ? relpeoName : "";
            this.reldate = reldate !== undefined ? reldate : "";
            this.reltime = reltime !== undefined ? reltime : "";
            this.relaging = relaging !== undefined ? relaging : 0;
            this.reltype = reltype !== undefined ? reltype : 0;
            this.ppn = ppn !== undefined ? ppn : 0;
            this.eaname = eaname !== undefined ? eaname : "";
            this.cstates = cstates !== undefined ? cstates : 0;
            this.relpeoUrl = relpeoUrl !== undefined ? relpeoUrl : "";
        },
        true,
        function(__os)
        {
            __os.writeInt(this.oid);
            __os.writeInt(this.emaid);
            __os.writeString(this.relcon);
            __os.writeLong(this.relpeo);
            __os.writeString(this.relpeoName);
            __os.writeString(this.reldate);
            __os.writeString(this.reltime);
            __os.writeInt(this.relaging);
            __os.writeInt(this.reltype);
            __os.writeInt(this.ppn);
            __os.writeString(this.eaname);
            __os.writeInt(this.cstates);
            __os.writeString(this.relpeoUrl);
        },
        function(__is)
        {
            this.oid = __is.readInt();
            this.emaid = __is.readInt();
            this.relcon = __is.readString();
            this.relpeo = __is.readLong();
            this.relpeoName = __is.readString();
            this.reldate = __is.readString();
            this.reltime = __is.readString();
            this.relaging = __is.readInt();
            this.reltype = __is.readInt();
            this.ppn = __is.readInt();
            this.eaname = __is.readString();
            this.cstates = __is.readInt();
            this.relpeoUrl = __is.readString();
        },
        38, 
        false);
    Slice.defineSequence(ema, "EmaReplySeqHelper", "ema.EmaReply", false);

    /**
     * 咨询类容和咨询回复评论集合模型
     **/
    ema.EmaconAndReplys = Slice.defineStruct(
        function(emaDetail, emaReplyList)
        {
            this.emaDetail = emaDetail !== undefined ? emaDetail : new ema.EmaDetail();
            this.emaReplyList = emaReplyList !== undefined ? emaReplyList : null;
        },
        true,
        function(__os)
        {
            ema.EmaDetail.write(__os, this.emaDetail);
            ema.EmaReplySeqHelper.write(__os, this.emaReplyList);
        },
        function(__is)
        {
            this.emaDetail = ema.EmaDetail.read(__is, this.emaDetail);
            this.emaReplyList = ema.EmaReplySeqHelper.read(__is);
        },
        16, 
        false);

    /**
     * 专家信息数据模型
     **/
    ema.EaInfo = Slice.defineStruct(
        function(userid, nickname, username, hpurl, eatype, eaname, usertel, audate, audtime, aetimes, replytimes, actlevel, ppn)
        {
            this.userid = userid !== undefined ? userid : 0;
            this.nickname = nickname !== undefined ? nickname : "";
            this.username = username !== undefined ? username : "";
            this.hpurl = hpurl !== undefined ? hpurl : "";
            this.eatype = eatype !== undefined ? eatype : 0;
            this.eaname = eaname !== undefined ? eaname : "";
            this.usertel = usertel !== undefined ? usertel : "";
            this.audate = audate !== undefined ? audate : "";
            this.audtime = audtime !== undefined ? audtime : "";
            this.aetimes = aetimes !== undefined ? aetimes : 0;
            this.replytimes = replytimes !== undefined ? replytimes : 0;
            this.actlevel = actlevel !== undefined ? actlevel : 0;
            this.ppn = ppn !== undefined ? ppn : 0;
        },
        true,
        function(__os)
        {
            __os.writeLong(this.userid);
            __os.writeString(this.nickname);
            __os.writeString(this.username);
            __os.writeString(this.hpurl);
            __os.writeInt(this.eatype);
            __os.writeString(this.eaname);
            __os.writeString(this.usertel);
            __os.writeString(this.audate);
            __os.writeString(this.audtime);
            __os.writeInt(this.aetimes);
            __os.writeInt(this.replytimes);
            __os.writeInt(this.actlevel);
            __os.writeInt(this.ppn);
        },
        function(__is)
        {
            this.userid = __is.readLong();
            this.nickname = __is.readString();
            this.username = __is.readString();
            this.hpurl = __is.readString();
            this.eatype = __is.readInt();
            this.eaname = __is.readString();
            this.usertel = __is.readString();
            this.audate = __is.readString();
            this.audtime = __is.readString();
            this.aetimes = __is.readInt();
            this.replytimes = __is.readInt();
            this.actlevel = __is.readInt();
            this.ppn = __is.readInt();
        },
        35, 
        false);
    Slice.defineSequence(ema, "EaInfoSeqHelper", "ema.EaInfo", false);

    /**
     * 待审核认证或已审核认证的专家信息数据模型
     **/
    ema.ExpertApplyInfo = Slice.defineStruct(
        function(userid, username, cerid, cerName, audate, audtime, audpeo, audpeoName, cstates, audes)
        {
            this.userid = userid !== undefined ? userid : 0;
            this.username = username !== undefined ? username : "";
            this.cerid = cerid !== undefined ? cerid : 0;
            this.cerName = cerName !== undefined ? cerName : "";
            this.audate = audate !== undefined ? audate : "";
            this.audtime = audtime !== undefined ? audtime : "";
            this.audpeo = audpeo !== undefined ? audpeo : 0;
            this.audpeoName = audpeoName !== undefined ? audpeoName : "";
            this.cstates = cstates !== undefined ? cstates : 0;
            this.audes = audes !== undefined ? audes : "";
        },
        true,
        function(__os)
        {
            __os.writeLong(this.userid);
            __os.writeString(this.username);
            __os.writeLong(this.cerid);
            __os.writeString(this.cerName);
            __os.writeString(this.audate);
            __os.writeString(this.audtime);
            __os.writeLong(this.audpeo);
            __os.writeString(this.audpeoName);
            __os.writeInt(this.cstates);
            __os.writeString(this.audes);
        },
        function(__is)
        {
            this.userid = __is.readLong();
            this.username = __is.readString();
            this.cerid = __is.readLong();
            this.cerName = __is.readString();
            this.audate = __is.readString();
            this.audtime = __is.readString();
            this.audpeo = __is.readLong();
            this.audpeoName = __is.readString();
            this.cstates = __is.readInt();
            this.audes = __is.readString();
        },
        34, 
        false);
    Slice.defineSequence(ema, "ExpertApplyInfoSeqHelper", "ema.ExpertApplyInfo", false);

    /**
     * 青少年权益维护服务接口
     **/
    ema.EmaService = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::ema::EmaService"
        ],
        -1, undefined, undefined, false);

    ema.EmaServicePrx = Slice.defineProxy(Ice.ObjectPrx, ema.EmaService.ice_staticId, undefined);

    Slice.defineOperations(ema.EmaService, ema.EmaServicePrx,
    {
        "applyToExpert": [, , , , , [cstruct.boolMessage], [[cstruct.Cermat], [3]], , , , ],
        "queryApplyToExpert": [, , , , , ["ema.ExpertApplyInfoSeqHelper"], [[cstruct.Page], [7], [3]], [[cstruct.Page]], , , ],
        "expertAud": [, , , , , [cstruct.boolMessage], [[cstruct.Ceraud]], , , , ],
        "reqExpert": [, , , , , [cstruct.boolMessage], [[cstruct.Ceraud]], , , , ],
        "confirmReqExpert": [, , , , , [cstruct.boolMessage], [[4], [3]], , , , ],
        "addEatype": [, , , , , [cstruct.boolMessage], [[ema.Eatype]], , , , ],
        "updateEatype": [, , , , , [cstruct.boolMessage], [[ema.Eatype]], , , , ],
        "delEatype": [, , , , , [cstruct.boolMessage], [[3]], , , , ],
        "delEatypes": [, , , , , [cstruct.boolMessage], [["cstruct.intSeqHelper"]], , , , ],
        "queryEatypes": [, , , , , ["ema.EatypeSeqHelper"], [[cstruct.Page], [7], [ema.Eatype]], [[cstruct.Page]], , , ],
        "queryEas": [, , , , , ["ema.EaInfoSeqHelper"], [[cstruct.Page], [7], [ema.EaInfo]], [[cstruct.Page]], , , ],
        "addEmaInfo": [, , , , , [cstruct.boolMessage], [[ema.EmaInfo]], , , , ],
        "delEmaInfo": [, , , , , [cstruct.boolMessage], [[3]], , , , ],
        "queryEmaInfos": [, , , , , ["ema.EmaInfoSeqHelper"], [[cstruct.Page], [7], [3], [ema.EmaInfo]], [[cstruct.Page]], , , ],
        "queryEmaconAndReplys": [, , , , , [ema.EmaconAndReplys], [[cstruct.Page], [7], [3], [4]], [[cstruct.Page]], , , ],
        "addEmaReply": [, , , , , [cstruct.boolMessage], [[ema.EmaReply]], , , , ],
        "delReply": [, , , , , [cstruct.boolMessage], [[3]], , , , ],
        "countActlevel": [, , , , , [cstruct.boolMessage], , , , , ],
        "skw": [, , , , , [cstruct.boolMessage], [[7]], , , , ],
        "addSkw": [, , , , , [cstruct.boolMessage], [[ema.Emaskw]], , , , ],
        "updateSkw": [, , , , , [cstruct.boolMessage], [[ema.Emaskw]], , , , ],
        "delSkws": [, , , , , [cstruct.boolMessage], [["cstruct.intSeqHelper"]], , , , ],
        "querySkws": [, , , , , ["ema.EmaskwSeqHelper"], [[cstruct.Page], [7], [ema.Emaskw]], [[cstruct.Page]], , , ],
        "delEas": [, , , , , [cstruct.boolMessage], [["cstruct.longSeqHelper"]], , , , ],
        "queryReqUsers": [, , , , , ["usermanage.UserSeqHelper"], [[cstruct.Page], [7], [4], [7]], [[cstruct.Page]], , , ]
    });
    exports.ema = ema;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : this.Ice.__require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : this));

// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `fileUpDown.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(module, require, exports)
{
    var Ice = require("ice").Ice;
    var __M = Ice.__M;
    var Slice = Ice.Slice;

    var fileUpDown = __M.module("fileUpDown");

    /**
     * 文件上传下载
     **/
    fileUpDown.FileUpDownService = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::fileUpDown::FileUpDownService"
        ],
        -1, undefined, undefined, false);

    fileUpDown.FileUpDownServicePrx = Slice.defineProxy(Ice.ObjectPrx, fileUpDown.FileUpDownService.ice_staticId, undefined);

    Slice.defineOperations(fileUpDown.FileUpDownService, fileUpDown.FileUpDownServicePrx,
    {
        "fileUp": [, , , , , [7], [[7]], , , , ]
    });
    exports.fileUpDown = fileUpDown;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : this.Ice.__require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : this));

// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `hpp.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(module, require, exports)
{
    var Ice = require("ice").Ice;
    var __M = Ice.__M;
    var cstruct = require("cstruct").cstruct;
    var Slice = Ice.Slice;

    var hpp = __M.module("hpp");

    /**
     * 求助信息数据模型
     **/
    hpp.HppInfo = Slice.defineStruct(
        function(hppid, hpptitle, hppcon, hppurl, imgurl, shn, sortn, hppowner, hppownerName, reldate, reltime, orgid, audstateid, audstate, cstates, amount, countHppoff, wxurl)
        {
            this.hppid = hppid !== undefined ? hppid : 0;
            this.hpptitle = hpptitle !== undefined ? hpptitle : "";
            this.hppcon = hppcon !== undefined ? hppcon : "";
            this.hppurl = hppurl !== undefined ? hppurl : "";
            this.imgurl = imgurl !== undefined ? imgurl : "";
            this.shn = shn !== undefined ? shn : 0;
            this.sortn = sortn !== undefined ? sortn : 0;
            this.hppowner = hppowner !== undefined ? hppowner : 0;
            this.hppownerName = hppownerName !== undefined ? hppownerName : "";
            this.reldate = reldate !== undefined ? reldate : "";
            this.reltime = reltime !== undefined ? reltime : "";
            this.orgid = orgid !== undefined ? orgid : 0;
            this.audstateid = audstateid !== undefined ? audstateid : 0;
            this.audstate = audstate !== undefined ? audstate : "";
            this.cstates = cstates !== undefined ? cstates : 0;
            this.amount = amount !== undefined ? amount : 0;
            this.countHppoff = countHppoff !== undefined ? countHppoff : 0;
            this.wxurl = wxurl !== undefined ? wxurl : "";
        },
        true,
        function(__os)
        {
            __os.writeInt(this.hppid);
            __os.writeString(this.hpptitle);
            __os.writeString(this.hppcon);
            __os.writeString(this.hppurl);
            __os.writeString(this.imgurl);
            __os.writeInt(this.shn);
            __os.writeInt(this.sortn);
            __os.writeLong(this.hppowner);
            __os.writeString(this.hppownerName);
            __os.writeString(this.reldate);
            __os.writeString(this.reltime);
            __os.writeInt(this.orgid);
            __os.writeInt(this.audstateid);
            __os.writeString(this.audstate);
            __os.writeInt(this.cstates);
            __os.writeInt(this.amount);
            __os.writeInt(this.countHppoff);
            __os.writeString(this.wxurl);
        },
        function(__is)
        {
            this.hppid = __is.readInt();
            this.hpptitle = __is.readString();
            this.hppcon = __is.readString();
            this.hppurl = __is.readString();
            this.imgurl = __is.readString();
            this.shn = __is.readInt();
            this.sortn = __is.readInt();
            this.hppowner = __is.readLong();
            this.hppownerName = __is.readString();
            this.reldate = __is.readString();
            this.reltime = __is.readString();
            this.orgid = __is.readInt();
            this.audstateid = __is.readInt();
            this.audstate = __is.readString();
            this.cstates = __is.readInt();
            this.amount = __is.readInt();
            this.countHppoff = __is.readInt();
            this.wxurl = __is.readString();
        },
        49, 
        false);
    Slice.defineSequence(hpp, "HppInfoSeqHelper", "hpp.HppInfo", false);

    /**
     * 求助内容信息数据模型
     **/
    hpp.HppCon = Slice.defineStruct(
        function(hppid, hppcon)
        {
            this.hppid = hppid !== undefined ? hppid : 0;
            this.hppcon = hppcon !== undefined ? hppcon : "";
        },
        true,
        function(__os)
        {
            __os.writeInt(this.hppid);
            __os.writeString(this.hppcon);
        },
        function(__is)
        {
            this.hppid = __is.readInt();
            this.hppcon = __is.readString();
        },
        5, 
        false);

    /**
     * 求助留言信息数据模型
     **/
    hpp.HppReply = Slice.defineStruct(
        function(oid, hppid, relcon, relpeo, relpeoName, reldate, reltime, cstates)
        {
            this.oid = oid !== undefined ? oid : 0;
            this.hppid = hppid !== undefined ? hppid : 0;
            this.relcon = relcon !== undefined ? relcon : "";
            this.relpeo = relpeo !== undefined ? relpeo : 0;
            this.relpeoName = relpeoName !== undefined ? relpeoName : "";
            this.reldate = reldate !== undefined ? reldate : "";
            this.reltime = reltime !== undefined ? reltime : "";
            this.cstates = cstates !== undefined ? cstates : 0;
        },
        true,
        function(__os)
        {
            __os.writeInt(this.oid);
            __os.writeInt(this.hppid);
            __os.writeString(this.relcon);
            __os.writeLong(this.relpeo);
            __os.writeString(this.relpeoName);
            __os.writeString(this.reldate);
            __os.writeString(this.reltime);
            __os.writeInt(this.cstates);
        },
        function(__is)
        {
            this.oid = __is.readInt();
            this.hppid = __is.readInt();
            this.relcon = __is.readString();
            this.relpeo = __is.readLong();
            this.relpeoName = __is.readString();
            this.reldate = __is.readString();
            this.reltime = __is.readString();
            this.cstates = __is.readInt();
        },
        24, 
        false);
    Slice.defineSequence(hpp, "HppReplySeqHelper", "hpp.HppReply", false);

    /**
     * 求助资金流水信息数据模型
     **/
    hpp.HppFunds = Slice.defineStruct(
        function(oid, hppid, offpeo, offeoName, onpeo, onpeoName, amount, offdate, offtime, cstates)
        {
            this.oid = oid !== undefined ? oid : 0;
            this.hppid = hppid !== undefined ? hppid : 0;
            this.offpeo = offpeo !== undefined ? offpeo : 0;
            this.offeoName = offeoName !== undefined ? offeoName : "";
            this.onpeo = onpeo !== undefined ? onpeo : 0;
            this.onpeoName = onpeoName !== undefined ? onpeoName : "";
            this.amount = amount !== undefined ? amount : 0;
            this.offdate = offdate !== undefined ? offdate : "";
            this.offtime = offtime !== undefined ? offtime : "";
            this.cstates = cstates !== undefined ? cstates : 0;
        },
        true,
        function(__os)
        {
            __os.writeInt(this.oid);
            __os.writeInt(this.hppid);
            __os.writeLong(this.offpeo);
            __os.writeString(this.offeoName);
            __os.writeLong(this.onpeo);
            __os.writeString(this.onpeoName);
            __os.writeInt(this.amount);
            __os.writeString(this.offdate);
            __os.writeString(this.offtime);
            __os.writeInt(this.cstates);
        },
        function(__is)
        {
            this.oid = __is.readInt();
            this.hppid = __is.readInt();
            this.offpeo = __is.readLong();
            this.offeoName = __is.readString();
            this.onpeo = __is.readLong();
            this.onpeoName = __is.readString();
            this.amount = __is.readInt();
            this.offdate = __is.readString();
            this.offtime = __is.readString();
            this.cstates = __is.readInt();
        },
        36, 
        false);
    Slice.defineSequence(hpp, "HppFundSeqHelper", "hpp.HppFunds", false);

    /**
     * 求助审核信息数据模型
     **/
    hpp.HppAudit = Slice.defineStruct(
        function(oid, hppid, audpeo, audpeoName, audes, audate, audtime, cstates)
        {
            this.oid = oid !== undefined ? oid : 0;
            this.hppid = hppid !== undefined ? hppid : 0;
            this.audpeo = audpeo !== undefined ? audpeo : 0;
            this.audpeoName = audpeoName !== undefined ? audpeoName : "";
            this.audes = audes !== undefined ? audes : "";
            this.audate = audate !== undefined ? audate : "";
            this.audtime = audtime !== undefined ? audtime : "";
            this.cstates = cstates !== undefined ? cstates : 0;
        },
        true,
        function(__os)
        {
            __os.writeInt(this.oid);
            __os.writeInt(this.hppid);
            __os.writeLong(this.audpeo);
            __os.writeString(this.audpeoName);
            __os.writeString(this.audes);
            __os.writeString(this.audate);
            __os.writeString(this.audtime);
            __os.writeInt(this.cstates);
        },
        function(__is)
        {
            this.oid = __is.readInt();
            this.hppid = __is.readInt();
            this.audpeo = __is.readLong();
            this.audpeoName = __is.readString();
            this.audes = __is.readString();
            this.audate = __is.readString();
            this.audtime = __is.readString();
            this.cstates = __is.readInt();
        },
        24, 
        false);
    Slice.defineSequence(hpp, "HppAuditSeqHelper", "hpp.HppAudit", false);

    /**
     * 捐助信息数据模型
     **/
    hpp.HppoffInfo = Slice.defineStruct(
        function(hppInfo, amount)
        {
            this.hppInfo = hppInfo !== undefined ? hppInfo : new hpp.HppInfo();
            this.amount = amount !== undefined ? amount : 0;
        },
        true,
        function(__os)
        {
            hpp.HppInfo.write(__os, this.hppInfo);
            __os.writeInt(this.amount);
        },
        function(__is)
        {
            this.hppInfo = hpp.HppInfo.read(__is, this.hppInfo);
            this.amount = __is.readInt();
        },
        53, 
        false);
    Slice.defineSequence(hpp, "HppoffInfoSeqHelper", "hpp.HppoffInfo", false);

    /**
     * 求助信息已审核数据模型
     **/
    hpp.HppAuditInfo = Slice.defineStruct(
        function(hppid, hpptitle, hppcon, hppurl, imgurl, shn, sortn, hppowner, hppownerName, reldate, reltime, orgid, audstateid, audstate, cstates, amount, countHppoff, audes, audate, audtime, auditCstates, audpeo)
        {
            this.hppid = hppid !== undefined ? hppid : 0;
            this.hpptitle = hpptitle !== undefined ? hpptitle : "";
            this.hppcon = hppcon !== undefined ? hppcon : "";
            this.hppurl = hppurl !== undefined ? hppurl : "";
            this.imgurl = imgurl !== undefined ? imgurl : "";
            this.shn = shn !== undefined ? shn : 0;
            this.sortn = sortn !== undefined ? sortn : 0;
            this.hppowner = hppowner !== undefined ? hppowner : 0;
            this.hppownerName = hppownerName !== undefined ? hppownerName : "";
            this.reldate = reldate !== undefined ? reldate : "";
            this.reltime = reltime !== undefined ? reltime : "";
            this.orgid = orgid !== undefined ? orgid : 0;
            this.audstateid = audstateid !== undefined ? audstateid : 0;
            this.audstate = audstate !== undefined ? audstate : "";
            this.cstates = cstates !== undefined ? cstates : 0;
            this.amount = amount !== undefined ? amount : 0;
            this.countHppoff = countHppoff !== undefined ? countHppoff : 0;
            this.audes = audes !== undefined ? audes : "";
            this.audate = audate !== undefined ? audate : "";
            this.audtime = audtime !== undefined ? audtime : "";
            this.auditCstates = auditCstates !== undefined ? auditCstates : 0;
            this.audpeo = audpeo !== undefined ? audpeo : 0;
        },
        true,
        function(__os)
        {
            __os.writeInt(this.hppid);
            __os.writeString(this.hpptitle);
            __os.writeString(this.hppcon);
            __os.writeString(this.hppurl);
            __os.writeString(this.imgurl);
            __os.writeInt(this.shn);
            __os.writeInt(this.sortn);
            __os.writeLong(this.hppowner);
            __os.writeString(this.hppownerName);
            __os.writeString(this.reldate);
            __os.writeString(this.reltime);
            __os.writeInt(this.orgid);
            __os.writeInt(this.audstateid);
            __os.writeString(this.audstate);
            __os.writeInt(this.cstates);
            __os.writeInt(this.amount);
            __os.writeInt(this.countHppoff);
            __os.writeString(this.audes);
            __os.writeString(this.audate);
            __os.writeString(this.audtime);
            __os.writeInt(this.auditCstates);
            __os.writeLong(this.audpeo);
        },
        function(__is)
        {
            this.hppid = __is.readInt();
            this.hpptitle = __is.readString();
            this.hppcon = __is.readString();
            this.hppurl = __is.readString();
            this.imgurl = __is.readString();
            this.shn = __is.readInt();
            this.sortn = __is.readInt();
            this.hppowner = __is.readLong();
            this.hppownerName = __is.readString();
            this.reldate = __is.readString();
            this.reltime = __is.readString();
            this.orgid = __is.readInt();
            this.audstateid = __is.readInt();
            this.audstate = __is.readString();
            this.cstates = __is.readInt();
            this.amount = __is.readInt();
            this.countHppoff = __is.readInt();
            this.audes = __is.readString();
            this.audate = __is.readString();
            this.audtime = __is.readString();
            this.auditCstates = __is.readInt();
            this.audpeo = __is.readLong();
        },
        63, 
        false);
    Slice.defineSequence(hpp, "HppAuditInfoSeqHelper", "hpp.HppAuditInfo", false);

    /**
     * 求助所需用户信息
     **/
    hpp.HppUserdet = Slice.defineStruct(
        function(cermatid, userdetid, username, usertel, docid, orgid)
        {
            this.cermatid = cermatid !== undefined ? cermatid : 0;
            this.userdetid = userdetid !== undefined ? userdetid : 0;
            this.username = username !== undefined ? username : "";
            this.usertel = usertel !== undefined ? usertel : "";
            this.docid = docid !== undefined ? docid : "";
            this.orgid = orgid !== undefined ? orgid : 0;
        },
        true,
        function(__os)
        {
            __os.writeInt(this.cermatid);
            __os.writeInt(this.userdetid);
            __os.writeString(this.username);
            __os.writeString(this.usertel);
            __os.writeString(this.docid);
            __os.writeInt(this.orgid);
        },
        function(__is)
        {
            this.cermatid = __is.readInt();
            this.userdetid = __is.readInt();
            this.username = __is.readString();
            this.usertel = __is.readString();
            this.docid = __is.readString();
            this.orgid = __is.readInt();
        },
        15, 
        false);

    /**
     * 希望工程服务接口
     **/
    hpp.HppService = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::hpp::HppService"
        ],
        -1, undefined, undefined, false);

    hpp.HppServicePrx = Slice.defineProxy(Ice.ObjectPrx, hpp.HppService.ice_staticId, undefined);

    Slice.defineOperations(hpp.HppService, hpp.HppServicePrx,
    {
        "addHpp": [, , , , , [cstruct.boolMessage], [[3], [hpp.HppInfo], [cstruct.Cermat], [cstruct.Userdet], [3]], , , , ],
        "updateHpp": [, , , , , [cstruct.boolMessage], [[3], [hpp.HppInfo], [cstruct.Cermat], [cstruct.Userdet], [3]], , , , ],
        "delHpp": [, , , , , [cstruct.boolMessage], [[3]], , , , ],
        "delHpps": [, , , , , [cstruct.boolMessage], [["cstruct.intSeqHelper"]], , , , ],
        "queryHpps": [, , , , , ["hpp.HppInfoSeqHelper"], [[cstruct.Page], [7], [3], [hpp.HppInfo]], [[cstruct.Page]], , , ],
        "queryHppCon": [, , , , , [hpp.HppCon], [[3]], , , , ],
        "hppAudit": [, , , , , [cstruct.boolMessage], [[hpp.HppAudit]], , , , ],
        "queryHppAudits": [, , , , , ["hpp.HppAuditSeqHelper"], [[cstruct.Page], [7], [3]], [[cstruct.Page]], , , ],
        "stickHpp": [, , , , , [cstruct.boolMessage], [[3], [3]], , , , ],
        "cancelPublish": [, , , , , [cstruct.boolMessage], [[3]], , , , ],
        "addHppFunds": [, , , , , [cstruct.boolMessage], [[hpp.HppFunds]], , , , ],
        "queryHppFunds": [, , , , , ["hpp.HppFundSeqHelper"], [[cstruct.Page], [7], [3], [hpp.HppFunds]], [[cstruct.Page]], , , ],
        "queryOffInfo": [, , , , , ["hpp.HppoffInfoSeqHelper"], [[cstruct.Page], [7], [4]], [[cstruct.Page]], , , ],
        "queryAmount": [, , , , , [3], [[3], [4]], , , , ],
        "addHppReply": [, , , , , [cstruct.boolMessage], [[hpp.HppReply]], , , , ],
        "queryHppReplys": [, , , , , ["hpp.HppReplySeqHelper"], [[cstruct.Page], [7], [3]], [[cstruct.Page]], , , ],
        "queryHppsForAudit": [, , , , , ["hpp.HppAuditInfoSeqHelper"], [[cstruct.Page], [7], [hpp.HppAuditInfo]], [[cstruct.Page]], , , ],
        "queryHppUserdet": [, , , , , [hpp.HppUserdet], [[4]], , , , ]
    });
    exports.hpp = hpp;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : this.Ice.__require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : this));

/**
 * Created by Administrator on 2016/12/7.
 */
//解决js不支持long类型的问题
var MAX_INT = Math.pow(2, 53);
function numberToLong(num) {
    console.log("num------",num);
    if (num > MAX_INT || num < -MAX_INT)
        throw new Error("Can't convert number to long: out of bounds");
    var low = num >>> 0;
    var high = ((num - low) / 0x100000000) >>> 0;
    console.log("new Ice.Long(high, low)------",new Ice.Long(high, low));
    return new Ice.Long(high, low);
}

(function(module, require, exports)
{
    var Ice = require("ice").Ice;
    var __M = Ice.__M;
    var Slice = Ice.Slice;

    var ice_init = __M.module("ice_init");
    var url=new Array();
    url[0]="--Ice.Default.Locator = CYLSC/Locator:ws -h 172.16.0.252 -p 4062";
    // url[0]="--Ice.Default.Locator = CYLSC/Locator:ws -h 192.168.6.13 -p 4062";
    url[1]="idleTimeOutSeconds = 300";

    ice_init.ic = Ice.initialize(url);

    //serverName:'UserManageService', module :usermanage,  svrPrx: UserManageServicePrx, method:printer.queryRoles, params:new module.Role("");
    //module:模块名
    //serverName:服务名
    //serverPrx:代理名
    //method:方法名
    //paramsArray:传入的参数
    //callback:回调函数
    ice_init.request = function(module,serverName,serverPrx,method,paramsArray,callback){
        Ice.Promise.try(
            function()
            {
                var base = ice_init.ic.stringToProxy(serverName).ice_twoway().ice_secure(false);
                return module[serverPrx].checkedCast(base).then(
                    function(printer)
                    {
                        var result = printer[method].apply(printer,paramsArray).then(function(data){

                            if(callback && Object.prototype.toString.call(callback)=== '[object Function]'){
                                if(arguments.length<=2){
                                    callback(data);
                                }else{
                                    callback(arguments);
                                }
                            }
                        });
                        return result;
                    });
            }
        ).finally(
            function()
            {
                /* if(ic)
                 {
                 return ic.destroy();
                 }*/
            }
        ).exception(
            function(ex)
            {
                console.log("ex",ex);
                process.exit(1);
            });
    };
    exports.ice_init = ice_init;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
    typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : this.Ice.__require,
    typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : this));

// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `jsb.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(module, require, exports)
{
    var Ice = require("ice").Ice;
    var __M = Ice.__M;
    var cstruct = require("cstruct").cstruct;
    var Slice = Ice.Slice;

    var jsb = __M.module("jsb");

    /**
     * 简历基本信息数据模型
     **/
    jsb.JsbResume = Slice.defineStruct(
        function(oid, userid, phourl, age, inposit, salary, skills, hobby, selfev, credate, updt, updtime, cstates)
        {
            this.oid = oid !== undefined ? oid : 0;
            this.userid = userid !== undefined ? userid : 0;
            this.phourl = phourl !== undefined ? phourl : "";
            this.age = age !== undefined ? age : 0;
            this.inposit = inposit !== undefined ? inposit : 0;
            this.salary = salary !== undefined ? salary : 0;
            this.skills = skills !== undefined ? skills : "";
            this.hobby = hobby !== undefined ? hobby : "";
            this.selfev = selfev !== undefined ? selfev : "";
            this.credate = credate !== undefined ? credate : "";
            this.updt = updt !== undefined ? updt : "";
            this.updtime = updtime !== undefined ? updtime : "";
            this.cstates = cstates !== undefined ? cstates : 0;
        },
        true,
        function(__os)
        {
            __os.writeInt(this.oid);
            __os.writeLong(this.userid);
            __os.writeString(this.phourl);
            __os.writeInt(this.age);
            __os.writeInt(this.inposit);
            __os.writeInt(this.salary);
            __os.writeString(this.skills);
            __os.writeString(this.hobby);
            __os.writeString(this.selfev);
            __os.writeString(this.credate);
            __os.writeString(this.updt);
            __os.writeString(this.updtime);
            __os.writeInt(this.cstates);
        },
        function(__is)
        {
            this.oid = __is.readInt();
            this.userid = __is.readLong();
            this.phourl = __is.readString();
            this.age = __is.readInt();
            this.inposit = __is.readInt();
            this.salary = __is.readInt();
            this.skills = __is.readString();
            this.hobby = __is.readString();
            this.selfev = __is.readString();
            this.credate = __is.readString();
            this.updt = __is.readString();
            this.updtime = __is.readString();
            this.cstates = __is.readInt();
        },
        35, 
        false);
    Slice.defineSequence(jsb, "JsbResumeSeqHelper", "jsb.JsbResume", false);

    /**
     * 学习工作经历信息数据模型
     **/
    jsb.JsbSwexp = Slice.defineStruct(
        function(oid, userid, begdate, endate, swsc, perf, cstates)
        {
            this.oid = oid !== undefined ? oid : 0;
            this.userid = userid !== undefined ? userid : 0;
            this.begdate = begdate !== undefined ? begdate : "";
            this.endate = endate !== undefined ? endate : "";
            this.swsc = swsc !== undefined ? swsc : "";
            this.perf = perf !== undefined ? perf : "";
            this.cstates = cstates !== undefined ? cstates : 0;
        },
        true,
        function(__os)
        {
            __os.writeInt(this.oid);
            __os.writeLong(this.userid);
            __os.writeString(this.begdate);
            __os.writeString(this.endate);
            __os.writeString(this.swsc);
            __os.writeString(this.perf);
            __os.writeInt(this.cstates);
        },
        function(__is)
        {
            this.oid = __is.readInt();
            this.userid = __is.readLong();
            this.begdate = __is.readString();
            this.endate = __is.readString();
            this.swsc = __is.readString();
            this.perf = __is.readString();
            this.cstates = __is.readInt();
        },
        20, 
        false);
    Slice.defineSequence(jsb, "JsbSwexpSeqHelper", "jsb.JsbSwexp", false);

    /**
     * 简历信息数据模型
     **/
    jsb.JsbResumeInfo = Slice.defineStruct(
        function(jsbResume, jsbSwexpList)
        {
            this.jsbResume = jsbResume !== undefined ? jsbResume : new jsb.JsbResume();
            this.jsbSwexpList = jsbSwexpList !== undefined ? jsbSwexpList : null;
        },
        true,
        function(__os)
        {
            jsb.JsbResume.write(__os, this.jsbResume);
            jsb.JsbSwexpSeqHelper.write(__os, this.jsbSwexpList);
        },
        function(__is)
        {
            this.jsbResume = jsb.JsbResume.read(__is, this.jsbResume);
            this.jsbSwexpList = jsb.JsbSwexpSeqHelper.read(__is);
        },
        36, 
        false);

    /**
     * 企业招聘信息数据模型
     **/
    jsb.JsbRec = Slice.defineStruct(
        function(oid, userid, posit, username, worknatid, worknat, workadd, edureqid, edureq, minsalary, maxsalary, reqpeos, salben, pdec, preq, updt, updtime, audstateid, audstate, cstates)
        {
            this.oid = oid !== undefined ? oid : 0;
            this.userid = userid !== undefined ? userid : 0;
            this.posit = posit !== undefined ? posit : 0;
            this.username = username !== undefined ? username : "";
            this.worknatid = worknatid !== undefined ? worknatid : 0;
            this.worknat = worknat !== undefined ? worknat : "";
            this.workadd = workadd !== undefined ? workadd : "";
            this.edureqid = edureqid !== undefined ? edureqid : 0;
            this.edureq = edureq !== undefined ? edureq : "";
            this.minsalary = minsalary !== undefined ? minsalary : 0;
            this.maxsalary = maxsalary !== undefined ? maxsalary : 0;
            this.reqpeos = reqpeos !== undefined ? reqpeos : 0;
            this.salben = salben !== undefined ? salben : 0;
            this.pdec = pdec !== undefined ? pdec : "";
            this.preq = preq !== undefined ? preq : "";
            this.updt = updt !== undefined ? updt : "";
            this.updtime = updtime !== undefined ? updtime : "";
            this.audstateid = audstateid !== undefined ? audstateid : 0;
            this.audstate = audstate !== undefined ? audstate : "";
            this.cstates = cstates !== undefined ? cstates : 0;
        },
        true,
        function(__os)
        {
            __os.writeInt(this.oid);
            __os.writeLong(this.userid);
            __os.writeInt(this.posit);
            __os.writeString(this.username);
            __os.writeInt(this.worknatid);
            __os.writeString(this.worknat);
            __os.writeString(this.workadd);
            __os.writeInt(this.edureqid);
            __os.writeString(this.edureq);
            __os.writeInt(this.minsalary);
            __os.writeInt(this.maxsalary);
            __os.writeInt(this.reqpeos);
            __os.writeInt(this.salben);
            __os.writeString(this.pdec);
            __os.writeString(this.preq);
            __os.writeString(this.updt);
            __os.writeString(this.updtime);
            __os.writeInt(this.audstateid);
            __os.writeString(this.audstate);
            __os.writeInt(this.cstates);
        },
        function(__is)
        {
            this.oid = __is.readInt();
            this.userid = __is.readLong();
            this.posit = __is.readInt();
            this.username = __is.readString();
            this.worknatid = __is.readInt();
            this.worknat = __is.readString();
            this.workadd = __is.readString();
            this.edureqid = __is.readInt();
            this.edureq = __is.readString();
            this.minsalary = __is.readInt();
            this.maxsalary = __is.readInt();
            this.reqpeos = __is.readInt();
            this.salben = __is.readInt();
            this.pdec = __is.readString();
            this.preq = __is.readString();
            this.updt = __is.readString();
            this.updtime = __is.readString();
            this.audstateid = __is.readInt();
            this.audstate = __is.readString();
            this.cstates = __is.readInt();
        },
        57, 
        false);
    Slice.defineSequence(jsb, "JsbRecSeqHelper", "jsb.JsbRec", false);

    /**
     * 求职信息数据模型
     **/
    jsb.JsbSjob = Slice.defineStruct(
        function(oid, userid, recid, sendate, entfeb, cstates)
        {
            this.oid = oid !== undefined ? oid : 0;
            this.userid = userid !== undefined ? userid : 0;
            this.recid = recid !== undefined ? recid : 0;
            this.sendate = sendate !== undefined ? sendate : "";
            this.entfeb = entfeb !== undefined ? entfeb : "";
            this.cstates = cstates !== undefined ? cstates : 0;
        },
        true,
        function(__os)
        {
            __os.writeInt(this.oid);
            __os.writeLong(this.userid);
            __os.writeInt(this.recid);
            __os.writeString(this.sendate);
            __os.writeString(this.entfeb);
            __os.writeInt(this.cstates);
        },
        function(__is)
        {
            this.oid = __is.readInt();
            this.userid = __is.readLong();
            this.recid = __is.readInt();
            this.sendate = __is.readString();
            this.entfeb = __is.readString();
            this.cstates = __is.readInt();
        },
        22, 
        false);

    /**
     * 求职-招聘信息数据模型
     **/
    jsb.JsbSjobAndRec = Slice.defineStruct(
        function(jsbSjob, jsbRec)
        {
            this.jsbSjob = jsbSjob !== undefined ? jsbSjob : new jsb.JsbSjob();
            this.jsbRec = jsbRec !== undefined ? jsbRec : new jsb.JsbRec();
        },
        true,
        function(__os)
        {
            jsb.JsbSjob.write(__os, this.jsbSjob);
            jsb.JsbRec.write(__os, this.jsbRec);
        },
        function(__is)
        {
            this.jsbSjob = jsb.JsbSjob.read(__is, this.jsbSjob);
            this.jsbRec = jsb.JsbRec.read(__is, this.jsbRec);
        },
        79, 
        false);
    Slice.defineSequence(jsb, "JsbSjobAndRecSeqHelper", "jsb.JsbSjobAndRec", false);

    /**
     * 招聘-求职-用户信息数据模型
     **/
    jsb.JsbSjobAndUserInfo = Slice.defineStruct(
        function(jsbSjob, userdet)
        {
            this.jsbSjob = jsbSjob !== undefined ? jsbSjob : new jsb.JsbSjob();
            this.userdet = userdet !== undefined ? userdet : new cstruct.Userdet();
        },
        true,
        function(__os)
        {
            jsb.JsbSjob.write(__os, this.jsbSjob);
            cstruct.Userdet.write(__os, this.userdet);
        },
        function(__is)
        {
            this.jsbSjob = jsb.JsbSjob.read(__is, this.jsbSjob);
            this.userdet = cstruct.Userdet.read(__is, this.userdet);
        },
        58, 
        false);
    Slice.defineSequence(jsb, "JsbSjobAndUserInfoSeqHelper", "jsb.JsbSjobAndUserInfo", false);

    /**
     * 招聘信息审核数据模型
     **/
    jsb.JsbAudit = Slice.defineStruct(
        function(oid, recid, audpeo, audpeoName, audes, audate, audtime, cstates)
        {
            this.oid = oid !== undefined ? oid : 0;
            this.recid = recid !== undefined ? recid : 0;
            this.audpeo = audpeo !== undefined ? audpeo : 0;
            this.audpeoName = audpeoName !== undefined ? audpeoName : "";
            this.audes = audes !== undefined ? audes : "";
            this.audate = audate !== undefined ? audate : "";
            this.audtime = audtime !== undefined ? audtime : "";
            this.cstates = cstates !== undefined ? cstates : 0;
        },
        true,
        function(__os)
        {
            __os.writeInt(this.oid);
            __os.writeInt(this.recid);
            __os.writeLong(this.audpeo);
            __os.writeString(this.audpeoName);
            __os.writeString(this.audes);
            __os.writeString(this.audate);
            __os.writeString(this.audtime);
            __os.writeInt(this.cstates);
        },
        function(__is)
        {
            this.oid = __is.readInt();
            this.recid = __is.readInt();
            this.audpeo = __is.readLong();
            this.audpeoName = __is.readString();
            this.audes = __is.readString();
            this.audate = __is.readString();
            this.audtime = __is.readString();
            this.cstates = __is.readInt();
        },
        24, 
        false);
    Slice.defineSequence(jsb, "JsbAuditSeqHelper", "jsb.JsbAudit", false);

    /**
     * 协调推荐信息数据模型
     **/
    jsb.JsbReco = Slice.defineStruct(
        function(oid, recid, userid, recdate, cstates)
        {
            this.oid = oid !== undefined ? oid : 0;
            this.recid = recid !== undefined ? recid : 0;
            this.userid = userid !== undefined ? userid : 0;
            this.recdate = recdate !== undefined ? recdate : "";
            this.cstates = cstates !== undefined ? cstates : 0;
        },
        true,
        function(__os)
        {
            __os.writeInt(this.oid);
            __os.writeInt(this.recid);
            __os.writeLong(this.userid);
            __os.writeString(this.recdate);
            __os.writeInt(this.cstates);
        },
        function(__is)
        {
            this.oid = __is.readInt();
            this.recid = __is.readInt();
            this.userid = __is.readLong();
            this.recdate = __is.readString();
            this.cstates = __is.readInt();
        },
        21, 
        false);

    /**
     * 福利字典数据模型
     **/
    jsb.JsbSalben = Slice.defineStruct(
        function(salid, salname)
        {
            this.salid = salid !== undefined ? salid : 0;
            this.salname = salname !== undefined ? salname : "";
        },
        true,
        function(__os)
        {
            __os.writeInt(this.salid);
            __os.writeString(this.salname);
        },
        function(__is)
        {
            this.salid = __is.readInt();
            this.salname = __is.readString();
        },
        5, 
        false);

    /**
     * 岗位类别字典数据模型
     **/
    jsb.JsbOcctype = Slice.defineStruct(
        function(occid, occname)
        {
            this.occid = occid !== undefined ? occid : 0;
            this.occname = occname !== undefined ? occname : "";
        },
        true,
        function(__os)
        {
            __os.writeInt(this.occid);
            __os.writeString(this.occname);
        },
        function(__is)
        {
            this.occid = __is.readInt();
            this.occname = __is.readString();
        },
        5, 
        false);
    Slice.defineSequence(jsb, "JsbOcctypeSeqHelper", "jsb.JsbOcctype", false);

    /**
     * 创业项目数据模型
     **/
    jsb.JsbProject = Slice.defineStruct(
        function(proid, proname, procon, imgurl, shn, proowner, proownerName, reldate, reltime, audpeo, audpeoName, audes, audate, audtime, cstates)
        {
            this.proid = proid !== undefined ? proid : 0;
            this.proname = proname !== undefined ? proname : "";
            this.procon = procon !== undefined ? procon : "";
            this.imgurl = imgurl !== undefined ? imgurl : "";
            this.shn = shn !== undefined ? shn : 0;
            this.proowner = proowner !== undefined ? proowner : 0;
            this.proownerName = proownerName !== undefined ? proownerName : "";
            this.reldate = reldate !== undefined ? reldate : "";
            this.reltime = reltime !== undefined ? reltime : "";
            this.audpeo = audpeo !== undefined ? audpeo : 0;
            this.audpeoName = audpeoName !== undefined ? audpeoName : "";
            this.audes = audes !== undefined ? audes : "";
            this.audate = audate !== undefined ? audate : "";
            this.audtime = audtime !== undefined ? audtime : "";
            this.cstates = cstates !== undefined ? cstates : 0;
        },
        true,
        function(__os)
        {
            __os.writeInt(this.proid);
            __os.writeString(this.proname);
            __os.writeString(this.procon);
            __os.writeString(this.imgurl);
            __os.writeInt(this.shn);
            __os.writeLong(this.proowner);
            __os.writeString(this.proownerName);
            __os.writeString(this.reldate);
            __os.writeString(this.reltime);
            __os.writeLong(this.audpeo);
            __os.writeString(this.audpeoName);
            __os.writeString(this.audes);
            __os.writeString(this.audate);
            __os.writeString(this.audtime);
            __os.writeInt(this.cstates);
        },
        function(__is)
        {
            this.proid = __is.readInt();
            this.proname = __is.readString();
            this.procon = __is.readString();
            this.imgurl = __is.readString();
            this.shn = __is.readInt();
            this.proowner = __is.readLong();
            this.proownerName = __is.readString();
            this.reldate = __is.readString();
            this.reltime = __is.readString();
            this.audpeo = __is.readLong();
            this.audpeoName = __is.readString();
            this.audes = __is.readString();
            this.audate = __is.readString();
            this.audtime = __is.readString();
            this.cstates = __is.readInt();
        },
        38, 
        false);
    Slice.defineSequence(jsb, "JsbProjectSeqHelper", "jsb.JsbProject", false);

    /**
     * 创业项目内容数据模型
     **/
    jsb.JsbPdetail = Slice.defineStruct(
        function(proid, procon)
        {
            this.proid = proid !== undefined ? proid : 0;
            this.procon = procon !== undefined ? procon : "";
        },
        true,
        function(__os)
        {
            __os.writeInt(this.proid);
            __os.writeString(this.procon);
        },
        function(__is)
        {
            this.proid = __is.readInt();
            this.procon = __is.readString();
        },
        5, 
        false);

    /**
     * 创业项目申请进度数据模型
     **/
    jsb.JsbProgress = Slice.defineStruct(
        function(oid, userid, userName, proid, progressid, proName, progress, cstates)
        {
            this.oid = oid !== undefined ? oid : 0;
            this.userid = userid !== undefined ? userid : 0;
            this.userName = userName !== undefined ? userName : "";
            this.proid = proid !== undefined ? proid : 0;
            this.progressid = progressid !== undefined ? progressid : 0;
            this.proName = proName !== undefined ? proName : "";
            this.progress = progress !== undefined ? progress : "";
            this.cstates = cstates !== undefined ? cstates : 0;
        },
        true,
        function(__os)
        {
            __os.writeInt(this.oid);
            __os.writeLong(this.userid);
            __os.writeString(this.userName);
            __os.writeInt(this.proid);
            __os.writeInt(this.progressid);
            __os.writeString(this.proName);
            __os.writeString(this.progress);
            __os.writeInt(this.cstates);
        },
        function(__is)
        {
            this.oid = __is.readInt();
            this.userid = __is.readLong();
            this.userName = __is.readString();
            this.proid = __is.readInt();
            this.progressid = __is.readInt();
            this.proName = __is.readString();
            this.progress = __is.readString();
            this.cstates = __is.readInt();
        },
        27, 
        false);
    Slice.defineSequence(jsb, "JsbProgressSeqHelper", "jsb.JsbProgress", false);

    /**
     * 待审核或已审核企业认证信息数据模型
     **/
    jsb.CompanyApplyInfo = Slice.defineStruct(
        function(userid, username, audate, audtime, audpeo, audpeoName, cstates, audes)
        {
            this.userid = userid !== undefined ? userid : 0;
            this.username = username !== undefined ? username : "";
            this.audate = audate !== undefined ? audate : "";
            this.audtime = audtime !== undefined ? audtime : "";
            this.audpeo = audpeo !== undefined ? audpeo : 0;
            this.audpeoName = audpeoName !== undefined ? audpeoName : "";
            this.cstates = cstates !== undefined ? cstates : 0;
            this.audes = audes !== undefined ? audes : "";
        },
        true,
        function(__os)
        {
            __os.writeLong(this.userid);
            __os.writeString(this.username);
            __os.writeString(this.audate);
            __os.writeString(this.audtime);
            __os.writeLong(this.audpeo);
            __os.writeString(this.audpeoName);
            __os.writeInt(this.cstates);
            __os.writeString(this.audes);
        },
        function(__is)
        {
            this.userid = __is.readLong();
            this.username = __is.readString();
            this.audate = __is.readString();
            this.audtime = __is.readString();
            this.audpeo = __is.readLong();
            this.audpeoName = __is.readString();
            this.cstates = __is.readInt();
            this.audes = __is.readString();
        },
        25, 
        false);
    Slice.defineSequence(jsb, "CompanyApplyInfoSeqHelper", "jsb.CompanyApplyInfo", false);

    /**
     * 就业创业服务接口
     **/
    jsb.JsbService = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::jsb::JsbService"
        ],
        -1, undefined, undefined, false);

    jsb.JsbServicePrx = Slice.defineProxy(Ice.ObjectPrx, jsb.JsbService.ice_staticId, undefined);

    Slice.defineOperations(jsb.JsbService, jsb.JsbServicePrx,
    {
        "addJsbResume": [, , , , , [cstruct.boolMessage], [[jsb.JsbResumeInfo]], , , , ],
        "updateJsbResume": [, , , , , [cstruct.boolMessage], [[jsb.JsbResumeInfo]], , , , ],
        "queryJsbResumes": [, , , , , ["jsb.JsbResumeSeqHelper"], [[cstruct.Page], [7], [jsb.JsbResume]], [[cstruct.Page]], , , ],
        "queryJsbSwexpsByResume": [, , , , , ["jsb.JsbSwexpSeqHelper"], [[cstruct.Page], [7], [3]], [[cstruct.Page]], , , ],
        "queryJsbSwexpsByUser": [, , , , , ["jsb.JsbSwexpSeqHelper"], [[cstruct.Page], [7], [4]], [[cstruct.Page]], , , ],
        "addJsbSwexp": [, , , , , [cstruct.boolMessage], [[jsb.JsbSwexp]], , , , ],
        "delJsbSwexps": [, , , , , [cstruct.boolMessage], [["cstruct.intSeqHelper"]], , , , ],
        "queryJsbSwexpsByResumeByUser": [, , , , , [jsb.JsbResumeInfo], [[4]], , , , ],
        "applyToCompany": [, , , , , [cstruct.boolMessage], [[cstruct.Userdet], [cstruct.Cermat]], , , , ],
        "queryApplyToCompany": [, , , , , ["jsb.CompanyApplyInfoSeqHelper"], [[cstruct.Page], [7], [3]], [[cstruct.Page]], , , ],
        "queryCermatSeqByApply": [, , , , , ["cstruct.CermatSeqHelper"], [[cstruct.Page], [7], [4]], [[cstruct.Page]], , , ],
        "companyAud": [, , , , , [cstruct.boolMessage], [[cstruct.Ceraud]], , , , ],
        "addJsbRec": [, , , , , [cstruct.boolMessage], [[jsb.JsbRec]], , , , ],
        "queryJsbRecs": [, , , , , ["jsb.JsbRecSeqHelper"], [[cstruct.Page], [7], [3], [jsb.JsbRec]], [[cstruct.Page]], , , ],
        "delJsbRecs": [, , , , , [cstruct.boolMessage], [["cstruct.intSeqHelper"]], , , , ],
        "addJsbAudit": [, , , , , [cstruct.boolMessage], [[jsb.JsbAudit]], , , , ],
        "queryJsbAudits": [, , , , , ["jsb.JsbAuditSeqHelper"], [[cstruct.Page], [7], [3]], [[cstruct.Page]], , , ],
        "addJsbSjob": [, , , , , [cstruct.boolMessage], [[jsb.JsbSjob]], , , , ],
        "queryJsbSjobAndRec": [, , , , , ["jsb.JsbSjobAndRecSeqHelper"], [[cstruct.Page], [7], [4]], [[cstruct.Page]], , , ],
        "queryJsbSjobAndUserInfo": [, , , , , ["jsb.JsbSjobAndUserInfoSeqHelper"], [[cstruct.Page], [7], [3]], [[cstruct.Page]], , , ],
        "entfeb": [, , , , , [cstruct.boolMessage], [[3], [7]], , , , ],
        "macthResume": [, , , , , ["jsb.JsbResumeSeqHelper"], [[cstruct.Page], [7], [3]], [[cstruct.Page]], , , ],
        "addJsbReco": [, , , , , [cstruct.boolMessage], [[jsb.JsbReco]], , , , ],
        "reco": [, , , , , [cstruct.boolMessage], [[3], [3]], , , , ],
        "addJsbProject": [, , , , , [cstruct.boolMessage], [[jsb.JsbProject]], , , , ],
        "queryJsbProjects": [, , , , , ["jsb.JsbProjectSeqHelper"], [[cstruct.Page], [7], [jsb.JsbProject]], [[cstruct.Page]], , , ],
        "queryJsbProjectCon": [, , , , , [jsb.JsbPdetail], [[3]], , , , ],
        "audJsbProject": [, , , , , [cstruct.boolMessage], [[jsb.JsbProject]], , , , ],
        "addJsbProgress": [, , , , , [cstruct.boolMessage], [[jsb.JsbProgress]], , , , ],
        "queryJsbProgress": [, , , , , ["jsb.JsbProgressSeqHelper"], [[cstruct.Page], [7], [3], [jsb.JsbProgress]], [[cstruct.Page]], , , ],
        "updateJsbProgress": [, , , , , [cstruct.boolMessage], [[jsb.JsbProgress]], , , , ],
        "updateJsbSjobStates": [, , , , , [cstruct.boolMessage], [[3]], , , , ],
        "queryJsbOcctypes": [, , , , , ["jsb.JsbOcctypeSeqHelper"], [[cstruct.Page], [7], [jsb.JsbOcctype]], [[cstruct.Page]], , , ]
    });
    exports.jsb = jsb;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : this.Ice.__require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : this));

// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `login.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(module, require, exports)
{
    var Ice = require("ice").Ice;
    var __M = Ice.__M;
    var Slice = Ice.Slice;

    var login = __M.module("login");

    /**
     * 用户数据模型
     **/
    login.User = Slice.defineStruct(
        function(userid, nickname, passwd, roles, banspd, banspt, cstate)
        {
            this.userid = userid !== undefined ? userid : 0;
            this.nickname = nickname !== undefined ? nickname : "";
            this.passwd = passwd !== undefined ? passwd : "";
            this.roles = roles !== undefined ? roles : 0;
            this.banspd = banspd !== undefined ? banspd : "";
            this.banspt = banspt !== undefined ? banspt : "";
            this.cstate = cstate !== undefined ? cstate : 0;
        },
        true,
        function(__os)
        {
            __os.writeLong(this.userid);
            __os.writeString(this.nickname);
            __os.writeString(this.passwd);
            __os.writeLong(this.roles);
            __os.writeString(this.banspd);
            __os.writeString(this.banspt);
            __os.writeInt(this.cstate);
        },
        function(__is)
        {
            this.userid = __is.readLong();
            this.nickname = __is.readString();
            this.passwd = __is.readString();
            this.roles = __is.readLong();
            this.banspd = __is.readString();
            this.banspt = __is.readString();
            this.cstate = __is.readInt();
        },
        24, 
        false);
    Slice.defineSequence(login, "userSeqHelper", "login.User", false);

    /**
     * 用户登录服务接口
     **/
    login.LoginService = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::login::LoginService"
        ],
        -1, undefined, undefined, false);

    login.LoginServicePrx = Slice.defineProxy(Ice.ObjectPrx, login.LoginService.ice_staticId, undefined);

    Slice.defineOperations(login.LoginService, login.LoginServicePrx,
    {
        "verificationUser": [, , , , , [1], [[4], [7]], , , , ],
        "queryUsers": [, , , , , ["login.userSeqHelper"], , , , , ],
        "deleteUser": [, , , , , [1], [[4]], , , , ],
        "updateUser": [, , , , , [1], [[login.User]], , , , ],
        "addUser": [, , , , , [1], [[login.User]], , , , ]
    });
    exports.login = login;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : this.Ice.__require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : this));

// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `Printer.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(module, require, exports)
{
    var Ice = require("./node_modules/ice/src/ice/ice").Ice;
    var __M = Ice.__M;
    var Slice = Ice.Slice;

    var PrinterInterface = __M.module("PrinterInterface");

    PrinterInterface.Printer = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::PrinterInterface::Printer"
        ],
        -1, undefined, undefined, false);

    PrinterInterface.PrinterPrx = Slice.defineProxy(Ice.ObjectPrx, PrinterInterface.Printer.ice_staticId, undefined);

    Slice.defineOperations(PrinterInterface.Printer, PrinterInterface.PrinterPrx,
    {
        "printString": [, , , , , [7], [[7]], , , , ],
        "clientPrintString": [, , , , , [7], , , , , ]
    });
    exports.PrinterInterface = PrinterInterface;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : this.Ice.__require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : this));

// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `share.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(module, require, exports)
{
    var Ice = require("ice").Ice;
    var __M = Ice.__M;
    var cstruct = require("cstruct").cstruct;
    var Slice = Ice.Slice;

    var share = __M.module("share");

    /**
     * 分享服务接口
     **/
    share.ShareService = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::share::ShareService"
        ],
        -1, undefined, undefined, false);

    share.ShareServicePrx = Slice.defineProxy(Ice.ObjectPrx, share.ShareService.ice_staticId, undefined);

    Slice.defineOperations(share.ShareService, share.ShareServicePrx,
    {
        "addShareCount": [, , , , , [cstruct.boolMessage], [[3], [3]], , , , ]
    });
    exports.share = share;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : this.Ice.__require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : this));

// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `SMS.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(module, require, exports)
{
    var Ice = require("ice").Ice;
    var __M = Ice.__M;
    var Slice = Ice.Slice;

    var sms = __M.module("sms");

    /**
     * 手机短信服务接口
     **/
    sms.SMSService = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::sms::SMSService"
        ],
        -1, undefined, undefined, false);

    sms.SMSServicePrx = Slice.defineProxy(Ice.ObjectPrx, sms.SMSService.ice_staticId, undefined);

    Slice.defineOperations(sms.SMSService, sms.SMSServicePrx,
    {
        "verificationCode": [, , , , , [7], [[4]], , , , ]
    });
    exports.sms = sms;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : this.Ice.__require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : this));

// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `ttl.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(module, require, exports)
{
    var Ice = require("ice").Ice;
    var __M = Ice.__M;
    var cstruct = require("cstruct").cstruct;
    var Slice = Ice.Slice;

    var ttl = __M.module("ttl");

    /**
     * 青少年思想引领信息数据模型
     **/
    ttl.TtlInfo = Slice.defineStruct(
        function(ttlid, ttltitle, ttlcon, imgurl, shn, sortn, ttlowner, reldate, reltime, orgid, audstateid, audstate, cstates)
        {
            this.ttlid = ttlid !== undefined ? ttlid : 0;
            this.ttltitle = ttltitle !== undefined ? ttltitle : "";
            this.ttlcon = ttlcon !== undefined ? ttlcon : "";
            this.imgurl = imgurl !== undefined ? imgurl : "";
            this.shn = shn !== undefined ? shn : 0;
            this.sortn = sortn !== undefined ? sortn : 0;
            this.ttlowner = ttlowner !== undefined ? ttlowner : 0;
            this.reldate = reldate !== undefined ? reldate : "";
            this.reltime = reltime !== undefined ? reltime : "";
            this.orgid = orgid !== undefined ? orgid : 0;
            this.audstateid = audstateid !== undefined ? audstateid : 0;
            this.audstate = audstate !== undefined ? audstate : "";
            this.cstates = cstates !== undefined ? cstates : 0;
        },
        true,
        function(__os)
        {
            __os.writeInt(this.ttlid);
            __os.writeString(this.ttltitle);
            __os.writeString(this.ttlcon);
            __os.writeString(this.imgurl);
            __os.writeInt(this.shn);
            __os.writeInt(this.sortn);
            __os.writeLong(this.ttlowner);
            __os.writeString(this.reldate);
            __os.writeString(this.reltime);
            __os.writeInt(this.orgid);
            __os.writeInt(this.audstateid);
            __os.writeString(this.audstate);
            __os.writeInt(this.cstates);
        },
        function(__is)
        {
            this.ttlid = __is.readInt();
            this.ttltitle = __is.readString();
            this.ttlcon = __is.readString();
            this.imgurl = __is.readString();
            this.shn = __is.readInt();
            this.sortn = __is.readInt();
            this.ttlowner = __is.readLong();
            this.reldate = __is.readString();
            this.reltime = __is.readString();
            this.orgid = __is.readInt();
            this.audstateid = __is.readInt();
            this.audstate = __is.readString();
            this.cstates = __is.readInt();
        },
        38, 
        false);
    Slice.defineSequence(ttl, "TtlInfoSeqHelper", "ttl.TtlInfo", false);

    /**
     * 青少年思想引领信息内容数据模型
     **/
    ttl.TtlCon = Slice.defineStruct(
        function(ttlid, ttlcon)
        {
            this.ttlid = ttlid !== undefined ? ttlid : 0;
            this.ttlcon = ttlcon !== undefined ? ttlcon : "";
        },
        true,
        function(__os)
        {
            __os.writeInt(this.ttlid);
            __os.writeString(this.ttlcon);
        },
        function(__is)
        {
            this.ttlid = __is.readInt();
            this.ttlcon = __is.readString();
        },
        5, 
        false);

    /**
     * 青少年思想引领审核信息数据模型
     **/
    ttl.TtlAudit = Slice.defineStruct(
        function(oid, ttlid, audpeo, audpeoName, audes, audate, audtime, cstates)
        {
            this.oid = oid !== undefined ? oid : 0;
            this.ttlid = ttlid !== undefined ? ttlid : 0;
            this.audpeo = audpeo !== undefined ? audpeo : 0;
            this.audpeoName = audpeoName !== undefined ? audpeoName : "";
            this.audes = audes !== undefined ? audes : "";
            this.audate = audate !== undefined ? audate : "";
            this.audtime = audtime !== undefined ? audtime : "";
            this.cstates = cstates !== undefined ? cstates : 0;
        },
        true,
        function(__os)
        {
            __os.writeInt(this.oid);
            __os.writeInt(this.ttlid);
            __os.writeLong(this.audpeo);
            __os.writeString(this.audpeoName);
            __os.writeString(this.audes);
            __os.writeString(this.audate);
            __os.writeString(this.audtime);
            __os.writeInt(this.cstates);
        },
        function(__is)
        {
            this.oid = __is.readInt();
            this.ttlid = __is.readInt();
            this.audpeo = __is.readLong();
            this.audpeoName = __is.readString();
            this.audes = __is.readString();
            this.audate = __is.readString();
            this.audtime = __is.readString();
            this.cstates = __is.readInt();
        },
        24, 
        false);
    Slice.defineSequence(ttl, "TtlAuditSeqHelper", "ttl.TtlAudit", false);

    /**
     * 青少年思想引领服务接口
     **/
    ttl.TtlService = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::ttl::TtlService"
        ],
        -1, undefined, undefined, false);

    ttl.TtlServicePrx = Slice.defineProxy(Ice.ObjectPrx, ttl.TtlService.ice_staticId, undefined);

    Slice.defineOperations(ttl.TtlService, ttl.TtlServicePrx,
    {
        "addTtl": [, , , , , [cstruct.boolMessage], [[3], [ttl.TtlInfo]], , , , ],
        "updateTtl": [, , , , , [cstruct.boolMessage], [[3], [ttl.TtlInfo]], , , , ],
        "delTtl": [, , , , , [cstruct.boolMessage], [[3]], , , , ],
        "delTtls": [, , , , , [cstruct.boolMessage], [["cstruct.intSeqHelper"]], , , , ],
        "queryTtls": [, , , , , ["ttl.TtlInfoSeqHelper"], [[cstruct.Page], [7], [3], [ttl.TtlInfo]], [[cstruct.Page]], , , ],
        "queryTtlCon": [, , , , , [ttl.TtlCon], [[3]], , , , ],
        "addTtlAudit": [, , , , , [cstruct.boolMessage], [[ttl.TtlAudit]], , , , ],
        "queryTtlAudits": [, , , , , ["ttl.TtlAuditSeqHelper"], [[cstruct.Page], [7], [3]], [[cstruct.Page]], , , ]
    });
    exports.ttl = ttl;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : this.Ice.__require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : this));

// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `usermanager.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(module, require, exports)
{
    var Ice = require("ice").Ice;
    var __M = Ice.__M;
    var cstruct = require("cstruct").cstruct;
    var Slice = Ice.Slice;

    var usermanage = __M.module("usermanage");

    /**
     * 用户基本信息数据模型
     **/
    usermanage.User = Slice.defineStruct(
        function(oid, userid, passwd, nickname, hpurl, orgid, roles, banspd, banspt, eatype, regdate, regtime, actlevel, cstates)
        {
            this.oid = oid !== undefined ? oid : 0;
            this.userid = userid !== undefined ? userid : 0;
            this.passwd = passwd !== undefined ? passwd : "";
            this.nickname = nickname !== undefined ? nickname : "";
            this.hpurl = hpurl !== undefined ? hpurl : "";
            this.orgid = orgid !== undefined ? orgid : 0;
            this.roles = roles !== undefined ? roles : 0;
            this.banspd = banspd !== undefined ? banspd : "";
            this.banspt = banspt !== undefined ? banspt : "";
            this.eatype = eatype !== undefined ? eatype : 0;
            this.regdate = regdate !== undefined ? regdate : "";
            this.regtime = regtime !== undefined ? regtime : "";
            this.actlevel = actlevel !== undefined ? actlevel : 0;
            this.cstates = cstates !== undefined ? cstates : 0;
        },
        true,
        function(__os)
        {
            __os.writeInt(this.oid);
            __os.writeLong(this.userid);
            __os.writeString(this.passwd);
            __os.writeString(this.nickname);
            __os.writeString(this.hpurl);
            __os.writeInt(this.orgid);
            __os.writeLong(this.roles);
            __os.writeString(this.banspd);
            __os.writeString(this.banspt);
            __os.writeInt(this.eatype);
            __os.writeString(this.regdate);
            __os.writeString(this.regtime);
            __os.writeInt(this.actlevel);
            __os.writeInt(this.cstates);
        },
        function(__is)
        {
            this.oid = __is.readInt();
            this.userid = __is.readLong();
            this.passwd = __is.readString();
            this.nickname = __is.readString();
            this.hpurl = __is.readString();
            this.orgid = __is.readInt();
            this.roles = __is.readLong();
            this.banspd = __is.readString();
            this.banspt = __is.readString();
            this.eatype = __is.readInt();
            this.regdate = __is.readString();
            this.regtime = __is.readString();
            this.actlevel = __is.readInt();
            this.cstates = __is.readInt();
        },
        43, 
        false);
    Slice.defineSequence(usermanage, "UserSeqHelper", "usermanage.User", false);

    /**
     * 资源码数据模型
     **/
    usermanage.ResCode = Slice.defineStruct(
        function(resid, resname, roles, cstates)
        {
            this.resid = resid !== undefined ? resid : 0;
            this.resname = resname !== undefined ? resname : "";
            this.roles = roles !== undefined ? roles : 0;
            this.cstates = cstates !== undefined ? cstates : 0;
        },
        true,
        function(__os)
        {
            __os.writeInt(this.resid);
            __os.writeString(this.resname);
            __os.writeLong(this.roles);
            __os.writeInt(this.cstates);
        },
        function(__is)
        {
            this.resid = __is.readInt();
            this.resname = __is.readString();
            this.roles = __is.readLong();
            this.cstates = __is.readInt();
        },
        17, 
        false);
    Slice.defineSequence(usermanage, "ResSeqHelper", "usermanage.ResCode", false);

    /**
     * 机构数据模型
     **/
    usermanage.Org = Slice.defineStruct(
        function(orgid, orgname, cstates)
        {
            this.orgid = orgid !== undefined ? orgid : 0;
            this.orgname = orgname !== undefined ? orgname : "";
            this.cstates = cstates !== undefined ? cstates : 0;
        },
        true,
        function(__os)
        {
            __os.writeInt(this.orgid);
            __os.writeString(this.orgname);
            __os.writeInt(this.cstates);
        },
        function(__is)
        {
            this.orgid = __is.readInt();
            this.orgname = __is.readString();
            this.cstates = __is.readInt();
        },
        9, 
        false);
    Slice.defineSequence(usermanage, "OrgSeqHelper", "usermanage.Org", false);

    /**
     * 角色数据模型
     **/
    usermanage.Role = Slice.defineStruct(
        function(roleid, rolename, cstates)
        {
            this.roleid = roleid !== undefined ? roleid : 0;
            this.rolename = rolename !== undefined ? rolename : "";
            this.cstates = cstates !== undefined ? cstates : 0;
        },
        true,
        function(__os)
        {
            __os.writeLong(this.roleid);
            __os.writeString(this.rolename);
            __os.writeInt(this.cstates);
        },
        function(__is)
        {
            this.roleid = __is.readLong();
            this.rolename = __is.readString();
            this.cstates = __is.readInt();
        },
        13, 
        false);
    Slice.defineSequence(usermanage, "RoleSeqHelper", "usermanage.Role", false);

    /**
     * 角色-权限数据模型
     **/
    usermanage.RoleRes = Slice.defineStruct(
        function(role, resList)
        {
            this.role = role !== undefined ? role : new usermanage.Role();
            this.resList = resList !== undefined ? resList : null;
        },
        true,
        function(__os)
        {
            usermanage.Role.write(__os, this.role);
            usermanage.ResSeqHelper.write(__os, this.resList);
        },
        function(__is)
        {
            this.role = usermanage.Role.read(__is, this.role);
            this.resList = usermanage.ResSeqHelper.read(__is);
        },
        14, 
        false);
    Slice.defineSequence(usermanage, "RoleResSeqHelper", "usermanage.RoleRes", false);

    /**
     * 用户信息模型
     **/
    usermanage.UserInfo = Slice.defineStruct(
        function(user, resList)
        {
            this.user = user !== undefined ? user : new usermanage.User();
            this.resList = resList !== undefined ? resList : null;
        },
        true,
        function(__os)
        {
            usermanage.User.write(__os, this.user);
            usermanage.ResSeqHelper.write(__os, this.resList);
        },
        function(__is)
        {
            this.user = usermanage.User.read(__is, this.user);
            this.resList = usermanage.ResSeqHelper.read(__is);
        },
        44, 
        false);

    /**
     * 用户个人设置信息模型
     **/
    usermanage.UserSettingInfo = Slice.defineStruct(
        function(userid, hpurl, nickname, username, usertel, userpro, useraddr, userstp, useremail, useredu, usertitle, orgid, docid, docurl, doctype)
        {
            this.userid = userid !== undefined ? userid : 0;
            this.hpurl = hpurl !== undefined ? hpurl : "";
            this.nickname = nickname !== undefined ? nickname : "";
            this.username = username !== undefined ? username : "";
            this.usertel = usertel !== undefined ? usertel : "";
            this.userpro = userpro !== undefined ? userpro : "";
            this.useraddr = useraddr !== undefined ? useraddr : "";
            this.userstp = userstp !== undefined ? userstp : "";
            this.useremail = useremail !== undefined ? useremail : "";
            this.useredu = useredu !== undefined ? useredu : "";
            this.usertitle = usertitle !== undefined ? usertitle : "";
            this.orgid = orgid !== undefined ? orgid : 0;
            this.docid = docid !== undefined ? docid : "";
            this.docurl = docurl !== undefined ? docurl : "";
            this.doctype = doctype !== undefined ? doctype : "";
        },
        true,
        function(__os)
        {
            __os.writeLong(this.userid);
            __os.writeString(this.hpurl);
            __os.writeString(this.nickname);
            __os.writeString(this.username);
            __os.writeString(this.usertel);
            __os.writeString(this.userpro);
            __os.writeString(this.useraddr);
            __os.writeString(this.userstp);
            __os.writeString(this.useremail);
            __os.writeString(this.useredu);
            __os.writeString(this.usertitle);
            __os.writeInt(this.orgid);
            __os.writeString(this.docid);
            __os.writeString(this.docurl);
            __os.writeString(this.doctype);
        },
        function(__is)
        {
            this.userid = __is.readLong();
            this.hpurl = __is.readString();
            this.nickname = __is.readString();
            this.username = __is.readString();
            this.usertel = __is.readString();
            this.userpro = __is.readString();
            this.useraddr = __is.readString();
            this.userstp = __is.readString();
            this.useremail = __is.readString();
            this.useredu = __is.readString();
            this.usertitle = __is.readString();
            this.orgid = __is.readInt();
            this.docid = __is.readString();
            this.docurl = __is.readString();
            this.doctype = __is.readString();
        },
        25, 
        false);

    /**
     * 用户管理服务接口
     **/
    usermanage.UserManageService = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::usermanage::UserManageService"
        ],
        -1, undefined, undefined, false);

    usermanage.UserManageServicePrx = Slice.defineProxy(Ice.ObjectPrx, usermanage.UserManageService.ice_staticId, undefined);

    Slice.defineOperations(usermanage.UserManageService, usermanage.UserManageServicePrx,
    {
        "register": [, , , , , [cstruct.boolMessage], [[4], [7]], , , , ],
        "registerThridApi": [, , , , , [cstruct.boolMessage], [[4], [7], [7]], , , , ],
        "isNotExistUserId": [, , , , , [cstruct.boolMessage], [[4]], , , , ],
        "login": [, , , , , [usermanage.UserInfo], [[4], [7], [3]], , , , ],
        "changePasswd": [, , , , , [cstruct.boolMessage], [[4], [7], [7]], , , , ],
        "resetPasswd": [, , , , , [cstruct.boolMessage], [[4], [7]], , , , ],
        "getRoles": [, , , , , [4], [[4]], , , , ],
        "getManagerRoles": [, , , , , ["usermanage.RoleSeqHelper"], , , , , ],
        "addOrg": [, , , , , [cstruct.boolMessage], [[usermanage.Org], [3]], , , , ],
        "updateOrg": [, , , , , [cstruct.boolMessage], [[usermanage.Org]], , , , ],
        "queryOrgs": [, , , , , ["usermanage.OrgSeqHelper"], [[cstruct.Page], [7], [usermanage.Org]], [[cstruct.Page]], , , ],
        "addManager": [, , , , , [cstruct.boolMessage], [[usermanage.User]], , , , ],
        "updateManager": [, , , , , [cstruct.boolMessage], [[usermanage.User]], , , , ],
        "delManager": [, , , , , [cstruct.boolMessage], [[4]], , , , ],
        "queryManagers": [, , , , , ["usermanage.UserSeqHelper"], [[cstruct.Page], [7], [usermanage.User]], [[cstruct.Page]], , , ],
        "addRole": [, , , , , [cstruct.boolMessage], [[usermanage.RoleRes]], , , , ],
        "updateRole": [, , , , , [cstruct.boolMessage], [[usermanage.RoleRes]], , , , ],
        "delRole": [, , , , , [cstruct.boolMessage], [[4]], , , , ],
        "queryRolesAndRes": [, , , , , ["usermanage.RoleResSeqHelper"], [[cstruct.Page], [7], [usermanage.Role]], [[cstruct.Page]], , , ],
        "queryRoles": [, , , , , ["usermanage.RoleSeqHelper"], [[cstruct.Page], [7], [usermanage.Role]], [[cstruct.Page]], , , ],
        "queryResByRole": [, , , , , ["usermanage.ResSeqHelper"], [[4]], , , , ],
        "addRes": [, , , , , [cstruct.boolMessage], [[usermanage.ResCode]], , , , ],
        "queryRes": [, , , , , ["usermanage.ResSeqHelper"], [[cstruct.Page], [7], [usermanage.ResCode]], [[cstruct.Page]], , , ],
        "queryUsers": [, , , , , ["usermanage.UserSeqHelper"], [[cstruct.Page], [7], [usermanage.User]], [[cstruct.Page]], , , ],
        "gag": [, , , , , [cstruct.boolMessage], [[4], [7]], , , , ],
        "delUser": [, , , , , [cstruct.boolMessage], [[4]], , , , ],
        "queryResByUser": [, , , , , ["usermanage.ResSeqHelper"], [[4], [3]], , , , ],
        "delUsers": [, , , , , [cstruct.boolMessage], [["cstruct.longSeqHelper"]], , , , ],
        "queryResForTree": [, , , , , [7], [[usermanage.ResCode]], , , , ],
        "delRoles": [, , , , , [cstruct.boolMessage], [["cstruct.longSeqHelper"]], , , , ],
        "queryUserById": [, , , , , [usermanage.User], [[4]], , , , ],
        "updateUserSettingInfo": [, , , , , [cstruct.boolMessage], [[usermanage.UserSettingInfo]], , , , ],
        "queryUserSettingInfo": [, , , , , [usermanage.UserSettingInfo], [[4]], , , , ],
        "queryUserdetByuserid": [, , , , , [cstruct.Userdet], [[4]], , , , ],
        "queryCermatByuserid": [, , , , , [cstruct.Cermat], [[4]], , , , ]
    });
    exports.usermanage = usermanage;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : this.Ice.__require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : this));

// **********************************************************************
//
// Copyright (c) 2003-2016 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.6.3
//
// <auto-generated>
//
// Generated from file `vos.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

(function(module, require, exports)
{
    var Ice = require("ice").Ice;
    var __M = Ice.__M;
    var usermanage = require("usermanager").usermanage;
    var Slice = Ice.Slice;

    var vos = __M.module("vos");

    /**
     * 协会基本信息数据模型
     **/
    vos.Assn = Slice.defineStruct(
        function(oid, assnid, assname, assntypeid, assntype, cstates)
        {
            this.oid = oid !== undefined ? oid : 0;
            this.assnid = assnid !== undefined ? assnid : 0;
            this.assname = assname !== undefined ? assname : "";
            this.assntypeid = assntypeid !== undefined ? assntypeid : 0;
            this.assntype = assntype !== undefined ? assntype : "";
            this.cstates = cstates !== undefined ? cstates : 0;
        },
        true,
        function(__os)
        {
            __os.writeInt(this.oid);
            __os.writeLong(this.assnid);
            __os.writeString(this.assname);
            __os.writeInt(this.assntypeid);
            __os.writeString(this.assntype);
            __os.writeInt(this.cstates);
        },
        function(__is)
        {
            this.oid = __is.readInt();
            this.assnid = __is.readLong();
            this.assname = __is.readString();
            this.assntypeid = __is.readInt();
            this.assntype = __is.readString();
            this.cstates = __is.readInt();
        },
        22, 
        false);

    /**
     * 用户加入的协会
     **/
    vos.AssnApp = Slice.defineStruct(
        function(oid, assnid, assname, assntypeid, assntype, cstates, statue)
        {
            this.oid = oid !== undefined ? oid : 0;
            this.assnid = assnid !== undefined ? assnid : 0;
            this.assname = assname !== undefined ? assname : "";
            this.assntypeid = assntypeid !== undefined ? assntypeid : 0;
            this.assntype = assntype !== undefined ? assntype : "";
            this.cstates = cstates !== undefined ? cstates : 0;
            this.statue = statue !== undefined ? statue : "";
        },
        true,
        function(__os)
        {
            __os.writeInt(this.oid);
            __os.writeLong(this.assnid);
            __os.writeString(this.assname);
            __os.writeInt(this.assntypeid);
            __os.writeString(this.assntype);
            __os.writeInt(this.cstates);
            __os.writeString(this.statue);
        },
        function(__is)
        {
            this.oid = __is.readInt();
            this.assnid = __is.readLong();
            this.assname = __is.readString();
            this.assntypeid = __is.readInt();
            this.assntype = __is.readString();
            this.cstates = __is.readInt();
            this.statue = __is.readString();
        },
        23, 
        false);
    Slice.defineSequence(vos, "AssnAppSeqHelper", "vos.AssnApp", false);
    Slice.defineSequence(vos, "AssnSeqHelper", "vos.Assn", false);

    vos.AssnPage = Slice.defineStruct(
        function(objs, page)
        {
            this.objs = objs !== undefined ? objs : null;
            this.page = page !== undefined ? page : new cstruct.Page();
        },
        true,
        function(__os)
        {
            vos.AssnSeqHelper.write(__os, this.objs);
            cstruct.Page.write(__os, this.page);
        },
        function(__is)
        {
            this.objs = vos.AssnSeqHelper.read(__is);
            this.page = cstruct.Page.read(__is, this.page);
        },
        17, 
        false);

    /**
     * 用户扩展协会信息数据模型
     **/
    vos.AssnUser = Slice.defineStruct(
        function(oid, userid, assn0, assn1, assn2, assn3, assn4, assnm0, assnm1, assnm2, assnm3, assnm4, cstates)
        {
            this.oid = oid !== undefined ? oid : 0;
            this.userid = userid !== undefined ? userid : 0;
            this.assn0 = assn0 !== undefined ? assn0 : 0;
            this.assn1 = assn1 !== undefined ? assn1 : 0;
            this.assn2 = assn2 !== undefined ? assn2 : 0;
            this.assn3 = assn3 !== undefined ? assn3 : 0;
            this.assn4 = assn4 !== undefined ? assn4 : 0;
            this.assnm0 = assnm0 !== undefined ? assnm0 : 0;
            this.assnm1 = assnm1 !== undefined ? assnm1 : 0;
            this.assnm2 = assnm2 !== undefined ? assnm2 : 0;
            this.assnm3 = assnm3 !== undefined ? assnm3 : 0;
            this.assnm4 = assnm4 !== undefined ? assnm4 : 0;
            this.cstates = cstates !== undefined ? cstates : 0;
        },
        true,
        function(__os)
        {
            __os.writeInt(this.oid);
            __os.writeLong(this.userid);
            __os.writeLong(this.assn0);
            __os.writeLong(this.assn1);
            __os.writeLong(this.assn2);
            __os.writeLong(this.assn3);
            __os.writeLong(this.assn4);
            __os.writeLong(this.assnm0);
            __os.writeLong(this.assnm1);
            __os.writeLong(this.assnm2);
            __os.writeLong(this.assnm3);
            __os.writeLong(this.assnm4);
            __os.writeInt(this.cstates);
        },
        function(__is)
        {
            this.oid = __is.readInt();
            this.userid = __is.readLong();
            this.assn0 = __is.readLong();
            this.assn1 = __is.readLong();
            this.assn2 = __is.readLong();
            this.assn3 = __is.readLong();
            this.assn4 = __is.readLong();
            this.assnm0 = __is.readLong();
            this.assnm1 = __is.readLong();
            this.assnm2 = __is.readLong();
            this.assnm3 = __is.readLong();
            this.assnm4 = __is.readLong();
            this.cstates = __is.readInt();
        },
        96, 
        true);

    /**
     * 志愿活动信息数据模型
     **/
    vos.VosActivity = Slice.defineStruct(
        function(actid, actitle, actcon, imgurl, supeo, supeoApplay, spowner, assnoid, spodate, spotime, audpeo, audes, audate, audtime, cstates)
        {
            this.actid = actid !== undefined ? actid : 0;
            this.actitle = actitle !== undefined ? actitle : "";
            this.actcon = actcon !== undefined ? actcon : "";
            this.imgurl = imgurl !== undefined ? imgurl : "";
            this.supeo = supeo !== undefined ? supeo : 0;
            this.supeoApplay = supeoApplay !== undefined ? supeoApplay : 0;
            this.spowner = spowner !== undefined ? spowner : 0;
            this.assnoid = assnoid !== undefined ? assnoid : 0;
            this.spodate = spodate !== undefined ? spodate : "";
            this.spotime = spotime !== undefined ? spotime : "";
            this.audpeo = audpeo !== undefined ? audpeo : 0;
            this.audes = audes !== undefined ? audes : "";
            this.audate = audate !== undefined ? audate : "";
            this.audtime = audtime !== undefined ? audtime : "";
            this.cstates = cstates !== undefined ? cstates : 0;
        },
        true,
        function(__os)
        {
            __os.writeInt(this.actid);
            __os.writeString(this.actitle);
            __os.writeString(this.actcon);
            __os.writeString(this.imgurl);
            __os.writeInt(this.supeo);
            __os.writeInt(this.supeoApplay);
            __os.writeLong(this.spowner);
            __os.writeInt(this.assnoid);
            __os.writeString(this.spodate);
            __os.writeString(this.spotime);
            __os.writeLong(this.audpeo);
            __os.writeString(this.audes);
            __os.writeString(this.audate);
            __os.writeString(this.audtime);
            __os.writeInt(this.cstates);
        },
        function(__is)
        {
            this.actid = __is.readInt();
            this.actitle = __is.readString();
            this.actcon = __is.readString();
            this.imgurl = __is.readString();
            this.supeo = __is.readInt();
            this.supeoApplay = __is.readInt();
            this.spowner = __is.readLong();
            this.assnoid = __is.readInt();
            this.spodate = __is.readString();
            this.spotime = __is.readString();
            this.audpeo = __is.readLong();
            this.audes = __is.readString();
            this.audate = __is.readString();
            this.audtime = __is.readString();
            this.cstates = __is.readInt();
        },
        44, 
        false);
    Slice.defineSequence(vos, "VosActivitySeqHelper", "vos.VosActivity", false);

    /**
     * 志愿活动报名信息数据模型
     **/
    vos.VosActsup = Slice.defineStruct(
        function(oid, actid, userid, supdate, suptime, cstates)
        {
            this.oid = oid !== undefined ? oid : 0;
            this.actid = actid !== undefined ? actid : 0;
            this.userid = userid !== undefined ? userid : 0;
            this.supdate = supdate !== undefined ? supdate : "";
            this.suptime = suptime !== undefined ? suptime : "";
            this.cstates = cstates !== undefined ? cstates : 0;
        },
        true,
        function(__os)
        {
            __os.writeInt(this.oid);
            __os.writeInt(this.actid);
            __os.writeLong(this.userid);
            __os.writeString(this.supdate);
            __os.writeString(this.suptime);
            __os.writeInt(this.cstates);
        },
        function(__is)
        {
            this.oid = __is.readInt();
            this.actid = __is.readInt();
            this.userid = __is.readLong();
            this.supdate = __is.readString();
            this.suptime = __is.readString();
            this.cstates = __is.readInt();
        },
        22, 
        false);
    Slice.defineSequence(vos, "VosActsupSeqHelper", "vos.VosActsup", false);

    /**
     * 活动直播信息数据模型
     **/
    vos.VosActlive = Slice.defineStruct(
        function(aclid, actid, userid, livedate, livetime, tcon, cstates)
        {
            this.aclid = aclid !== undefined ? aclid : 0;
            this.actid = actid !== undefined ? actid : 0;
            this.userid = userid !== undefined ? userid : 0;
            this.livedate = livedate !== undefined ? livedate : "";
            this.livetime = livetime !== undefined ? livetime : "";
            this.tcon = tcon !== undefined ? tcon : "";
            this.cstates = cstates !== undefined ? cstates : 0;
        },
        true,
        function(__os)
        {
            __os.writeInt(this.aclid);
            __os.writeInt(this.actid);
            __os.writeLong(this.userid);
            __os.writeString(this.livedate);
            __os.writeString(this.livetime);
            __os.writeString(this.tcon);
            __os.writeInt(this.cstates);
        },
        function(__is)
        {
            this.aclid = __is.readInt();
            this.actid = __is.readInt();
            this.userid = __is.readLong();
            this.livedate = __is.readString();
            this.livetime = __is.readString();
            this.tcon = __is.readString();
            this.cstates = __is.readInt();
        },
        23, 
        false);
    Slice.defineSequence(vos, "VosActliveSeqHelper", "vos.VosActlive", false);

    /**
     * 活动直播素材信息集合模型
     **/
    vos.VosActlivemat = Slice.defineStruct(
        function(oid, aclid, maturl, cstates, cstateType)
        {
            this.oid = oid !== undefined ? oid : 0;
            this.aclid = aclid !== undefined ? aclid : 0;
            this.maturl = maturl !== undefined ? maturl : "";
            this.cstates = cstates !== undefined ? cstates : 0;
            this.cstateType = cstateType !== undefined ? cstateType : 0;
        },
        true,
        function(__os)
        {
            __os.writeInt(this.oid);
            __os.writeInt(this.aclid);
            __os.writeString(this.maturl);
            __os.writeInt(this.cstates);
            __os.writeInt(this.cstateType);
        },
        function(__is)
        {
            this.oid = __is.readInt();
            this.aclid = __is.readInt();
            this.maturl = __is.readString();
            this.cstates = __is.readInt();
            this.cstateType = __is.readInt();
        },
        17, 
        false);
    Slice.defineSequence(vos, "VosActlivematSeqHelper", "vos.VosActlivemat", false);

    /**
     * 志愿者信息数据模型
     **/
    vos.Voser = Slice.defineStruct(
        function(userid, nikename, actsuptimes, isManager)
        {
            this.userid = userid !== undefined ? userid : 0;
            this.nikename = nikename !== undefined ? nikename : "";
            this.actsuptimes = actsuptimes !== undefined ? actsuptimes : 0;
            this.isManager = isManager !== undefined ? isManager : 0;
        },
        true,
        function(__os)
        {
            __os.writeLong(this.userid);
            __os.writeString(this.nikename);
            __os.writeInt(this.actsuptimes);
            __os.writeInt(this.isManager);
        },
        function(__is)
        {
            this.userid = __is.readLong();
            this.nikename = __is.readString();
            this.actsuptimes = __is.readInt();
            this.isManager = __is.readInt();
        },
        17, 
        false);
    Slice.defineSequence(vos, "VoserSeqHelper", "vos.Voser", false);

    /**
     * 待审核认证或已审核认证的志愿者信息数据模型
     **/
    vos.VosApplyInfo = Slice.defineStruct(
        function(oid, userid, username, cerid, cerName, audate, audtime, audpeo, audpeoName, cstates, audes, shStates)
        {
            this.oid = oid !== undefined ? oid : 0;
            this.userid = userid !== undefined ? userid : 0;
            this.username = username !== undefined ? username : "";
            this.cerid = cerid !== undefined ? cerid : 0;
            this.cerName = cerName !== undefined ? cerName : "";
            this.audate = audate !== undefined ? audate : "";
            this.audtime = audtime !== undefined ? audtime : "";
            this.audpeo = audpeo !== undefined ? audpeo : 0;
            this.audpeoName = audpeoName !== undefined ? audpeoName : "";
            this.cstates = cstates !== undefined ? cstates : 0;
            this.audes = audes !== undefined ? audes : "";
            this.shStates = shStates !== undefined ? shStates : 0;
        },
        true,
        function(__os)
        {
            __os.writeInt(this.oid);
            __os.writeLong(this.userid);
            __os.writeString(this.username);
            __os.writeLong(this.cerid);
            __os.writeString(this.cerName);
            __os.writeString(this.audate);
            __os.writeString(this.audtime);
            __os.writeLong(this.audpeo);
            __os.writeString(this.audpeoName);
            __os.writeInt(this.cstates);
            __os.writeString(this.audes);
            __os.writeInt(this.shStates);
        },
        function(__is)
        {
            this.oid = __is.readInt();
            this.userid = __is.readLong();
            this.username = __is.readString();
            this.cerid = __is.readLong();
            this.cerName = __is.readString();
            this.audate = __is.readString();
            this.audtime = __is.readString();
            this.audpeo = __is.readLong();
            this.audpeoName = __is.readString();
            this.cstates = __is.readInt();
            this.audes = __is.readString();
            this.shStates = __is.readInt();
        },
        42, 
        false);
    Slice.defineSequence(vos, "VosApplyInfoSeqHelper", "vos.VosApplyInfo", false);

    /**
     * 青少年志愿服务接口
     **/
    vos.VosService = Slice.defineObject(
        undefined,
        Ice.Object, undefined, 1,
        [
            "::Ice::Object",
            "::vos::VosService"
        ],
        -1, undefined, undefined, false);

    vos.VosServicePrx = Slice.defineProxy(Ice.ObjectPrx, vos.VosService.ice_staticId, undefined);

    Slice.defineOperations(vos.VosService, vos.VosServicePrx,
    {
        "addAssn": [, , , , , [cstruct.boolMessage], [[vos.Assn], ["cstruct.longSeqHelper"]], , , , ],
        "updateAssn": [, , , , , [cstruct.boolMessage], [[vos.Assn], ["cstruct.longSeqHelper"]], , , , ],
        "delAssns": [, , , , , [cstruct.boolMessage], [["cstruct.intSeqHelper"]], , , , ],
        "queryAssns": [, , , , , ["vos.AssnSeqHelper"], [[cstruct.Page], [7], [vos.Assn]], [[cstruct.Page]], , , ],
        "queryManagerByAssn": [, , , , , ["usermanage.UserSeqHelper"], [[cstruct.Page], [7], [4], [3]], [[cstruct.Page]], , , ],
        "addAssnManager": [, , , , , [cstruct.boolMessage], [[4], [4], [3]], , , , ],
        "delAssnManager": [, , , , , [cstruct.boolMessage], [[4], [4], [3]], , , , ],
        "applyToVol": [, , , , , [cstruct.boolMessage], [[cstruct.Cermat], [3]], , , , ],
        "queryApplyToVos": [, , , , , ["vos.VosApplyInfoSeqHelper"], [[cstruct.Page], [7], [3], [4]], [[cstruct.Page]], , , ],
        "volAud": [, , , , , [cstruct.boolMessage], [[3], [cstruct.Ceraud]], , , , ],
        "addVosActivity": [, , , , , [cstruct.boolMessage], [[3], [vos.VosActivity]], , , , ],
        "updateVosActivity": [, , , , , [cstruct.boolMessage], [[3], [vos.VosActivity]], , , , ],
        "delVosActivitys": [, , , , , [cstruct.boolMessage], [["cstruct.intSeqHelper"]], , , , ],
        "actAud": [, , , , , [cstruct.boolMessage], [[4], [7], [3], [3]], , , , ],
        "queryActs": [, , , , , ["vos.VosActivitySeqHelper"], [[cstruct.Page], [7], [3], [vos.VosActivity]], [[cstruct.Page]], , , ],
        "addVosActsup": [, , , , , [cstruct.boolMessage], [[vos.VosActsup]], , , , ],
        "queryActsups": [, , , , , ["vos.VosActsupSeqHelper"], [[cstruct.Page], [7], [3]], [[cstruct.Page]], , , ],
        "addVosActlive": [, , , , , [cstruct.boolMessage], [[vos.VosActlive]], , , , ],
        "queryVosActlivesByActid": [, , , , , ["vos.VosActliveSeqHelper"], [[cstruct.Page], [7], [3]], [[cstruct.Page]], , , ],
        "addVosActlivemat": [, , , , , [cstruct.boolMessage], [[vos.VosActlivemat]], , , , ],
        "queryVosActlivemats": [, , , , , ["vos.VosActlivematSeqHelper"], [[cstruct.Page], [7], [3]], [[cstruct.Page]], , , ],
        "queryVoser": [, , , , , ["vos.VoserSeqHelper"], [[cstruct.Page], [7], [3]], [[cstruct.Page]], , , ],
        "delVosers": [, , , , , [cstruct.boolMessage], [["cstruct.longSeqHelper"], [3]], , , , ],
        "queryAssnsByUserid": [, , , , , ["vos.AssnAppSeqHelper"], [[4]], , , , ],
        "isManger": [, , , , , [1], [[4], [3]], , , , ],
        "queryMyActs": [, , , , , ["vos.VosActivitySeqHelper"], [[cstruct.Page], [7], [4]], [[cstruct.Page]], , , ],
        "addVosActivityLive": [, , , , , [cstruct.boolMessage], [[vos.VosActlive], ["vos.VosActlivematSeqHelper"]], , , , ]
    });
    exports.vos = vos;
}
(typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? module : undefined,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? require : this.Ice.__require,
 typeof(global) !== "undefined" && typeof(global.process) !== "undefined" ? exports : this));

var app = {
    // Application Constructor
    initialize: function() {
        document.addEventListener('deviceready', this.onDeviceReady.bind(this), false);
    },

    // deviceready Event Handler
    //
    // Bind any cordova events here. Common events are:
    // 'pause', 'resume', etc.
    onDeviceReady: function() {
        this.receivedEvent('deviceready');
    },

    // Update DOM on a Received Event
    receivedEvent: function(id) {
        var parentElement = document.getElementById(id);
        var listeningElement = parentElement.querySelector('.listening');
        var receivedElement = parentElement.querySelector('.received');

        listeningElement.setAttribute('style', 'display:none;');
        receivedElement.setAttribute('style', 'display:block;');

        console.log('Received Event: ' + id);
    }
};

app.initialize();


var App = angular.module('starter.controllers', ['angular-md5','ionic-citypicker',"ionic"]);
App.filter('arrayFilter', function() {
    return function(value,items,propVal,propText) {
        if(items && angular.isArray(items)){
            var len = items.length;
            if(len>0){
                for(var i=0;i<len;i++){
                    var item = items[i];
                    if(item[propVal] == value){
                        return item[propText]
                    }
                }
            }
        }
    };
});

App.run(["$rootScope",function($rootScope){
    $rootScope.address={};//用来储存后台返回的地址;
    $rootScope.post=[];//岗位数据大表
    $rootScope.positionList={};//职位全局变量，用来保存后台返回的所有职位
    $rootScope.resumeDetails={};//我的简历编时的全局变量，用来保存我的简历编辑时页面跳转的值
    $rootScope.recruitMsg={};//招聘信息的全局变量
    $rootScope.userMessing={};//用户信息变量，用来判断是否登录以及权限控制时所需
    $rootScope.personalSetting={};//保存个人设置信息的全局变量
    //$rootScope.userMessing.username="xxx";
    //$rootScope.userMessing.userid=13777776666;
    $rootScope.sex=[
        {text:"男",value:2},
        {text:"女",value:1}
    ]
    var Org=new usermanage.Org();//查询地址
    $rootScope.orgId={};//城市选择时需要用到的数据储存
    $rootScope.orgId[86]={};
    ice_init.request(usermanage,'UserManageService','UserManageServicePrx','queryOrgs',[null,"",Org],function(resp){//希望工程查询
        $rootScope.$apply(function(){
            if(resp){
                $rootScope.address=resp[0];
                var city={};
                var addressLength=$rootScope.address.length;
                for(var i=0;i<addressLength;i++){
                    if($rootScope.address[i].orgid<100&&$rootScope.address[i].orgid>0){
                        city[86]=$rootScope.address[i];
                        $rootScope.orgId[86][$rootScope.address[i].orgid]=$rootScope.address[i].orgname;
                        city[10]={};
                        $rootScope.orgId[10]={};
                    }
                }
                for(var r=0;r<addressLength;r++){
                    if($rootScope.address[r].orgid>=100&&$rootScope.address[r].orgid<=9999){
                        city[10][$rootScope.address[r].orgid]=$rootScope.address[r];
                        $rootScope.orgId[10][$rootScope.address[r].orgid]=$rootScope.address[r].orgname;
                        city[$rootScope.address[r].orgid]={};
                        $rootScope.orgId[$rootScope.address[r].orgid]={};
                    }
                }
                for(var c=0;c<addressLength;c++){
                    for(var j in city[10]){
                        if(city[10][j].orgid==parseInt($rootScope.address[c].orgid/100)){
                            city[city[10][j].orgid][$rootScope.address[c].orgid]=$rootScope.address[c];
                            $rootScope.orgId[city[10][j].orgid][$rootScope.address[c].orgid]=$rootScope.address[c].orgname;
                        }
                    }
                }
            }else{

            }
        })
    });

}])
App.filter("timeFormat",function(){
    return function(input) {
        var result;
        var chosenDate=new Date(input);
        var curDate=new Date();
        var chosenDateTime=chosenDate.getTime();
        var curDateTime=curDate.getTime();
        var interval=curDateTime-chosenDateTime;

        var yyyy=chosenDate.getFullYear();
        var MM=chosenDate.getMonth()+1;
        var dd=chosenDate.getDate();

        if(interval<24*60*60*1000 && chosenDate.getDate()==curDate.getDate()){
            if(interval<=0){
                result="现在";
            }else if(interval>0&&interval<60*60*1000){
                result=Math.floor(interval/(60*1000))+"分钟前";
            }else if(interval>=60*60*1000 && interval<24*60*60*1000){
                result=Math.floor(interval/(60*60*1000))+"小时前";
            }
        }else{
            result=yyyy+"-"+ MM+"-"+dd;
        }


        return result;
    }
})
//大段文字格式化
App.directive("contentFormat",function(){
    return {
        restrict    : 'A',
        template    :'<p class="row">{{new_input}}</p>'
                      +'<div class="text-center calm"  ng-if="viewall" ng-click="viewAll($event)"><span>{{show_tip}}</span><i class="{{class}}"></i></div>',
        scope       : {
            contentformatsrc:'@'
        },
        link : function(scope,element,attris){
            //console.log("contentformatsrc:",scope.contentformatsrc);
            var num;
            console.log("attris.contentFormat",attris.contentFormat);
            if(attris.contentFormat != '' && attris.contentFormat != "content-format"){
                num=Number(attris.contentFormat);
                if(!angular.isNumber(num)){
                    num=40;
                }
            }else{
                num=40;
            }
            scope.show_tip="展开全文";
            scope.class="icon ion-ios-arrow-down";
            var show_flag=false;
            var content_vice=scope.contentformatsrc

            var new_input='';
            if(content_vice.length>num){
                new_input=content_vice.substring(0,num)+"...";
                //return new_input;
                scope.viewall=true;
                scope.show_tip="展开全文";
                scope.class="icon ion-ios-arrow-down";
                scope.new_input=new_input;
            }
            else{
                //return input
                scope.new_input=scope.contentformatsrc;
                scope.viewall=false;
            }

            scope.viewAll=function(e){
                if(!show_flag){
                    scope.new_input=scope.contentformatsrc;
                    scope.show_tip="收起全文";
                    scope.class="icon ion-ios-arrow-up";
                }else{
                    scope.new_input=new_input;
                    scope.show_tip="查看全文";
                    scope.class="icon ion-ios-arrow-down";
                }
                show_flag=!show_flag;
            }
        }
    };
});
App.directive('hmsPctSelect', function () {//选择地址
    var TAG = 'hmsPCTSelectDirective';
    return {
        restrict: 'EA',
        scope: {
            default: '=defaultdata',
            selectedAddress:"="
        },
        replace: true,
        transclude: true,
        template: '<div class="col" style="font-size: 14px;" ng-click="toSetDefaultPosition();">' +
        '{{selectedAddress.province+selectedAddress.city+selectedAddress.town}}' +
        '</div>',
        controller: ["$scope", "$element", "$attrs", "$ionicModal", "$http", "$ionicSlideBoxDelegate", "$timeout", "$rootScope", "$ionicScrollDelegate", function ($scope, $element, $attrs, $ionicModal, $http, $ionicSlideBoxDelegate, $timeout, $rootScope, $ionicScrollDelegate) {
            var selectedAddress = {};
            var addressData;
            this.$onInit = function () {
                selectedAddress = {};
                $scope.selectedAddress = !!$scope.selectedAddress? $scope.selectedAddress:{};


                // $http.get('http://runjs.cn/uploads/rs/41/r7zpvbql/Area_Datas_v2.json').success(function (res) {//调取城市选择器的接口获取城市数据
                //     addressData = res;
                //     $scope.provincesData = addressData['86'];
                // }).error(function (err) {
                //     console.log('area_datas err = ' + angular.toJson(err));
                // });

                addressData = $rootScope.orgId;
                $scope.provincesData = addressData['86'];


                $ionicModal.fromTemplateUrl('templates/popUp/addressPop.html', {
                    scope: $scope,
                    animation: 'slide-in-up'
                }).then(function (modal) {
                    $scope.PCTModal = modal;
                })
            };

            $scope.lockSlide = function () {
                $ionicSlideBoxDelegate.$getByHandle('PCTSelectDelegate').enableSlide(false);
            };

            $scope.$watch('default', function (newValue) {
                if (newValue) {
                    $scope.selectedAddress = newValue;
                }
            });

            $scope.toSetDefaultPosition = function () {
                $scope.showBackBtn = false;
                $ionicSlideBoxDelegate.$getByHandle('PCTSelectDelegate').slide(0);
                $ionicScrollDelegate.$getByHandle('PCTSelectProvince').scrollTop();
                $scope.PCTModal.show();
            };

            //选择省
            $scope.chooseProvince = function (selectedProvince) {
                var selectedProvinceIndex;

                angular.forEach($scope.provincesData, function (item, index) {
                    if (item === selectedProvince) {
                        selectedProvinceIndex = index;
                        return;
                    }
                });


                selectedAddress = {};
                $scope.showBackBtn = true;
                $scope.citiesData = addressData['' + selectedProvinceIndex + ''];


                $ionicSlideBoxDelegate.$getByHandle('PCTSelectDelegate').next();
                $ionicSlideBoxDelegate.$getByHandle('PCTSelectDelegate').update();
                $ionicScrollDelegate.$getByHandle('PCTSelectCity').scrollTop();
                selectedAddress.province = selectedProvince;
            };

            //选择市
            $scope.chooseCity = function (selectedCity) {
                var selectedCityIndex;

                angular.forEach($scope.citiesData, function (item, index) {
                    if (item === selectedCity) {
                        selectedCityIndex = index;
                        return;
                    }
                });

                $scope.townData = addressData['' + selectedCityIndex + ''];

                selectedAddress.city = selectedCity;
                if (!$scope.townData) {
                    selectedAddress.town = '';
                    $scope.selectedAddress = selectedAddress;

                    $rootScope.$broadcast('PCTSELECT_SUCCESS', {result: $scope.selectedAddress});

                    $timeout(function () {
                        $scope.PCTModal.hide();
                    }, 200);
                }else{
                    $ionicSlideBoxDelegate.$getByHandle('PCTSelectDelegate').next();
                    $ionicSlideBoxDelegate.$getByHandle('PCTSelectDelegate').update();
                    $ionicScrollDelegate.$getByHandle('PCTSelectTown').scrollTop();
                }
            };

            //选择县
            $scope.chooseTown = function (selectedTown) {
                selectedAddress.town = selectedTown;
                $scope.selectedAddress = selectedAddress;
                console.log("$scope.selectedAddress",$scope.selectedAddress);

                $rootScope.$broadcast('PCTSELECT_SUCCESS', {result: $scope.selectedAddress});

                $timeout(function () {
                    $scope.PCTModal.hide();
                }, 200);
            };

            //slide返回上一级
            $scope.goBackSlide = function () {
                var currentIndex = $ionicSlideBoxDelegate.$getByHandle('PCTSelectDelegate').currentIndex();
                if (currentIndex > 0) {
                    $ionicSlideBoxDelegate.$getByHandle('PCTSelectDelegate').previous();
                }
                if (currentIndex === 1) {
                    $scope.showBackBtn = false;
                }
            };

            $scope.$on('$destroy', function () {
                $scope.PCTModal.remove();
            });
        }]
    };
})
App.provider('publicMethod', function() {
    this.$get = ["$rootScope", "$ionicPopup", "$state", "$location", "$anchorScroll", "$filter", "$http", "$ionicModal", function($rootScope,$ionicPopup,$state,$location,$anchorScroll,$filter,$http,$ionicModal) {
        var result = {};

        result.judgeLogin=function(toDo,callback){
            console.log("......");
            if(!$rootScope.userMessing){
                var myPop=$ionicPopup.show({
                    title:"提示",
                    template:'<p class="text-center">'+toDo+"必须登录后才能使用,<br />是否现在立即登录?</p>",
                    buttons:[
                        {text:"取消",type:"button-small qy-cancel-button qy-mr0",
                            onTap:function(){}
                        },
                        {text:"确定",type:"button-small qy-determine-button",
                            onTap:function(){
                                $state.go("login");
                            }
                        }
                    ]
                })

            }
        }
        result.initModal=function($scope){
            $ionicModal.fromTemplateUrl("templates/popUp/subMenu.html",{
                scope:$scope
            }).then(function(modal){
                $scope.modal=modal;
                return modal;
            });

        };
        result.createTime=function(date,time){
            if(angular.isString(date)&&angular.isString(time)){
                return date+" "+time;
            }else{
                return "";
            }

        };
        result.checkShare=function(){
            $rootScope.sinaWeibo=false;
            $rootScope.qq=false;
            $rootScope.wechat=false;
            /** 是否安装微博客户端 **/
            sharesdk.isInstallClient.promise(ShareSDK.ClientType.SinaWeibo).then(function(isInstall){
                if(isInstall) {
                    $rootScope.sinaWeibo=true;
                }else {
                    $rootScope.sinaWeibo=false;
                }
            });
            /** 是否安装QQ客户端 **/
            sharesdk.isInstallClient.promise(ShareSDK.ClientType.QQ).then(function(isInstall){
                if(isInstall) {
                    $rootScope.qq=true;
                }else {
                    $rootScope.qq=false;
                }
            });
            /** 是否安装微信客户端 **/
            sharesdk.isInstallClient.promise(ShareSDK.ClientType.Wechat).then(function(isInstall){
                if(isInstall) {
                    $rootScope.wechat=true;
                }else {
                    $rootScope.wechat=false;
                }
            });
        }
        /** 分享网页 */
        result.shareWebPage=function(platformType) {
            var icon = 'https://raw.githubusercontent.com/zhaolin0801/cordova-sharesdk-demo/master/www/img/Wechat-QRcode.jpeg';
            var title = '这是网页的标题';
            var text = '这是网页的内容，android未签名只能分享单张图片到朋友圈';
            var url = 'http://carhot.cn/articles/1';
            var shareInfo = {icon:icon, title:title, text:text, url:url};
            sharesdk.share(platformType, ShareSDK.ShareType.WebPage, shareInfo, result.success, result.fail);
        }
        result.shareText = function(platformType) {
            var text='这是一条测试文本~~~~';
            var shareInfo = {text:text};
            sharesdk.share(platformType, ShareSDK.ShareType.Text, shareInfo,  result.success, result.fail);
        }
        result.shareImage = function(platformType) {
            var image = 'https://raw.githubusercontent.com/zhaolin0801/cordova-sharesdk-demo/master/www/img/Wechat-QRcode.jpeg';
            var shareInfo = {image:image};
            sharesdk.share(platformType, ShareSDK.ShareType.Image, shareInfo,  result.success, result.fail);
        }
        result.shareSuccess=function(){
            console.log("share success");
        }
        result.shareFail=function(){
            console.log("share fail");
        }
        result.shareFail=function(){}
        result.shareToSinaWeibo=function($event){
            $event.stopPropagation();
            console.log("shareToSinaWeibo");
            result.shareWebPage(ShareSDK.PlatformType.SinaWeibo);
        }
        result.shareToQQFriend=function($event){
            $event.stopPropagation();
            result.shareWebPage(ShareSDK.PlatformType.QQFriend);
        }
        result.shareToQzone=function($event){
            $event.stopPropagation();
            result.shareWebPage(ShareSDK.PlatformType.QZone);
        }
        result.shareToWechatSession=function($event){
            $event.stopPropagation();
            //result.shareWebPage(ShareSDK.PlatformType.WechatSession);
            result.shareText(ShareSDK.PlatformType.WechatSession);
        }
        result.shareToWechatTimeline=function($event){
            $event.stopPropagation();
           // result.shareWebPage(ShareSDK.PlatformType.WechatTimeline);
            result.shareImage(ShareSDK.PlatformType.WechatTimeline);
        }


        result.openShare=function($scope){

            //result.checkShare();
            console.log("open.....");
            $ionicModal.fromTemplateUrl("templates/popUp/share.html",{
                scope:$scope
            }).then(function(modal){
                $scope.modal=modal;
                return modal;
            });
        }
        return result;
    }]
});


//$scope.queryEmaconAndReplys();
// Ionic Starter App

// angular.module is a global place for creating, registering and retrieving Angular modules
// 'starter' is the name of this angular module example (also set in a <body> attribute in index.html)
// the 2nd parameter is an array of 'requires'
// 'starter.services' is found in services.js
// 'starter.controllers' is found in controllers.js
var starter = angular.module('starter', ['ionic', 'starter.controllers', 'starter.services']);
starter.run(["$ionicPlatform", function($ionicPlatform) {
        $ionicPlatform.ready(function() {
            // Hide the accessory bar by default (remove this to show the accessory bar above the keyboard
            // for form inputs)
            if (window.cordova && window.cordova.plugins && window.cordova.plugins.Keyboard) {
                cordova.plugins.Keyboard.hideKeyboardAccessoryBar(true);
                cordova.plugins.Keyboard.disableScroll(true);

            }
            if (window.StatusBar) {
                // org.apache.cordova.statusbar required
                StatusBar.styleDefault();
            }
        });
    }])

    .config(["$stateProvider", "$urlRouterProvider", "$ionicConfigProvider", function($stateProvider, $urlRouterProvider,$ionicConfigProvider) {
        //配置安卓机型选项卡在底部显示
        $ionicConfigProvider.platform.ios.tabs.style('standard');
        $ionicConfigProvider.platform.ios.tabs.position('bottom');
        $ionicConfigProvider.platform.android.tabs.style('standard');
        $ionicConfigProvider.platform.android.tabs.position('standard');

        $ionicConfigProvider.platform.ios.navBar.alignTitle('center');
        $ionicConfigProvider.platform.android.navBar.alignTitle('left');

        $ionicConfigProvider.platform.ios.backButton.previousTitleText('').icon('ion-ios-arrow-thin-left');
        $ionicConfigProvider.platform.android.backButton.previousTitleText('').icon('ion-android-arrow-back');

        $ionicConfigProvider.platform.ios.views.transition('ios');
        $ionicConfigProvider.platform.android.views.transition('android');
        // Ionic uses AngularUI Router which uses the concept of states
        // Learn more here: https://github.com/angular-ui/ui-router
        // Set up the various states which the app can be in.
        // Each state's controller can be found in controllers.js
        $stateProvider

            // setup an abstract state for the tabs directive
            .state('tab', {
                url: '/tab',
                abstract: true,
                templateUrl: 'templates/tabs.html',
                cache:false
            })

            // Each tab has its own nav history stack:

            .state('tab.news', {
                url: '/news',
                views: {
                    'tab-news': {
                        templateUrl: 'templates/news/information.html',
                        controller: 'NewsCtrl'
                    }
                },
                cache:false
            })
            .state('newsList', {
                url: '/newsList',
                params:{id:null,obj:{}},
                templateUrl: 'templates/news/newsDetail.html',
                controller: 'newsDetailCtrl',
                cache:false
            })
            .state('tab.hopeProject', {
                url: '/hopeProject',
                views: {
                    'tab-hopeProject': {
                        templateUrl: 'templates/hopeProject/hopeProject.html',
                        controller: 'HopeProjectCtrl'
                    }
                },
                cache:false
            })
            .state('help', {
                url: '/help',
                params:{id:null,type:null,obj:{}},
                templateUrl: 'templates/hopeProject/help.html',
                controller: 'HelpCtrl',
                cache:false
            })
            .state('helpPeople', {
                url: '/helpPeople/:hppid/:onpeo',
                templateUrl: 'templates/hopeProject/helpPeople.html',
                controller: 'HelpPeopleCtrl',
                cache:false
            })
            .state('seekHelp', {
                url: '/seekHelp/:id',
                templateUrl: 'templates/hopeProject/seekHelp.html',
                controller: 'SeekHelpCtrl',
                cache:false
            })
            .state('seekHelpEdit', {
                url: '/seekHelpEdit',
                templateUrl: 'templates/hopeProject/seekHelpEdit.html',
                controller: 'SeekHelpEditCtrl',
                cache:false
            })
            .state('donation', {
                url: '/donation',
                templateUrl: 'templates/hopeProject/donation.html',
                controller: 'DonationCtrl',
                cache:false
            })
            .state('tab.chat-detail', {
                url: '/chats/:chatId',
                views: {
                    'tab-chats': {
                        templateUrl: 'templates/chat-detail.html',
                        controller: 'ChatDetailCtrl'
                    }
                },
                cache:false
            })
            .state('tab.recruitMessing', {
                url: '/recruitMessing',
                views: {
                    'tab-recruitMessing': {
                        templateUrl: 'templates/employment/recruitMessing.html',
                        controller: 'RecruitMessingCtrl'
                    }
                },
                cache:false
            })
            .state('jobDetails', {
                url: '/jobDetails',
                params:{oid:null,type:null,obj:{}},
                templateUrl: 'templates/employment/jobDetails.html',
                controller: 'jobDetailsCtrl',
                cache:false

            })
            .state('myResume', {
                url: '/myResume',
                templateUrl: 'templates/employment/myResume.html',
                controller: 'myResumeCtrl',
            })
            .state('resumeName', {
                url: '/resumeName',
                templateUrl: 'templates/employment/resumeName.html',
                controller: 'resumeNameCtrl',
                cache:false
            })
            .state('essentialMes', {
                url: '/essentialMes',
                templateUrl: 'templates/employment/essentialMes.html',
                controller: 'essentialMesCtrl',
                cache:false
            })
            .state('jobIntention', {
                url: '/jobIntention',
                templateUrl: 'templates/employment/jobIntention.html',
                controller: 'jobIntentionCtrl',
                cache:false
            })
            .state('education', {
                url: '/education',
                templateUrl: 'templates/employment/education.html',
                controller: 'educationCtrl',
                cache:false
            })
            .state('educationEdit', {
                url: '/educationEdit',
                templateUrl: 'templates/employment/educationEdit.html',
                controller: 'educationEditCtrl',
                cache:false
            })
            .state('jobHistory', {
                url: '/jobHistory',
                templateUrl: 'templates/employment/jobHistory.html',
                controller: 'jobHistoryCtrl',
                cache:false
            })
            .state('jobHistoryEdit', {
                url: '/jobHistoryEdit',
                templateUrl: 'templates/employment/jobHistoryEdit.html',
                controller: 'jobHistoryEditCtrl'
            })
            .state('jobSkill', {
                url: '/jobSkill/:title',
                templateUrl: 'templates/employment/jobSkill.html',
                controller: 'jobSkillCtrl',
                cache:false
            })
            .state('resumeMarket', {
                url: '/resumeMarket',
                templateUrl: 'templates/employment/resumeMarket.html',
                controller: 'resumeMarketCtrl',
                cache:false
            })
            .state('resumePreview', {
                url: '/resumePreview',
                params:{userid:null,type:null,jsbSjob:null},
                templateUrl: 'templates/employment/resumePreview.html',
                controller: 'resumePreviewCtrl',
                cache:false
            })
            .state('myResPre', {
                url: '/myResPre',
                templateUrl: 'templates/employment/myResPre.html',
                controller: 'myResPreCtrl',
                cache:false
            })
            .state('apply', {
                url: '/apply',
                templateUrl: 'templates/employment/apply.html',
                controller: 'applyCtrl',
                cache:false
            })
            .state('entrepreneurship', {
                url: '/entrepreneurship',
                templateUrl: 'templates/employment/entrepreneurship.html',
                controller: 'entrepreneurshipCtrl',
                cache:false
            })
            .state('entrepreneurshipDetails', {
                url: '/entrepreneurshipDetails',
                templateUrl: 'templates/employment/entrepreneurshipDetails.html',
                //controller: 'entrepreneurshipDetailsCtrl',
                cache:false
            })
            .state('postSelect', {
                url: '/postSelect/:type',
                templateUrl: 'templates/employment/postSelect.html',
                controller: 'postSelectCtrl',
                cache:false
            })
            .state('myRelease', {
                url: '/myRelease',
                templateUrl: 'templates/employment/myRelease.html',
                controller: 'myReleaseCtrl',
                cache:false
            })
            .state('positionEdit', {
                url: '/positionEdit/:oid',
                templateUrl: 'templates/employment/positionEdit.html',
                controller: 'positionEditCtrl',
                cache:false
            })
            .state('fromApply', {
                url: '/fromApply/:oid',
                templateUrl: 'templates/employment/fromApply.html',
                controller: 'fromApplyCtrl',
                cache:false
            })
            .state('login',{
                url:'/login',
                templateUrl:'templates/user/login.html',
                controller:'LoginCtrl',
                cache:false
            })
            .state('register',{
                url:'/register',
                templateUrl:'templates/user/register.html',
                controller:'RegisterCtrl',
                cache:false
            })
            .state('resetPwd',{
                url:'/resetPwd',
                templateUrl:'templates/user/resetPwd.html',
                controller:'ResetPwdCtrl',
                cache:false
            })
            .state('authentication',{
                url:'/authentication',
                templateUrl:'templates/user/authentication.html',
                controller:'AuthenticationCtrl',
                cache:false
            })
            .state('tab.expert',{
                url:'/expert',
                views: {
                    'rights': {
                        templateUrl:'templates/rights/expertsList.html',
                        controller:'ExpertsListCtrl'
                    }
                },
                cache:false
            })
            .state('expertDetail',{
                url:'/expert/:id',
                templateUrl:'templates/rights/expertDetail.html',
                controller:'ExpertDetailCtrl'
            })
            .state('consultationInfo',{
                url:'/consultationInfo',

                templateUrl:'templates/rights/consultationInfo.html',
                controller:'ConsultationInfoCtrl',
                cache:false

            })
            .state('consultationInfoDetail',{
                url:'/consultationInfoDetail/:id',
                templateUrl:'templates/rights/consultationInfoDetail.html',
                controller:'consultationInfoDetailCtrl'

            })
            .state('myConsultation',{
                url:'/myConsultation',
                templateUrl:'templates/rights/myConsultation.html',
                controller:'MyConsultationCtrl',
                cache:false

            })
            .state('myConsultationDetail',{
                url:'/myConsultationDetail',
                templateUrl:'templates/rights/myConsultationDetail.html',
                controller:'MyConsultationDetailCtrl'

            })
            .state('reply',{
                url:'/reply',
                templateUrl:'templates/rights/reply.html',
                controller:'ReplyCtrl',
                cache:false

            })

            .state('tab.volunteerNews',{
                url:'/volunteerNews',
                views: {
                    'volunteer': {
                        templateUrl:'templates/volunteer/volunteerNews.html',
                        controller:'VolunteerNewsCtrl'
                    }
                }
            })
            .state('activityhistory',{
                url:'/activityhistory',
                templateUrl:'templates/volunteer/activityhistory.html',
                controller:'ActivityhistoryCtrl'

            })
            .state('volunteerAuth',{
                url:'/volunteerAuth',
                templateUrl:'templates/volunteer/volunteerAuth.html',
                controller:'VolunteerAuthCtrl'

            })
            .state('activityManagement',{
                url:'/activityManagement',
                templateUrl:'templates/volunteer/activityManagement.html',
                controller:'ActivityManagementCtrl'

            })
            .state('liveManagement',{
                url:'/liveManagement',
                params:{obj:{}},
                templateUrl:'templates/volunteer/liveManagement.html',
                controller:'LiveManagementCtrl'

            })
            .state('volunteerManagement',{
                url:'/volunteerManagement',
                templateUrl:'templates/volunteer/volunteerManagement.html',
                controller:'VolunteerManagementCtrl'

            })
            .state('assnManagement',{
                url:'/assnManagement',
                templateUrl:'templates/volunteer/assnManagement.html',
                controller:'AssnManagementCtrl'

            })
            .state('activityDetails',{
                url:'/activityDetails/:id/:type',
                templateUrl:'templates/volunteer/activityDetails.html',
                controller:'ActivityDetailCtrl'
            })
            .state('memberAudit',{
                url:'/memberAudit ',
                templateUrl:'templates/volunteer/memberAudit.html',
                controller:'MemberAuditCtrl'
            })
            .state('createActivity',{
                url:'/createActivity/:id',
                templateUrl:'templates/volunteer/createActivity.html',
                controller:'CreateActivityCtrl'
            })
            .state('writeApplications',{
                url:'/writeApplications',
                templateUrl:'templates/volunteer/writeApplications.html',
                controller:'writeApplicationCtrl'
            })
            .state('createLive',{
                url:'/createLive',
                templateUrl:'templates/volunteer/createLive.html',
                controller:'createLiveCtrl'
            })
            .state('memberDetails',{
                url:'/memberDetails',
                templateUrl:'templates/volunteer/memberDetails.html',
                controller:'MemberDetailsCtrl'
            })
            .state('enterprise',{
                url:'/enterprise',
                templateUrl:'templates/user/enterprise.html',
                controller:'EnterpriseCtrl'
            })
            .state('volunteer',{
                url:'/volunteer',
                templateUrl:'templates/user/volunteer.html',
                controller:'VolunteerCtrl'
            })
            .state('expert',{
                url:'/expert',
                templateUrl:'templates/user/expert.html',
                controller:'ExpertCtrl'
            })
            .state('setUp',{
                url:'/setUp',
                templateUrl:'templates/user/setUp.html',
                controller:'SetUpCtrl'
            })
            .state('personalDetail',{
                url:'/personalDetail',
                templateUrl:'templates/user/personalDetail.html',
                controller:'personalDetailCtrl'
            })
            .state('modifyPwd',{
                url:'/modifyPwd',
                templateUrl:'templates/user/modifyPwd.html',
                controller:'modifyPwdCtrl'
            });

        // if none of the above states are matched, use this as the fallback
        $urlRouterProvider.otherwise('/tab/news');

    }]);

/**
 * Created by Administrator on 2017/2/8.23323111212...,,,000
 */
    App.controller('ChatDetailCtrl', ["$scope", "$stateParams", "Chats", function($scope, $stateParams, Chats) {
        $scope.chat = Chats.get($stateParams.chatId);
    }])

    .controller('AccountCtrl', ["$scope", function($scope) {
        $scope.settings = {
            enableFriends: true
        };
    }])
    .controller('SidebarCtrl',["$scope","$state","$rootScope",function($scope,$state,$rootScope){
        $scope.out=function(){
            delete $rootScope.userMessing;
        }
    }]);
angular.module('starter.services', [])

    .factory('Chats', function() {
        // Might use a resource here that returns a JSON array

        // Some fake testing data
        var chats = [{
            id: 0,
            name: 'Ben Sparrow',
            lastText: 'You on your way?',
            face: 'img/ben.png'
        }, {
            id: 1,
            name: 'Max Lynx',
            lastText: 'Hey, it\'s me',
            face: 'img/max.png'
        }, {
            id: 2,
            name: 'Adam Bradleyson',
            lastText: 'I should buy a boat',
            face: 'img/adam.jpg'
        }, {
            id: 3,
            name: 'Perry Governor',
            lastText: 'Look at my mukluks!',
            face: 'img/perry.png'
        }, {
            id: 4,
            name: 'Mike Harrington',
            lastText: 'This is wicked good ice cream.',
            face: 'img/mike.png'
        }];

        return {
            all: function() {
                return chats;
            },
            remove: function(chat) {
                chats.splice(chats.indexOf(chat), 1);
            },
            get: function(chatId) {
                for (var i = 0; i < chats.length; i++) {
                    if (chats[i].id === parseInt(chatId)) {
                        return chats[i];
                    }
                }
                return null;
            }
        };
    });

/**
 * Created by ywkj sunersheng on 2017/3/27.
 */
/**=========================================================
 * Module: plupload.js
 * *
 =========================================================*/
App.controller('woPluploadCtrl',['$scope', '$element', '$attrs', '$transclude',"$rootScope","$timeout",
function($scope,$element,$attrs,$transclude,$rootScope,$timeout){
    $scope.uploaderInfo = {
        support: false,     //默认browser have Flash, Silverlight or HTML5 support
        files:[],      //已增加的文件
        error:'',      //上传错误信息
        file:{}      //当前上传的文件对象
    };  //文件上传过程中，在回调函数中接收一些信息用来刷新UI

    $scope.uploader = new plupload.Uploader({
        runtimes: 'html5,flash,silverlight,html4',
        browse_button: 'pickfiles',/// you can pass an id...
        container: document.getElementById('container'), // ... or DOM Element itself
        url: SERVER_PLUPLOAD + '/servlet/upload',
        flash_swf_url: '../js/Moxie.swf',
        silverlight_xap_url: '../js/Moxie.xap',
        headers: $scope.hearders || {},
        filters: {
            max_file_size: '10mb',
            mime_types: [
                //{title: "Image/jpg,Image/gif,Image/png,Image/jpeg", extensions: "jpg,gif,png,jpeg"},  //// {title: "Image files", extensions: "jpg,gif,png,jpeg"}
                //{title: "Image files", extensions: "jpg,gif,png,jpeg"}
                // {title: "application/zip", extensions: "zip"}   // {title: "Zip files", extensions: "zip"}
            ]
        },

        init: {
                PostInit: function () {
                $scope.$apply(function () {
                    $scope.uploaderInfo.support = true;
                });
            },

            FilesAdded: function (up, files) {
                $scope.$apply(function () {
                    // var _files = files.filter(function(file,index,arr){
                    //     file.locUrl = window.URL.createObjectURL(file);
                    //     return file;
                    // });
                    $scope.uploaderInfo.files = files;
                    console.log("$scope.uploaderInfo",$scope.uploaderInfo.files);
                    console.log("$scope.uploaderInfo————————",up);
                    console.log("$scope.uploaderInfo————————",files);
                });
            },

            UploadProgress: function (up, file) {
                $scope.$apply(function () {
                    $scope.uploaderInfo.file = file;
                    console.log("$scope.uploaderInfo————————11111",up);
                    console.log("$scope.uploaderInfo————————11111",file);
                });
            },

            Error: function (up, err) {
                $scope.$apply(function () {
                    $scope.uploaderInfo.error = err.message;
                    console.log("$scope.uploaderInfo————————2222222",up);
                    console.log("$scope.uploaderInfo.error————————2222222",err);
                });
            }
        }
    });
    $scope.startUploader = function(){
        $scope.uploader.start();
    };

}]);

App.directive('woPlupload', [function() {
    return {
        restrict: 'EA',
        template:
        "<div>"+
            "<div id=\"filelist\">\n"+
                "<span ng-hide =\"uploaderInfo.support\">Your browser doesn\'t have Flash, Silverlight or HTML5 support.</span>\n"+
                "<ul ng-repeat=\"file in uploaderInfo.files\">\n"+
                    "<li>{{ file.name + plupload.formatSize(file.size) }}\n"+
                    "<span>{{ file.percent + '%' }}</span>\n "+
                    "</li>\n"+
                "</ul>\n"+
                "<br />\n"+
            "</div>\n"+
            "<div id=\"container\" class = \"buttons\">\n"+
                "<a id =\"pickfiles\" href=\"javascript:;\" style='border:2px dashed #ddd;width:50px;height:50px;display:inline-block;padding:4px 0px 0px 8px;color:#ddd;font-size:40px;' class='icon ion-plus'></a>\n"+
                "<button id=\"uploadfiles\" class = \"button button button-positive button-full\" type=\"button\" ng-click=\"startUploader();\"  value='上传文件'>上传文件</button>\n"+
                "<br />"+
                "<pre id=\"console\"></pre>\n"+
            "</div>\n"+
        "</div>",
            // '<nav class="sidebar" ng-transclude></nav>',
        controller:'woPluploadCtrl',
        controllerAs:'woPlupload',
        plain:true,
        replace: true,
        // transclude: true,
        scope:{
            hearders: '=reqHeaders'
        },
        link: function(scope, element, attrs,ctrl) {
            var $scope   = scope;
            // //在http头部传递参数；例如$scope.headers = {type: 'c', id: $rootScope.userMessing.userid + '12'};
            // $scope.uploader.settings.headers = $scope.hearders || {};
            // console.log("link  $scope.uploader:",$scope.uploader);
            $scope.uploader.init();  //初始化上传组件；

        }
    };
}]);
App.controller('DonationCtrl', ["$scope","$state","$ionicModal","$rootScope","publicMethod","$timeout",function($scope,$state,$ionicModal,$rootScope,publicMethod,$timeout) {
    $scope.publicMethod=publicMethod;
    $scope.crux={};
    /*打开二级菜单模态框的方法-start*/
    $scope.subMenuList=[
        {text:"希望工程",sref:"tab.hopeProject"},
        {text:"我的求助",sref:"seekHelp"},
        {text:"我的捐助",sref:"donation"}
    ]
    $scope.publicMethod.initModal($scope);
    $scope.showSubMenu=function(){
        $scope.modal.show();
    }
    //查询我的捐助信息
    ice_init.request(hpp,'HppService','HppServicePrx','queryAmount',[2,numberToLong($rootScope.userMessing.userid)],function(resp){
        $scope.$apply(function(){
            if(resp){
                $scope.total=angular.copy(resp);
                console.log("我的捐助总金额___________",$scope.total);
            }else{

            }
        })
    });
    //查询我的捐助详情列表
    // $scope.queryOff=function(){
    //
    // }
    var page=new cstruct.Page(10,1);
    $scope.donationList=[];
    var timer=null
    $scope.getData=function(){
        ice_init.request(hpp,'HppService','HppServicePrx','queryOffInfo',[page,"",numberToLong($rootScope.userMessing.userid)],function(resp){
            $scope.$apply(function(){
                if(resp){
                    $scope.donationList=$scope.donationList.concat(resp[0]);
                    page.pageIndex++;
                    console.log("我的捐助详情列表___________",$scope.donationList);
                    $scope.totalPageCount=resp[1].totalPageCount;
                    timer = $timeout(function () {
                        $scope.$broadcast('scroll.infiniteScrollComplete');
                        $scope.couldLoadMore=true;
                    }, 1500);
                }else{

                }
            })
        });
    }
    $scope.getData();
    $scope.couldLoadMore=true;
    $scope.doRefresh= function () {
        console.log("doRefresh");
        $scope.donationList=[];
        page.pageIndex=1;
        $scope.getData();
    }

    $scope.loadMore=function(){
        //获得能取的最大页数
        var totalCount=(!!$scope.totalPageCount&&$scope.totalPageCount<5?$scope.totalPageCount:5);
        if(page.pageIndex>totalCount){
            $scope.couldLoadMore=false;
            return false;
        }
        console.log("loadMore");
        //一次取数据未完成前，不能进行下一次取数据
        $scope.couldLoadMore=false;
        $scope.getData();

    }
    $scope.$on("$destroy", function () {
        //clearTimeout(timer.$$timeoutId);
        $timeout.cancel(timer);
        //清除配置,不然scroll会重复请求
    });

}])

App.controller('HelpCtrl', ["$scope","$state","$stateParams","$ionicModal","$cacheFactory","$rootScope","$ionicPopup","$timeout",function($scope,$state,$stateParams,$ionicModal,$cacheFactory,$rootScope,$ionicPopup,$timeout) {
    $scope.helpType = $stateParams.type;//1代表为希望工程页面跳转过来的,2代表为我的求助跳转过来的
    $scope.helpList=$stateParams.obj;
    console.log("helpList__________",$scope.helpList);
   //把后台获取的地址，转换为汉字的地址
    var orgId=$scope.helpList.orgid;
    var address="";
    var num=0;
    var countyNum=0;
    var streetNum=0;
    var orgIdString=orgId.toString();
    angular.forEach($rootScope.address,function(data,index,array){
        if(orgId>0&&orgId<100){
            if(orgId==data.orgid){
                address=data.orgname;
            }
        }
        if(orgId>=100&&orgId<10000){
            num=orgIdString.substring(0,2);
            countyNum=orgIdString.substring(0,4);
            if(data.orgid==parseInt(num)){
                address = data.orgname;
            }
            if(data.orgid==parseInt(countyNum)){
                address+=  data.orgname;
            }
        }
        if(orgId>10000){
            num=orgIdString.substring(0,2);
            countyNum=orgIdString.substring(0,4);
            streetNum=orgIdString.substring(0,6);
            if(data.orgid==parseInt(num)){
                address = data.orgname;
            }
            if(data.orgid==parseInt(countyNum)){
                address+=  data.orgname;
            }
            if(data.orgid==parseInt(streetNum)){
                address+=data.orgname;
            }
        }
    })
    $scope.helpList.address=address;
    //调转到帮助页面
    $scope.openHelp=function(id){
        $state.go("helpPeople",{hppid:id,onpeo:$scope.helpList.hppowner.toNumber()})
    };
    //点击图片放大功能
    $ionicModal.fromTemplateUrl('bigImg.html',{
        scope:$scope
    }).then(function(modal){
        $scope.imgModal=modal;
    });
    $scope.showBigImg=function(url){
        console.log("modal----------------------",$scope.imgModal);
        console.log("图片路径----------",url);
        $scope.imgUrl=url;
        $scope.bigImg=true;
        $scope.imgModal.show();
    }
    $scope.hideImg=function(){
        $scope.imgModal.hide();
    }
    //查询捐助信息详情
    $scope.seeDonation=function(){
        var HppFunds=new hpp.HppFunds();
        HppFunds.hppid=$scope.helpList.hppid;
        //HppFunds.onpeo=$scope.helpList.hppowner;
        ice_init.request(hpp,'HppService','HppServicePrx','queryHppFunds',[null,"",1,HppFunds],function(resp){
            $scope.$apply(function(){
                if(resp){
                    $scope.donationMes=angular.copy(resp[0]);
                }else{
                }
            })
        });
    }
    $scope.seeDonation()
    //查询评论信息
    $scope.seeMessage=function(){
        ice_init.request(hpp,'HppService','HppServicePrx','queryHppReplys',[null,"",$scope.helpList.hppid],function(resp){
            $scope.$apply(function(){
                console.log()
                if(resp){
                    $scope.fundraising=angular.copy(resp[0]);
                }else{

                }
            })
        });
    }
    //计算时间函数
    $scope.computingTime=function(date,time){
        var nowTime=new Date();//获取系统当前时间
        var oldTime=[];
        oldTime.push(date);
        oldTime.push(time);
        oldTime=oldTime.join(" ");
        oldTime=new Date(oldTime).getTime();//把时间转换成毫秒数
        nowTime=nowTime.getTime();
        var differenceVlu=nowTime-oldTime;
        if(differenceVlu<=0){
            return "刚刚";
        }else{
            if(differenceVlu<3600000){
                return parseInt(differenceVlu/60000)+"钟前"
            }else{
                if(parseInt(differenceVlu/3600000)<12){
                    return parseInt(differenceVlu/3600000)+"小时前"
                }else{
                    return date+time;
                }

            }
        }
    }
    //评论消息功能
    $scope.comment=function(){
        if($rootScope.userMessing.userid){
            var HppReply=new hpp.HppReply();
            HppReply.hppid=$scope.helpList.hppid;
            HppReply.relpeo=numberToLong($rootScope.userMessing.userid);
            HppReply.relcon=$scope.message;
            var paramsArray=[];
            paramsArray.push(HppReply);
            ice_init.request(hpp,'HppService','HppServicePrx','addHppReply',paramsArray,function(resp){
                $scope.$apply(function(){
                    if(resp.flag){
                        var myPop=$ionicPopup.show({
                            title:"提示",
                            subtitle:"发表留言成功",
                            template: '<i class="icon ion-checkmark-circled qy-hook"></i>'
                        })
                        myPop.then(function(res) {
                            console.log('Tapped!', res);
                        });
                        $timeout(function(){
                            $scope.show=true;
                            myPop.close();
                        },3000)
                    }else{

                    }
                })
            });
        }
    }
    //点击编辑留言时，判断是否登录
    $scope.judgeLogin=function(){
        if(!$rootScope.userMessing){
            var myPop=$ionicPopup.show({
                title:"提示",
                subtitle:"留言功能必须登录后才能使用",
                template:"是否现在立即登录",
                buttons:[
                    {text:"取消",type:"button-small qy-cancel-button qy-mr0"},
                    {text:"确定",type:"button-small qy-determine-button",
                        onTap:function(){
                            $state.go("login");
                        }
                    }
                ]
            })
        }
    }

}])

App.controller('HelpPeopleCtrl', ["$scope","$state","$ionicPopup","$stateParams","$rootScope","$timeout","$ionicHistory",function($scope,$state,$ionicPopup,$stateParams,$rootScope,$timeout,$ionicHistory) {
    $scope.donationList={};
    $scope.contribution=1;
    $scope.payment=1;
    $scope.loginPop=function(){
        if($scope.contribution==1){
            $scope.donation();
        }else if($scope.contribution==2){
            if(!$rootScope.userMessing){
                var loginPop=$ionicPopup.show({
                    title:"提示",
                    //subTitle:"实名捐助需要登录账号,",
                    template:"实名捐助需要登录账号,是否立即登录？",
                    scope:$scope,
                    buttons:[
                        {text:"取消",type:"button-small"},
                        {text:"确定",type:"button-small",
                            onTap:function(){
                                console.log("用户登录");
                            }
                        }
                    ]
                });
                loginPop.then(function(){

                })
            }else{
                $scope.donation();
            }

        }
    }
    console.log("求助人__________",$stateParams.onpeo);
    //捐助功能
    $scope.donation=function(){
        console.log("amount_________",$scope.donationList.amount);
        var HppFunds=new hpp.HppFunds();
        HppFunds.hppid=$stateParams.hppid;
        if($rootScope.userMessing){HppFunds.offpeo=numberToLong($rootScope.userMessing.userid)};
        HppFunds.onpeo=numberToLong($stateParams.onpeo);
        HppFunds.amount=$scope.donationList.amount*100;
        var paramsArray=[];
        paramsArray.push(HppFunds);
        console.log("传输的数据____________",paramsArray);
        ice_init.request(hpp,'HppService','HppServicePrx','addHppFunds',paramsArray,function(resp){
            $scope.$apply(function(){
                if(resp){
                    console.log("返回数据_________",resp);
                    var myPop=$ionicPopup.show({
                        template: '<i class="icon ion-checkmark-circled qy-hook"></i>',
                        title:"提示",
                        subTitle:"捐助成功"
                    })
                    myPop.then(function(res) {
                        console.log('Tapped!', res);
                    });
                    $timeout(function(){
                        myPop.close();
                        $ionicHistory.goBack();
                    },3000)
                }else{

                }
            })
        });
    }
}])

App.controller('HopeProjectCtrl', ["$scope","$state","$ionicModal","$rootScope","$cacheFactory","publicMethod","$timeout",function($scope,$state,$ionicModal,$rootScope,$cacheFactory,publicMethod,$timeout) {
    $scope.publicMethod=publicMethod;
    $scope.crux={};
    /*打开二级菜单模态框的方法-start*/
    $scope.subMenuList=[
        {text:"希望工程",sref:"tab.hopeProject"},
        {text:"我的求助",sref:"seekHelp"},
        {text:"我的捐助",sref:"donation"}
    ]
    $scope.publicMethod.initModal($scope);
    $scope.showSubMenu=function(){
        $scope.modal.show();
    }
    //查询希望工程的数据
    var page = new cstruct.Page(10,1);
    var hppInfo=new hpp.HppInfo();
    var timer=null;
    $scope.hopes=[];
    $scope.queryHope=function(){

        if($scope.crux.key){
            hppInfo.hpptitle=$scope.crux.key;
        }
        ice_init.request(hpp,'HppService','HppServicePrx','queryHpps',[page,"",2,hppInfo],function(resp){//希望工程查询
            $scope.$apply(function(){
                console.log("返回数据________________",resp)
                if(resp.flag){

                }else{
                    $scope.hopes=$scope.hopes.concat(resp[0]);
                    page.pageIndex++;
                    $scope.totalPageCount=resp[1].totalPageCount;
                    timer = $timeout(function () {
                        $scope.$broadcast('scroll.infiniteScrollComplete');
                        $scope.couldLoadMore=true;
                    }, 1500);
                }
            })
        });
    }
    $scope.queryHope();
    $scope.couldLoadMore=true;
    $scope.doRefresh= function () {
        console.log("doRefresh");
        $scope.hopes=[];
        page.pageIndex=1;
        $scope.queryHope();
    }

    $scope.loadMore=function(){
        //获得能取的最大页数
        var totalCount=(!!$scope.totalPageCount&&$scope.totalPageCount<5?$scope.totalPageCount:5);
        if(page.pageIndex>totalCount){
            $scope.couldLoadMore=false;
            return false;
        }
        console.log("loadMore");
        //一次取数据未完成前，不能进行下一次取数据
        $scope.couldLoadMore=false;
        $scope.queryHope();

    }
    $scope.$on("$destroy", function () {
        //clearTimeout(timer.$$timeoutId);
        $timeout.cancel(timer);
        //清除配置,不然scroll会重复请求
    });
    $scope.openList=function(item){
        $state.go("help",{id:item.hppid,type:1,obj:item})
    }
    $ionicModal.fromTemplateUrl("templates/popUp/subMenu.html",{
        scope:$scope
    }).then(function(modal){
        $rootScope.modal=modal;
    });
    // $scope.windowOpen=function(text){
    //     var url=document.location.href;
    //     console.log("________________",text);
    //     console.log("________________",url);
    //     if(text=="hopeProject"){//判断当text为hopeProject时需要的跳转方式
    //         $state.go("tab."+text)
    //     }else{
    //         $state.go(text);
    //     }
    // }
}])

App.controller('SeekHelpCtrl', ["$scope","$state","$ionicModal","$rootScope","$cacheFactory","publicMethod","$timeout","$ionicPopup",
    function($scope,$state,$ionicModal,$rootScope,$cacheFactory,publicMethod,$timeout,$ionicPopup) {
    $scope.publicMethod=publicMethod;
    $scope.crux={};
    /*打开二级菜单模态框的方法-start*/
    $scope.subMenuList=[
        {text:"希望工程",sref:"tab.hopeProject"},
        {text:"我的求助",sref:"seekHelp"},
        {text:"我的捐助",sref:"donation"}
    ]
    $scope.publicMethod.initModal($scope);
    $scope.showSubMenu=function(){
        $scope.modal.show();
    }
    //我的求助信息查询
    var hppInfo=new hpp.HppInfo();
    var page = new cstruct.Page(10,1);
    var timer=null;
    $scope.hopes=[];
    $scope.querySeek=function(){

        hppInfo.hppowner=numberToLong($rootScope.userMessing.userid);
        if($scope.crux.key){
            hppInfo.hpptitle=$scope.crux.key;
        }
        ice_init.request(hpp,'HppService','HppServicePrx','queryHpps',[page,"",1,hppInfo],function(resp){
            $scope.$apply(function(){
                if(resp.flag){

                }else{
                    $scope.hopes=$scope.hopes.concat(resp[0]);
                    page.pageIndex++;
                    $scope.totalPageCount=resp[1].totalPageCount;
                    timer = $timeout(function () {
                        $scope.$broadcast('scroll.infiniteScrollComplete');
                        $scope.couldLoadMore=true;
                    }, 1500);
                }
            })
        });
    }
    $scope.querySeek();
    $scope.couldLoadMore=true;
    $scope.doRefresh= function () {
        console.log("doRefresh");
        $scope.hopes=[];
        page.pageIndex=1;
        $scope.querySeek();
    }

    $scope.loadMore=function(){
        //获得能取的最大页数
        var totalCount=(!!$scope.totalPageCount&&$scope.totalPageCount<5?$scope.totalPageCount:5);
        if(page.pageIndex>totalCount){
            $scope.couldLoadMore=false;
            return false;
        }
        console.log("loadMore");
        //一次取数据未完成前，不能进行下一次取数据
        $scope.couldLoadMore=false;
        $scope.querySeek();

    }
    $scope.$on("$destroy", function () {
        //clearTimeout(timer.$$timeoutId);
        $timeout.cancel(timer);
        //清除配置,不然scroll会重复请求
    });
    //根据状态的不同，返回不同颜色的值
    $scope.color=function(item){
        if(item==4){return '#1ebe29';}
        if(item==1||item==2){return '#11c1f3';}
        if(item==3){return '#ffa423';}
    }
    $scope.openSeekHelpEdit=function(){
        if(!$rootScope.personalSetting){
            var noSetting=$ionicPopup.show({
                title:"提示",
                subTitle:"编写求助信息需完善个人设置",
                template:"<p>是否现在完善个人设置</p>",
                buttons:[
                    {   text:"取消",
                        type:"button-small button-cancel button-set-radius"
                    },{ text:"确定",
                        type:"button-small button-cancel button-set-radius",
                        onTap:function(){
                            $state.go("personalDetail");
                        }
                    }
                ]
            })
            noSetting.then(function(res){
                console.log("Tapped!",res);
            })
            $timeout(function(){
                noSetting.close()
            },3000)
        }else{
            $state.go("seekHelpEdit")
        }
    }
    $scope.openList=function(item){
        $state.go("help",{id:item.hppid,type:2,obj:item})
    }
}])

App.controller('SeekHelpEditCtrl', ["$scope","$state","$ionicModal","$rootScope","$ionicPopup","$timeout",function($scope,$state,$ionicModal,$rootScope,$ionicPopup,$timeout) {
    $scope.help={};
    //查询用户的信息
    ice_init.request(hpp,'HppService','HppServicePrx','queryHppUserdet',[numberToLong($rootScope.userMessing.userid)],function(resp){
        $scope.$apply(function(){
            if(resp.flag){
                console.log("返回数据________________1",resp);
            }else{
                $scope.userQuery=angular.copy(resp);
                $scope.help.docid=$scope.userQuery.docid;
                $scope.help.userName=$scope.userQuery.username;
                $scope.help.phone=$scope.userQuery.usertel;
                console.log("返回数据________________2",resp);
            }
        })
    });
    //通过所选值找到json对象对应的值
    $scope.returnKey=function(text){
        for(var key in $rootScope.orgId){
            for(var x in $rootScope.orgId[key]){
                if($rootScope.orgId[key][x]==text.town){
                    $scope.help.orgid=parseInt(x);
                }
            }
        }

    }
    $scope.successPop=function(){//新增用户求助信息
        $scope.returnKey($scope.help.selectedAddress);
        if($scope.help){
            if($rootScope.userMessing){
                var HppInfo=new hpp.HppInfo();
                var cermat=new cstruct.Cermat();
                var userDet=new cstruct.Userdet();
                HppInfo.hppowner=numberToLong($rootScope.userMessing.userid);
                HppInfo.hppownerName=$scope.help.userName;
                HppInfo.hpptitle=$scope.help.hpptitle;
                HppInfo.hppcon=$scope.help.hppcon;
                cermat.userid=numberToLong($rootScope.userMessing.userid);
                cermat.docid=$scope.help.docid;
                cermat.oid=$scope.userQuery.cermatid;
                userDet.oid=$scope.userQuery.userdetid;
                userDet.username=$scope.help.userName;
                userDet.useraddr=$scope.help.orgid;
                userDet.userid=numberToLong($rootScope.userMessing.userid);
                var params=[];
                params.push(2);
                params.push(HppInfo);
                params.push(cermat);
                params.push(userDet);
                params.push($scope.userQuery.orgid);
                console.log("传入数据___________",params);
                ice_init.request(hpp,'HppService','HppServicePrx','addHpp',params,function(resp){//增加我的求助
                    $scope.$apply(function(){
                        console.log("返回数据________________",resp)
                        if(!resp.flag){
                            console.log("返回数据________________",resp)
                        }else{
                            $scope.hopes=resp;
                            var myPopup = $ionicPopup.show({
                                template: '<i class="icon ion-ios-checkmark qy-hook"></i>',
                                title: '提示',
                                subTitle: '求助申请已提交，请等待审核',
                                scope: $scope
                            });
                            myPopup.then(function(res) {
                                console.log('Tapped!', res);
                            });
                            $timeout(function(){
                                myPopup.close();
                                $state.go("seekHelp");
                            },3000);

                        }
                    })
                });
            }else{
                var myPop=$ionicPopup.show({
                    template:"是否现在登录",
                    title:"提示",
                    subTitle:"申请求助需要登录",
                    buttons:[
                        {text:"取消",type:"button-small"},
                        {text:"确定",type:"button-small",
                            onTap:function(){
                                $state.go("login");
                            }
                        },
                    ]
                })
            }
        }else{
            return false;
        }
    }
    //手机号验证
    $scope.phoneRquired=function(){
        var reg=/^(((13[0-9]{1})|(14[0-9]{1})|(17[0]{1})|(15[0-3]{1})|(15[5-9]{1})|(18[0-9]{1}))+\d{8})$/;
        if($scope.help.phone&&!reg.test($scope.help.phone)){
            var errorPop=$ionicPopup.show({
                //template:'<i class="icon ion-close-circled qy-error"></i>',
                title:'提示',
                subTitle:'手机号码输入有误，请重新输入'
            })
            $timeout(function(){errorPop.close();$scope.help.phone="";},3000)
        }
    }
    //身份证号验证
    $scope.idRquired=function(){
        var reg=/^[1-9]{1}[0-9]{14}$|^[1-9]{1}[0-9]{16}([0-9]|[xX])$/;
        if($scope.help.docid&&!reg.test($scope.help.docid)){
            var errorPop=$ionicPopup.show({
                template:'<i class="icon ion-close-circled qy-error"></i>',
                title:'提示',
                subTitle:'身份证号码输入有误，请重新输入'
            })
            $timeout(function(){errorPop.close();$scope.help.docid="";},3000)
        }
    }
    $scope.help.selectedAddress={province:"庆阳市"}

}])

App.controller('NewsCtrl', ["$scope","$cacheFactory","$timeout","$state",function($scope,$cacheFactory,$timeout,$state) {
    $scope.crux={};
    //查询咨询信息
    var ttlInfo=new ttl.TtlInfo();
    var page=new cstruct.Page(10,1);
    var timer=null;
    $scope.news=[];
    $scope.queryNews=function(){
        console.log("ttlInfo__________",ttlInfo);
        if($scope.crux.key){
            ttlInfo.ttltitle=$scope.crux.key;
        }
        ice_init.request(ttl,'TtlService','TtlServicePrx','queryTtls',[page,"",2,ttlInfo],function(resp){
            $scope.$apply(function(){
                console.log("咨询返回的数据________",resp);
                if(resp){
                    $scope.news=$scope.news.concat(resp[0]);
                    page.pageIndex++;
                    timer = $timeout(function () {
                        $scope.$broadcast('scroll.infiniteScrollComplete');
                        $scope.couldLoadMore=true;
                    }, 1500);
                }else{

                }
            })
        });
    }
    $scope.queryNews();
    $scope.couldLoadMore=true;
    $scope.doRefresh= function () {
        console.log("doRefresh");
        $scope.news=[];
        page.pageIndex=1;
        $scope.queryNews();
    }
    $scope.loadMore=function(){
        //获得能取的最大页数
        var totalCount=(!!$scope.totalPageCount&&$scope.totalPageCount<5?$scope.totalPageCount:5);
        if(page.pageIndex>totalCount){
            $scope.couldLoadMore=false;
            return false;
        }
        console.log("loadMore");
        //一次取数据未完成前，不能进行下一次取数据
        $scope.couldLoadMore=false;
        $scope.queryNews();
    }
    $scope.$on("$destroy", function () {
        //clearTimeout(timer.$$timeoutId);
        $timeout.cancel(timer);
        //清除配置,不然scroll会重复请求
    });
    //
    $scope.goList=function(item){
        $state.go('newsList',{id:item.ttlid,obj:item})
    }
}])

App.controller("newsDetailCtrl",["$scope","$stateParams","$sce","publicMethod","$ionicModal",function($scope,$stateParams,$sce,publicMethod,$ionicModal){
    $scope.publicMethod=publicMethod;
    $scope.publicMethod.openShare($scope);
    /* $ionicModal.fromTemplateUrl("templates/popUp/share.html",{
     scope:$scope
     }).then(function(modal){
     $scope.modal=modal;

     return modal;
     });*/
    $scope.test=function(){
        $scope.publicMethod.checkShare();
        $scope.modal.show();
    }
    var id=$stateParams.id;
    var obj=$scope.news=$stateParams.obj;
    ice_init.request(ttl,'TtlService','TtlServicePrx','queryTtlCon',[id],function(resp){
        $scope.$apply(function(){
            console.log("咨询返回的内容数据________",resp);
            if(resp){
                $scope.newsContent=resp;
                $scope.newsContent.ttlcon= $sce.trustAsHtml($scope.newsContent.ttlcon);
            }else{

            }
        })
    });
    console.log("news________________",$scope.news);
    console.log("id_______________",$stateParams.id);
}])

/**
 * Created by Administrator on 2017/3/7.
 */
App.controller('ConsultationInfoCtrl', ["$scope","$state","$stateParams","$ionicModal","$rootScope","publicMethod","$timeout",
    function($scope,$state,$stateParams,$ionicModal,$rootScope,publicMethod,$timeout) {
        $scope.publicMethod = publicMethod;
        /*打开二级菜单模态框的方法-start*/
        $scope.subMenuList=[
            {text:"专家信息",sref:"tab.expert"},
            {text:"咨询信息",sref:"consultationInfo"},
            {text:"我的咨询",sref:"myConsultation"},
            {text:"回复咨询",sref:"reply"}
        ]
        $scope.publicMethod.initModal($scope);
        $scope.showSubMenu=function(){
            $scope.modal.show();
        }
        /*打开二级菜单模态框的方法-end*/

        $scope.dataList=[];
        var info=new ema.EmaInfo();
        var page = new cstruct.Page(10,1);
        var timer=null;
        $scope.getData= function () {
            ice_init.request(ema,'EmaService','EmaServicePrx','queryEmaInfos',[page,"",3,info],function(resp){//咨询信息查询
                $scope.$apply(function(){
                    if(resp.flag){
                    }else{
                        $scope.dataList=$scope.dataList.concat(resp[0]);
                        console.log("返回数据___咨询信息3_____________",resp,page.pageIndex)
                        page.pageIndex++;
                        $scope.totalPageCount=resp[1].totalPageCount;
                        timer = $timeout(function () {
                            $scope.$broadcast('scroll.infiniteScrollComplete');
                            $scope.couldLoadMore=true;
                        }, 1500);
                    }
                })
            });
        }
        $scope.getData();

        $scope.openList=function(id){
            $state.go("consultationInfoDetail",{'id':id,'type':"expert"})
        }
        $scope.couldLoadMore=true;
        $scope.doRefresh= function () {
            console.log("doRefresh");
            $scope.dataList=[];
            page.pageIndex=1;
            $scope.getData();
        }

        $scope.loadMore=function(){
            //获得能取的最大页数
            var totalCount=(!!$scope.totalPageCount&&$scope.totalPageCount<5?$scope.totalPageCount:5);
            if(page.pageIndex>totalCount){
                $scope.couldLoadMore=false;
                return false;
            }
            console.log("loadMore");
            //一次取数据未完成前，不能进行下一次取数据
            $scope.couldLoadMore=false;
            $scope.getData();

        }
        $scope.$on("$destroy", function () {
            //clearTimeout(timer.$$timeoutId);
            $timeout.cancel(timer);
            //清除配置,不然scroll会重复请求
        });
    }])

/**
 * Created by Administrator on 2017/3/13.
 */
/**
 * Created by Administrator on 2017/3/6.
 */
App.controller('consultationInfoDetailCtrl', ["$scope","$state","$stateParams","$ionicModal","$rootScope","$window","publicMethod","$ionicPopup","$timeout",
    function($scope,$state,$stateParams,$ionicModal,$rootScope,$window,publicMethod,$ionicPopup,$timeout) {
        $scope.publicMethod = publicMethod;
        $scope.changeShow = function(){
            if(!!$rootScope.userMessing){
                $scope.show=false;
            }
        }
        var id = $stateParams.id;
        console.log("dfadf",$stateParams);
        //查询
        $scope.queryEmaconAndReplys= function () {
            ice_init.request(ema,'EmaService','EmaServicePrx','queryEmaconAndReplys',[null,"",id],function(resp){//通过咨询id查询咨询内容和回复
                $scope.$apply(function(){
                    if(resp.flag){
                    }else{
                        $scope.zixun=resp[0].emaDetail;
                        $scope.huifuList=resp[0].emaReplyList;
                        console.log("返回数据___通过咨询id查询咨询内容和回复_____________",resp)
                    }
                })
            });
        }
        $scope.queryEmaconAndReplys();
        //评论
        $scope.comment=function(){
            var replay=new ema.EmaReply();

            replay.emaid = id;
            replay.relcon = $scope.message;
            replay.relpeo = numberToLong($rootScope.userMessing.userid);
            replay.relpeoName = $rootScope.userMessing.username;

            replay.relaging =  0;
            replay.reltype = 0;
            replay.cstates = 0;
            ice_init.request(ema,'EmaService','EmaServicePrx','addEmaReply',[replay],function(resp){//增加咨询回复评论
                console.log("返回数据___增加咨询回复评论_____________",resp)
                $scope.message="";
                $scope.show=true;
                $scope.prompt=$ionicPopup.alert({
                    template:'<i class="icon ion-ios-checkmark qy-hook"></i>',
                    title:'提示',
                    subTitle:'评论已提交',
                    scope:$scope
                });
                $scope.prompt.then(function(){
                    $scope.queryEmaconAndReplys();
                });

                $timeout(function(){
                    $scope.prompt.close();

                },3000);
            });

        }
        //点赞
        $scope.zan= function (item) {
            var zan_info=new ema.EmaReply();
            zan_info.emaid = id;
            zan_info.relpeo = numberToLong($rootScope.userMessing.userid);
            zan_info.relpeoName = $rootScope.userMessing.username;
            zan_info.reltype = 1;
            zan_info.cstates = 0;
            ice_init.request(ema,'EmaService','EmaServicePrx','addEmaReply',[zan_info],function(resp){//增加咨询回复评论
                console.log("返回数据___成功点了个赞_____________",resp)
                if(!!item.ppn){item.ppn++}else{item.ppn=1};
                });
                //$scope.queryEmaconAndReplys();

        }

        $scope.$window=$window;
        $scope.go_back = function() {
            //$ionicHistory.goBack();
            $window.history.back();
            //alert(111);
        };

}])

/**
 * Created by Administrator on 2017/3/7.
 */
App.controller('ExpertDetailCtrl', ["$scope","$state","$stateParams","$ionicModal","$rootScope","publicMethod","$ionicPopup","$timeout",
    function($scope,$state,$stateParams,$ionicModal,$rootScope,publicMethod,$ionicPopup,$timeout) {
    $scope.publicMethod = publicMethod;
    $scope.changeShow = function(){
        if(!!$rootScope.userMessing){
            $scope.show=false;
        }
    }
    $scope.infoPublic=false;
    var id = $stateParams.id;

    var expert = new ema.EaInfo();
    expert.userid=numberToLong(id);
    ice_init.request(ema,'EmaService','EmaServicePrx','queryEas',[expert],function(resp){//专家信息查询
        $scope.$apply(function(){
            if(resp.flag){
            }else{
                $scope.expert=resp[0];
                console.log("返回数据___专家信息____detail_________",resp)
            }
        })

    });
    $scope.comment=function(){
        if(!$scope.message) return false;

        var info = new ema.EmaInfo();
        info.emaid =  0;
        info.ematitle = $scope.message.length>15?$scope.message.substring(0,15):$scope.message;
        info.emacon = $scope.message;
        info.imgurl =  "";
        info.eatype =  0;
        info.userid = numberToLong(id);
        info.ppn =  0;
        info.shn =  0;
        info.sortn =  0;
        info.emaowner =  numberToLong($rootScope.userMessing.userid);
        info.emaownerName =  "";
        info.reldate ="2012-12-12";
        info.reltime =  "12:00:01";
        info.cstates = $scope.infoPublic?32:0;   //公开传 32 ，隐私传0
        ice_init.request(ema,'EmaService','EmaServicePrx','addEmaInfo',[info],function(resp){//增加咨询信息
            console.log("返回数据___增加咨询信息_____________",resp)
            var prompt=$ionicPopup.alert({
                template:'<i class="icon ion-ios-checkmark qy-hook"></i>',
                title:'提示',
                subTitle:'咨询已提交，您可以到“我的咨询模块中查看详情及回复”',
                scope:$scope,
                onTap:function(e){console.log("tapped...");}
            });
            prompt.then(function(){
                $scope.message="";
                $scope.show=true;
            });
            $timeout(function(){
                prompt.close();
                //$state.go("authentication");
            },3000);
        });
    }
}])

/**
 * Created by Administrator on 2017/3/6.
 */
App.controller('ExpertsListCtrl', ["$scope","$state","$stateParams","$ionicModal","$rootScope","publicMethod","$timeout",
    function($scope,$state,$stateParams,$ionicModal,$rootScope,publicMethod,$timeout) {
    $scope.publicMethod = publicMethod;
    /*打开二级菜单模态框的方法-start*/
    $scope.subMenuList=[
        {text:"专家信息",sref:"tab.expert"},
        {text:"咨询信息",sref:"consultationInfo"},
        {text:"我的咨询",sref:"myConsultation"},
        {text:"回复咨询",sref:"reply"}
    ]
    $scope.publicMethod.initModal($scope);
    $scope.showSubMenu=function(){
        $scope.modal.show();
    }
    /*打开二级菜单模态框的方法-end*/
    var expert = new ema.EaInfo();
    var page = new cstruct.Page(10,1);
    var timer=null;
    $scope.dataList=[];
    $scope.getData=function(){
        ice_init.request(ema,'EmaService','EmaServicePrx','queryEas',[page,"",expert],function(resp){//专家信息查询
            $scope.$apply(function(){
                console.log("返回数据_________________",resp)
                if(resp.flag){
                }else{

                    $scope.dataList=$scope.dataList.concat(resp[0]);
                    console.log("返回数据___专家信息_____________",resp,page.pageIndex);
                    page.pageIndex++;
                    $scope.totalPageCount=resp[1].totalPageCount;
                    timer = $timeout(function () {
                        $scope.$broadcast('scroll.infiniteScrollComplete');
                        $scope.couldLoadMore=true;
                    }, 1500);
                }
            })

        });
    }
    $scope.getData();
    $scope.couldLoadMore=true;
    $scope.doRefresh= function () {
        console.log("doRefresh");
        $scope.dataList=[];
        page.pageIndex=1;
        $scope.getData();
    }

    $scope.loadMore=function(){
        //获得能取的最大页数
        var totalCount=(!!$scope.totalPageCount&&$scope.totalPageCount<5?$scope.totalPageCount:5);
        if(page.pageIndex>totalCount){
            $scope.couldLoadMore=false;
            return false;
        }
        console.log("loadMore");
        //一次取数据未完成前，不能进行下一次取数据
        $scope.couldLoadMore=false;
        $scope.getData();

    }
    $scope.$on("$destroy", function () {
        //clearTimeout(timer.$$timeoutId);
        $timeout.cancel(timer);
        //清除配置,不然scroll会重复请求
    });

    //console.log("$rootScope.subMenuList",$rootScope.subMenuList);
    $scope.openList=function(id){
        //var params={id:id,type:"hope"}
        var id= id.toNumber();
        $state.go("expertDetail",{'id':id,'type':"expert"})
    }



    $scope.showBigImg=function(url){
        console.log("modal----------------------",$scope.imgModal);
        console.log("图片路径----------",url);
        $scope.imgUrl=url;
        $scope.bigImg=true;
        $scope.imgModal.show();
    }
    $scope.hideImg=function(){
        console.log("1111111111111");

        $scope.imgModal.hide();
    }
}])

/**
 * Created by Administrator on 2017/3/7.
 */
/**
 * Created by Administrator on 2017/3/6.
 */
App.controller('MyConsultationCtrl', ["$scope","$state","$stateParams","$ionicModal","$rootScope","publicMethod","$timeout",function($scope,$state,$stateParams,$ionicModal,$rootScope,publicMethod,$timeout) {
    $scope.publicMethod = publicMethod;
    /*打开二级菜单模态框的方法-start*/
    $scope.subMenuList=[
        {text:"专家信息",sref:"tab.expert"},
        {text:"咨询信息",sref:"consultationInfo"},
        {text:"我的咨询",sref:"myConsultation"},
        {text:"回复咨询",sref:"reply"}
    ]
    $scope.publicMethod.initModal($scope);
    $scope.showSubMenu=function(){
        $scope.modal.show();
    }
    /*打开二级菜单模态框的方法-end*/
    var info=new ema.EmaInfo();
    info.emaowner=numberToLong($rootScope.userMessing.userid);
    var page = new cstruct.Page(10,1);
    var timer=null;
    $scope.dataList=[];
    $scope.getData= function () {
        ice_init.request(ema,'EmaService','EmaServicePrx','queryEmaInfos',[page,"",1,info],function(resp){//咨询信息查询
            $scope.$apply(function(){
                if(resp.flag){
                }else{
                    console.log("返回数据___咨询信息1 _____________",resp,page.pageIndex);
                    $scope.dataList=$scope.dataList.concat(resp[0]);
                    page.pageIndex++;
                    $scope.totalPageCount=resp[1].totalPageCount;
                    timer = $timeout(function () {
                        $scope.$broadcast('scroll.infiniteScrollComplete');
                        $scope.couldLoadMore=true;
                    }, 1500);
                }
            })

        });
    }
    $scope.getData();
    $scope.couldLoadMore=true;
    $scope.doRefresh= function () {
        console.log("doRefresh");
        $scope.dataList=[];
        page.pageIndex=1;
        $scope.getData();
    }

    $scope.loadMore=function(){
        //获得能取的最大页数
        var totalCount=(!!$scope.totalPageCount&&$scope.totalPageCount<5?$scope.totalPageCount:5);
        if(page.pageIndex>totalCount){
            $scope.couldLoadMore=false;
            return false;
        }
        console.log("loadMore");
        //一次取数据未完成前，不能进行下一次取数据
        $scope.couldLoadMore=false;
        $scope.getData();

    }
    $scope.$on("$destroy", function () {
        //clearTimeout(timer.$$timeoutId);
        $timeout.cancel(timer);
        //清除配置,不然scroll会重复请求
    });


    $scope.openList=function(id){
        //var params={id:id,type:"hope"}
        $state.go("consultationInfoDetail",{'id':id,'type':"expert"})
    }

}])

/**
 * Created by Administrator on 2017/3/15.
 */

App.controller('MyConsultationDetailCtrl', ["$scope","$state","$stateParams","$ionicModal","$rootScope",function($scope,$state,$stateParams,$ionicModal,$rootScope) {
    $scope.dataList=[
        {img:'img/adam.jpg',name:'�ǳ�',time:'2015-02-15',content:'��Ҫ��ѯ32132123',peoples:'3542',money:'235414',id:1},
        {img:'img/adam.jpg',name:'�ǳ�',time:'2015-02-15',content:'��Ҫ��ѯ321322��',peoples:'3542',money:'235414',id:12},
        {img:'img/adam.jpg',name:'�ǳ�',time:'2015-02-15',content:'��Ҫ��ѯ321323��',peoples:'3542',money:'235414',id:13},
        {img:'img/adam.jpg',name:'�ǳ�',time:'2015-02-15',content:'��Ҫ��ѯ321324��',peoples:'3542',money:'235414',id:14},
        {img:'img/adam.jpg',name:'�ǳ�',time:'2015-02-15',content:'��Ҫ��ѯ321325��',peoples:'3542',money:'235414',id:15},
        {img:'img/adam.jpg',name:'�ǳ�',time:'2015-02-15',content:'��Ҫ��ѯ321326��',peoples:'3542',money:'235414',id:16},
        {img:'img/adam.jpg',name:'�ǳ�',time:'2015-02-15',content:'��Ҫ��ѯ321327��',peoples:'3542',money:'235414',id:17},
        {img:'img/adam.jpg',name:'�ǳ�',time:'2015-02-15',content:'��Ҫ��ѯ321328��',peoples:'3542',money:'235414',id:18},
        {img:'img/adam.jpg',name:'�ǳ�',time:'2015-02-15',content:'��Ҫ��ѯ321329��',peoples:'3542',money:'235414',id:19},
        {img:'img/adam.jpg',name:'�ǳ�',time:'2015-02-15',content:'��Ҫ��ѯ3213210��',peoples:'3542',money:'235414',id:2},
        {img:'img/adam.jpg',name:'�ǳ�',time:'2015-02-15',content:'��Ҫ��ѯ3213211��',peoples:'3542',money:'235414',id:3},
        {img:'img/adam.jpg',name:'�ǳ�',time:'2015-02-15',content:'��Ҫ��ѯ3213212��',peoples:'3542',money:'235414',id:4},
        {img:'img/adam.jpg',name:'�ǳ�',time:'2015-02-15',content:'��Ҫ��ѯ3213213��',peoples:'3542',money:'235414',id:5}
    ];
    $scope.changeShow = function(){
        if(!!$rootScope.userMessing){
            $scope.show=false;
        }
    }
}])

/**
 * Created by Administrator on 2017/3/15.
 */


App.controller('ReplyCtrl', ["$scope","$state","$stateParams","$ionicModal","$rootScope","publicMethod","$timeout",function($scope,$state,$stateParams,$ionicModal,$rootScope,publicMethod,$timeout) {
    $scope.publicMethod = publicMethod;
    /*打开二级菜单模态框的方法-start*/
    $scope.subMenuList=[
        {text:"专家信息",sref:"tab.expert"},
        {text:"咨询信息",sref:"consultationInfo"},
        {text:"我的咨询",sref:"myConsultation"},
        {text:"回复咨询",sref:"reply"}
    ]
    $scope.publicMethod.initModal($scope);
    $scope.showSubMenu=function(){
        $scope.modal.show();
    }
    /*打开二级菜单模态框的方法-end*/
    var info=new ema.EmaInfo();
    console.log("专家id",$rootScope.userMessing.userid);
    info.userid=numberToLong($rootScope.userMessing.userid);
    var page = new cstruct.Page(10,1);
    var timer=null;
    $scope.dataList=[];
    $scope.getData=function(){
        ice_init.request(ema,'EmaService','EmaServicePrx','queryEmaInfos',[page,"",2,info],function(resp){//咨询信息查询

            $scope.$apply(function(){
                if(resp.flag){
                }else{
                    console.log("返回数据___咨询信息2_____________",resp,page.pageIndex);
                    $scope.dataList=$scope.dataList.concat(resp[0]);
                    page.pageIndex++;
                    $scope.totalPageCount=resp[1].totalPageCount;
                    timer = $timeout(function () {
                        $scope.$broadcast('scroll.infiniteScrollComplete');
                        $scope.couldLoadMore=true;
                    }, 1500);
                }
            })
        });
    }

    $scope.getData();
    $scope.couldLoadMore=true;
    $scope.doRefresh= function () {
        console.log("doRefresh");
        $scope.dataList=[];
        page.pageIndex=1;
        $scope.getData();
    }

    $scope.loadMore=function(){
        //获得能取的最大页数
        var totalCount=(!!$scope.totalPageCount&&$scope.totalPageCount<5?$scope.totalPageCount:5);
        if(page.pageIndex>totalCount){
            $scope.couldLoadMore=false;
            return false;
        }
        console.log("loadMore");
        //一次取数据未完成前，不能进行下一次取数据
        $scope.couldLoadMore=false;
        $scope.getData();

    }
    $scope.$on("$destroy", function () {
        //clearTimeout(timer.$$timeoutId);
        $timeout.cancel(timer);
        //清除配置,不然scroll会重复请求
    });
    $scope.openList=function(id){
        //var params={id:id,type:"hope"}
        $state.go("consultationInfoDetail",{'id':id,'type':"expert"})
    }

}])

App.controller('AuthenticationCtrl',["$scope","$state","$ionicPopup","$timeout","$state",function($scope,$state,$ionicPopup,$timeout,$state){
    $scope.authenticationList=[
        {text:'企业认证',value:'enterprise'},
        {text:'专家认证',value:'expert'},
        {text:'志愿者协会认证',value:'volunteer'},
    ];
    $scope.choiceResult={};
    $scope.choiceResult.choices="enterprise";
    $scope.authenticationPop=function(){
        var myPopup = $ionicPopup.show({
            templateUrl: 'templates/popUp/authenticationPop.html',
            title: '请选择认证类型',
            //subTitle: '账号注册已完成，立即登录？',
            scope: $scope,
            buttons: [
                {text: '取消',type:'button-small button-cancel button-set-radius'},
                {text: '确定',
                    type: 'button-small button-ensure button-set-radius',
                    onTap: function() {
                        console.log("获取的数据————————",$scope.choiceResult.choices);
                        $state.go($scope.choiceResult.choices);
                    }
                },
            ]
        });
        myPopup.then(function(res) {
            console.log('Tapped!', res);
        });
    }
}])

App.controller('EnterpriseCtrl',["$scope","$ionicPopup","$timeout","$state","$rootScope",function($scope,$ionicPopup,$timeout,$state,$rootScope){
    $scope.userpro=[//企业性质定义
        {property:"国有",value:"3"},
        {property:"合作",value:"4"},
        {property:"合资",value:"5"},
        {property:"独资",value:"6"},
        {property:"集体",value:"7"},
        {property:"私营",value:"8"},
        {property:"个体",value:"9"},
        {property:"报关",value:"10"},
        {property:"其他",value:"11"}
    ];
    $scope.enterprise={};
    $scope.successPop=function(){
        var userDet=new cstruct.Userdet();
        var cermat=new cstruct.Cermat();
        userDet.userid=numberToLong($rootScope.userMessing.userid);
        userDet.username=$scope.enterprise.name;
        userDet.userpro=$scope.enterprise.userpro;
        userDet.usertitle="0";
        userDet.useredu="0";
        cermat.userid=numberToLong($rootScope.userMessing.userid);
        cermat.docid=$scope.enterprise.id;
        var params=[];
        params.push(userDet);
        params.push(cermat);
        console.log("企业认证传输的数据____________",params);
        ice_init.request(jsb,'JsbService','JsbServicePrx','applyToCompany',params,function(resp){
            $scope.$apply(function() {
                console.log("企业认证返回的数据____________",resp);
                if(resp.flag==true){
                    var prompt=$ionicPopup.show({
                        template:'<i class="icon ion-ios-checkmark qy-hook"></i>',
                        title:'提示',
                        subTitle:'申请认证已提交，正等待审核',
                        scope:$scope,
                    });
                    prompt.then(function(){

                    });
                    $timeout(function(){
                        prompt.close();
                        $state.go("authentication");
                    },3000);
                }else{

                }
            })
        });

    };

    $scope.headers = {type: 'c', id: $rootScope.userMessing.userid + '12'};

}]);
App.controller('ExpertCtrl',["$scope","$ionicPopup","$timeout","$state","$rootScope",function($scope,$ionicPopup,$timeout,$state,$rootScope){
    $scope.expertUserdet = new cstruct.Userdet();
    $scope.expertCermat = new cstruct.Cermat();
    $scope.selectedType=0;
   $scope.successPop=function(){
       $scope.expertUserdet.userid=numberToLong($rootScope.userMessing.userid);
       $scope.expertUserdet.username=$rootScope.userMessing.username;
       $scope.expertUserdet.usertel="13787134796";
       $scope.expertUserdet.useremail="df@qq.com";
       $scope.expertUserdet.useradd="dfa";
       $scope.expertUserdet.userstp="dfaa";
       $scope.expertUserdet.useredu="7";
       $scope.expertUserdet.userpro="0";
       $scope.expertUserdet.usertitle="0";

       $scope.expertCermat.userid=numberToLong($rootScope.userMessing.userid);
       $scope.expertCermat.doctype="2";
       $scope.expertCermat.doctypeid=2;
       $scope.expertCermat.docid="3325732522564441";

       console.log("///",$scope.expertUserdet,$scope.expertCermat,$scope.selectedType);
       ice_init.request(ema,'EmaService','EmaServicePrx','applyToExpert',[$scope.expertUserdet,$scope.expertCermat,$scope.selectedType],function(resp){//查询专家类别
           console.log("返回数据___新增专家_____________",resp)
           $scope.expertTypes=resp;
           /*$scope.$apply(function(){
            console.log("返回数据________________",resp)
            if(resp.flag){


            }else{
            $scope.hopes=resp;
            console.log("返回数据________________",resp)
            }
            })*/
       });
      var prompt=$ionicPopup.show({
          template:'<i class="icon ion-ios-checkmark qy-hook"></i>',
          title:'提示',
          subTitle:'申请认证已提交，正等待审核',
          scope:$scope,
      });
      prompt.then(function(){

      });
      $timeout(function(){
          prompt.close();
          $state.go("authentication");
      },3000);
   }
    var type=new ema.Eatype();
    ice_init.request(ema,'EmaService','EmaServicePrx','queryEatypes',[type],function(resp){//查询专家类别
        console.log("返回数据___查询专家类别_____________",resp)
        $scope.expertTypes=resp;

    });
}]);
App.controller('LoginCtrl',["$scope","$state","md5","$ionicPopup","$timeout","$rootScope",function($scope,$state,md5,$ionicPopup,$timeout,$rootScope){
    $scope.user={};
    //通过ice组件调用后台服务登录
    $scope.login=function(){//登录函数
        $scope.data={};
        $scope.data=angular.copy($scope.user);
        $scope.data.userid=numberToLong($scope.data.userid);
        $scope.data.passwd=md5.createHash($scope.user.passwd);
        var paramsArray = [];
        paramsArray.push($scope.data.userid);
        paramsArray.push($scope.data.passwd);
        paramsArray.push(2);
        ice_init.request(usermanage,'UserManageService','UserManageServicePrx','login',paramsArray,function(resp){
            $scope.$apply(function(){
                if(resp.user.userid.toNumber()==0){
                    var errorPop = $ionicPopup.show({
                        //template: '<i class="icon ion-checkmark-circled qy-hook"></i>',
                        title: '<b>提示</b>',
                        subTitle: '用户名或密码错误',
                        scope: $scope,
                        // buttons: [
                        //     { text: '确定',type:'button-small qy-cancel-button qy-mr0' },
                        // ]
                    });
                    errorPop.then(function(res) {
                        console.log('Tapped!', res);
                    });
                    $timeout(function(){
                        errorPop.close();
                        $scope.user.userid="";
                        $scope.user.passwd="";
                        //$scope.user.userid.focus()
                    },3000);
                }else{
                    $rootScope.userMessing.userid=$scope.user.userid;
                    $rootScope.userMessing.roles=resp.user.roles.toNumber();
                    ice_init.request(usermanage,'UserManageService','UserManageServicePrx','queryUserSettingInfo',[numberToLong($rootScope.userMessing.userid)],function(resp){//查询个人设置信息
                        $rootScope.$apply(function(){
                            console.log("查询个人设置返回的信息_____________",resp);
                            if(resp){
                                $rootScope.personalSetting=angular.copy(resp);
                            }else{

                            }
                        })
                    });
                    $state.go("tab.news");
                }
            })
        });
    }
    $scope.resetPwd=function(){

    }
}]);

App.controller("modifyPwdCtrl",["$scope","md5","$rootScope","$ionicPopup","$timeout","$state",function($scope,md5,$rootScope,$ionicPopup,$timeout,$state){
    $scope.changePassword={};
    $scope.changePwd=function(){
        var oldPwd=md5.createHash($scope.changePassword.oldPwd);
        var newPwd=md5.createHash($scope.changePassword.newPwd);
        ice_init.request(usermanage,'UserManageService','UserManageServicePrx','changePasswd',[numberToLong($rootScope.userMessing.userid),oldPwd,newPwd],function(resp){
            console.log("返回值_________",resp);
            $scope.$apply(function(){
                if(resp.flag){
                    var successPop = $ionicPopup.show({
                        //template: '<i class="icon ion-checkmark-circled qy-hook"></i>',
                        title: '<b>提示</b>',
                        subTitle: '修改密码成功',
                        scope: $scope,
                        // buttons: [
                        //     { text: '确定',type:'button-small qy-cancel-button qy-mr0' },
                        // ]
                    });
                    successPop.then(function(res) {
                        console.log('Tapped!', res);
                    });
                    $timeout(function(){
                        successPop.close();
                        $rootScope.userMessing.userid="";
                        $state.go("login")
                    },3000);
                }else{
                    var errorPop=$ionicPopup.show({
                        title:'<b>提示</b>',
                        subTitle:resp.fmessage+"请重新输入",
                        scope:$scope
                    });
                    errorPop.then(function(res) {
                        console.log('Tapped!', res);
                    });
                    $timeout(function(){
                        errorPop.close();
                        $scope.changePassword.oldPwd="";
                        $scope.changePassword.newPwd="";
                    },3000)
                }
            })
        });
    }
}])
App.controller("personalDetailCtrl",["$scope","$rootScope","$ionicPopup","$timeout","$state",function($scope,$rootScope,$ionicPopup,$timeout,$state){
    $scope.personalDetail={};
    //初始化日期选择器
    $scope.personalDetail.age=new Date();
    $scope.personalDetail.selectedAddress={}
    $scope.personalDetail.selectedAddress.province="庆阳市";
    $scope.selectDate=function(){
        plugins.datePicker.show({
            // date : myNewTime,
            // mode : 'time', // date or time or blank for both
            // allowOldDates : true
            date: new Date(),
            mode: 'date', // or 'time'
            // minDate: new Date() - 10000,
            allowOldDates: true,
            allowFutureDates: true,
            doneButtonLabel: '确定',
            cancelButtonLabel: '取消',
            okText: '确定',
            cancelText: '取消', //ANDROID_THEMES: THEME_HOLO_LIGHT
            androidTheme: 2
        }, function(returnDate) {
            $scope.$apply(function(){
                console.log("returnDate____________",returnDate)
                $scope.personalDetail.age=returnDate;
            });
        });
    };
    //查询用户设置信息
    ice_init.request(usermanage,'UserManageService','UserManageServicePrx','queryUserSettingInfo',[numberToLong($rootScope.userMessing.userid)],function(resp){
        console.log("返回值____________",resp);
        $scope.$apply(function(){
            if(resp){
                $scope.personalDetail.nkname=resp.nickname;
                $scope.personalDetail.name=resp.username;
                if(resp.userpro=="男"){
                    $scope.personalDetail.sex=2;
                }else if(resp.userpro=="女"){
                    $scope.personalDetail.sex=1;
                }
                // $scope.personalDetail.selectedAddress=resp.userpro;
                for(var key in $rootScope.orgId[parseInt(resp.orgid/10000)]){
                    if(parseInt(key)==parseInt(resp.orgid/100)){
                        $scope.personalDetail.selectedAddress.city=$rootScope.orgId[parseInt(resp.orgid/10000)][key];
                        break;
                    }
                }
                for(var i in $rootScope.orgId[parseInt(resp.orgid/100)]){
                    if(parseInt(i)==parseInt(resp.orgid)){
                        $scope.personalDetail.selectedAddress.town=$rootScope.orgId[parseInt(resp.orgid/100)][i];
                        break;
                    }
                }
                $scope.personalDetail.id=resp.docid;
                $scope.personalDetail.phone=resp.usertel;
                $scope.personalDetail.email=resp.useremail;
            }else {

            }
        })
    });

    //保存个人设置
    $scope.submitSetUp=function(){
        $scope.returnKey($scope.personalDetail.selectedAddress);
        var userSettingInfo=new usermanage.UserSettingInfo()
        userSettingInfo.nickname=$scope.personalDetail.nkname;
        userSettingInfo.username=$scope.personalDetail.name;
        userSettingInfo.usertel=$scope.personalDetail.phone;
        userSettingInfo.userpro=$scope.personalDetail.sex;
        userSettingInfo.orgid=$scope.personalDetail.orgid;
        userSettingInfo.useremail=$scope.personalDetail.email;
        userSettingInfo.docid=$scope.personalDetail.id;
        userSettingInfo.doctype=1;
        userSettingInfo.userid=numberToLong($rootScope.userMessing.userid);
        console.log("userSettingInfo________",userSettingInfo);
        ice_init.request(usermanage,'UserManageService','UserManageServicePrx','updateUserSettingInfo',[userSettingInfo],function(resp){
            console.log("返回值____________",resp);
            $scope.$apply(function(){
                if(resp.flag){
                    var successPop=$ionicPopup.show({
                        title:"提示",
                        subTitle:"个人资料设置成功",
                        template: '<i class="icon ion-checkmark-circled qy-hook"></i>'
                    })
                    successPop.then(function(res){
                        console.log('Tapped!', res);
                    })
                    $timeout(function(){
                        successPop.close();
                        $state.go("setUp");
                    },3000)
                }else{

                }
            })
        });
    }

}])

App.controller('RegisterCtrl',["$scope","$state","$ionicPopup","md5","$timeout",function($scope,$state,$ionicPopup,md5,$timeout){
    $scope.user={};
    $scope.clearCod=function(){//当用户获取了验证码后，有改变了手机号码时，清空手机所发送的验证码
        $scope.verification="";
        $scope.user.sms="";
    }
    $scope.isExistUserId=function(){//验证用户是否存在和是否是正确的手机号码格式
        var reg=/^(((13[0-9]{1})|(14[0-9]{1})|(17[0]{1})|(15[0-3]{1})|(15[5-9]{1})|(18[0-9]{1}))+\d{8})$/;
        if($scope.user.userid){
            if(reg.test($scope.user.userid)){
                ice_init.request(usermanage,'UserManageService','UserManageServicePrx','isNotExistUserId',[numberToLong($scope.user.userid)],function(resp){
                    $scope.$apply(function(){
                        if(resp.flag){
                        }else{
                            var errorPop = $ionicPopup.show({
                                //template: '<i class="icon ion-checkmark-circled qy-hook"></i>',
                                title: '<b>提示</b>',
                                subTitle: '用户名已存在，请重新输入',
                                scope: $scope,
                                // buttons: [
                                //     { text: '确定',type:'button-small qy-cancel-button qy-mr0' },
                                // ]
                            });
                            errorPop.then(function(res) {
                                console.log('Tapped!', res);
                            });
                            $timeout(function(){
                                errorPop.close();
                                $scope.user.userid="";
                                //$scope.user.userid.focus()
                            },3000);
                        }
                    });
                });
            }else{
                var msgPop = $ionicPopup.show({
                    //template: '<i class="icon ion-checkmark-circled qy-hook"></i>',
                    title: '<b>提示</b>',
                    subTitle: '格式不正确，请重新输入',
                    scope: $scope,
                    // buttons: [
                    //     { text: '确定',type:'button-small qy-cancel-button qy-mr0' },
                    // ]
                });
                msgPop.then(function(res) {
                    console.log('Tapped!', res);
                });
                $timeout(function(){
                    msgPop.close();
                    $scope.user.userid="";
                    //$scope.user.userid.focus()
                },3000);
            }

        }
    }
    $scope.getSms=function(){//获取验证码
        ice_init.request(sms,'SMSService','SMSServicePrx','verificationCode',[numberToLong($scope.user.userid)],function(resp){
            $scope.$apply(function(){
                $scope.verification=resp;
                console.log("获取的验证码_________",$scope.verification);
                if(resp.flag){
                    //toaster.pop("success","提示",resp.smessage);
                }else{
                    //toaster.pop("errpr","提示",resp.fmessage);
                }
            });
        });
    };

    $scope.registerSuccess=function(){//注册
        if(md5.createHash($scope.user.sms)==$scope.verification){
            $scope.data={};
            $scope.data=angular.copy($scope.user);
            $scope.data.userid = numberToLong($scope.data.userid );
            $scope.data.passwd=md5.createHash($scope.user.passwd);
            var paramsArray = [];
            paramsArray.push($scope.data.userid);
            paramsArray.push($scope.data.passwd);
            ice_init.request(usermanage,'UserManageService','UserManageServicePrx','register',paramsArray,function(resp){
                $scope.$apply(function(){
                    if(resp.flag){
                        var myPopup = $ionicPopup.show({
                            template: '<i class="icon ion-checkmark-circled qy-hook"></i>',
                            title: '<b>提示</b>',
                            subTitle: '账号注册已完成，立即登录？',
                            scope: $scope,
                            buttons: [
                                { text: '取消',type:'button-small qy-cancel-button qy-mr0',
                                    onTap:function(){
                                        $state.go()
                                    }
                                },
                                {text: '确定',
                                    type: 'button-small qy-determine-button',
                                    onTap: function() {
                                        ice_init.request(usermanage,'UserManageService','UserManageServicePrx','login',[numberToLong($scope.user.userid),md5.createHash($scope.user.passwd),2],function(resp){
                                            $scope.$apply(function(){
                                                if(angular.equals({},resp)){
                                                    console.log("_____返回值_________111",resp)
                                                }else{
                                                    $state.go("tab.news")
                                                    console.log("_____返回值_________22222",resp)
                                                }
                                            });
                                        });
                                    }
                                },
                            ]
                        });
                        myPopup.then(function(res) {
                            console.log('Tapped!', res);
                        });
                    }else{
                        console.log("_______",resp);
                    }
                });
            });

        }else{
            var errorPop = $ionicPopup.show({
                //template: '<i class="icon ion-checkmark-circled qy-hook"></i>',
                title: '<b>提示</b>',
                subTitle: '验证码输入有误，请重新输入',
                scope: $scope,
                buttons: [
                    { text: '确定',type:'button-small qy-cancel-button qy-mr0' },
                ]
            });
            errorPop.then(function(res) {
                console.log('Tapped!', res);
            });
        }

    }
}])

App.controller('ResetPwdCtrl',["$scope","$state","md5","$ionicPopup","$timeout","$rootScope",function($scope,$state,md5,$ionicPopup,$timeout,$rootScope){
    $scope.user={};
    if($scope.user.userid){ $scope.user.userid=$rootScope.userMessing.userid;}
    $scope.getSms=function(){//获取验证码
        ice_init.request(sms,'SMSService','SMSServicePrx','verificationCode',[numberToLong($scope.user.userid)],function(resp){
            $scope.$apply(function(){
                $scope.verification=resp;
                if(resp.flag){
                    //toaster.pop("success","提示",resp.smessage);
                }else{
                    //toaster.pop("errpr","提示",resp.fmessage);
                }
            });
        });
    };
    $scope.confirmPwd=function(){
        ice_init.request(usermanage,'UserManageService','UserManageServicePrx','resetPasswd',[numberToLong($scope.user.userid),md5.createHash($scope.user.passwd)],function(resp){
            $scope.$apply(function(){
                if(resp.flag){
                    var popUp=$ionicPopup.show({
                        title:"提示",
                        subTitle:'重置密码成功',
                        template:'<i class="icon icon ion-checkmark-circled qy-hook"></i>',
                    });
                    popUp.then(function(res){
                        console.log('Tapped!', res);
                    });
                    $timeout(function(){
                        popUp.close();
                        $state.go('login')
                    },3000)

                }else{

                }
            })
        })
    }
}]);

App.controller('SetUpCtrl',["$scope","$state","$rootScope",function($scope,$state,$rootScope){
    $scope.userSting={};
    //查询用户设置信息
    console.log("dizhi________",$rootScope.orgId);
    ice_init.request(usermanage,'UserManageService','UserManageServicePrx','queryUserSettingInfo',[numberToLong($rootScope.userMessing.userid)],function(resp){
        console.log("返回值____________11111",resp);
        $scope.$apply(function(){
            if(resp){
                $scope.userSting=angular.copy(resp);
                var address="庆阳市";
                for(var key in $rootScope.orgId[parseInt(resp.orgid/10000)]){
                    if(parseInt(key)==parseInt(resp.orgid/100)){
                        address+=$rootScope.orgId[parseInt(resp.orgid/10000)][key];
                        break;
                    }
                }
                for(var i in $rootScope.orgId[parseInt(resp.orgid/100)]){
                    if(parseInt(i)==parseInt(resp.orgid)){
                        address+=$rootScope.orgId[parseInt(resp.orgid/100)][i];
                        break;
                    }
                }
                $scope.userSting.address=address;
                console.log("userSting__________",$scope.userSting)
            }else {

            }
        })
    });
}])

App.controller('VolunteerCtrl',["$scope","$ionicPopup","$timeout","$state",function($scope,$ionicPopup,$timeout,$state){
    $scope.successPop=function(){
        var prompt=$ionicPopup.show({
            template:'<i class="icon ion-ios-checkmark qy-hook"></i>',
            title:'提示',
            subTitle:'申请认证已提交，正等待审核',
            scope:$scope,
        });
        prompt.then(function(){

        });
        $timeout(function(){
            prompt.close();
            $state.go("authentication");
        },3000);
    }
}]);
/**
 * Created by Administrator on 2017/3/20.
 */
App.controller('ActivityDetailCtrl',["$scope","$state","$stateParams","$ionicModal","$rootScope","$window","$ionicPopup","$timeout","$cacheFactory","publicMethod",
    function($scope,$state,$stateParams,$ionicModal,$rootScope,$window,$ionicPopup,$timeout,$cacheFactory,publicMethod){
        $scope.publicMethod = publicMethod;
        $scope.activityType = $stateParams.type;
        $scope.assnid = $stateParams.id;
        if($scope.activityType==1){//1代表为活动信息页面跳转过来的
            var news=$cacheFactory .get("newsIndex");
            $scope.dataList=news.get("newsIndex");
        }
        if($scope.activityType==2){//2代表为直播管理跳转过来的
            var live=$cacheFactory.get("liveIndex");
            $scope.dataList=live.get("liveIndex");
        }
        //if($scope.activityType==3){//3代表为管理活动跳转过来的
        //    var act=$cacheFactory.get("addActIndex");
        //    $scope.dataList=act.get("addActIndex");
        //}
        if($scope.activityType==4){//4代表为活动足迹跳转过来的
            var track=$cacheFactory.get("trackIndex");
            $scope.dataList=track.get("trackIndex");
        }
        if($scope.activityType==5){//4代表为协会成员详细页面跳转过来的
            var member=$cacheFactory.get("memberIndex");
            $scope.dataList=member.get("memberIndex");
        }

        $scope.dataDetail={};
        angular.forEach($scope.dataList,function(data,index){
            if(data.assnoid==$scope.assnid){
                if(data.supeo <= 0){
                    data.supeo = "无限制";
                }
                data.isShow = $scope.activityType == 1;
                $scope.dataDetail=angular.copy(data);
                console.log("当前选中活动：",$scope.dataDetail);
            }
        });

        var userid = numberToLong($rootScope.userMessing.userid);
        $scope.arr = [];//用户已加入的协会列表
        ice_init.request(vos,'VosService','VosServicePrx','queryAssnsByUserid',[userid],function(resp){//根据用户id查询加入的协会
            $scope.assnList = resp;
            for(var i = 0; i < $scope.assnList.length; i++){
                if($scope.assnList[i].cstates == 128){
                    $scope.arr.push($scope.assnList[i]);//已加入协会列表
                    console.log("已加入协会:",$scope.arr);
                }
            }
            $scope.isVol = $scope.arr.length != 0;//用户是否为志愿者
        });

        $scope.isMember = false;
        $scope.showAlert = function(id){
            $rootScope.selectedAssnid = id;//当前要申请志愿活动的协会id
            var page = new cstruct.Page(10,1);   //分页
            ice_init.request(vos,'VosService','VosServicePrx','queryVoser',[page,"",id],function(resp){//根据协会id查询用户是否为该协会成员
                if(!$scope.isVol){
                    $scope.assnMemberList = resp[0];
                    for (var i = 0; i < $scope.assnMemberList.length; i++){
                        if($rootScope.userMessing.userid == $scope.assnMemberList[i].userid.toNumber()){
                            $scope.isMember = true;
                            break;
                        }
                    }
                }
                console.log("$scope.isVol11:",$scope.isVol);
                console.log("$scope.isMember:",$scope.isMember);
                if(!$scope.isVol || !$scope.isMember) {
                    var myPopup1 = $ionicPopup.show({
                        //templateUrl: 'templates/popUp/authenticationPop.html',
                        title: '<b>提示</b>',
                        template: '<div style="text-align: center;color:#212121;font-size: 14px;line-height: 1.5em;"><span>请先在志愿者资格中申请成为协会志愿者，是否立即申请？</span></div>',
                        //subTitle: '账号注册已完成，立即登录？',
                        scope: $scope,
                        buttons: [
                            {text: '取消', type: 'button-small button-cancel'},
                            {
                                text: '确定',
                                type: 'button-small button-ensure',
                                onTap: function () {
                                    //console.log("获取的数据————————",$scope.choiceResult.choices);
                                    $state.go("writeApplications");//协会id
                                }
                            }
                        ]
                    });
                    myPopup1.then(function (res) {
                        //console.log('Tapped!', res);
                    });
                }else if($scope.isVol && $scope.isMember){
                    var vosActsup = new vos.VosActsup();
                    vosActsup.actid = $scope.dataDetail.actid;
                    vosActsup.userid = userid;
                    ice_init.request(vos,'VosService','VosServicePrx','addVosActsup',[vosActsup],function(resp){//报名参加志愿活动
                        console.log("报名参加志愿活动:",resp);
                        if(resp.flag){

                        }else{
                            console.log("你已经报名参加该活动");
                            var myPopup2 = $ionicPopup.show({
                                //templateUrl: 'templates/popUp/authenticationPop.html',
                                title: '<b>提示</b>',
                                template: '<div style="text-align: center;color:#212121;font-size: 14px;line-height: 1.5em;"><span>你已经报名参加该志愿活动!</span></div>',
                                //subTitle: '账号注册已完成，立即登录？',
                                scope:$scope
                            });
                            myPopup2.then(function (res) {
                                //console.log('Tapped!', res);
                            });
                            $timeout(function(){
                                myPopup2.close();
                            },3000);
                        }
                    });
                }
            });
        };

        $scope.$window=$window;
        $scope.go_back = function() {
            //$ionicHistory.goBack();
            $window.history.back();
            //alert(111);
        };

        $scope.openList=function(id){//当前协会id
            $state.go("liveManagement");
        };
}]);
/**
 * Created by Administrator on 2017/3/17.
 */

App.controller('ActivityhistoryCtrl', ["$scope","$state","$stateParams","$ionicModal","$rootScope","publicMethod","$cacheFactory",function($scope,$state,$stateParams,$ionicModal,$rootScope,publicMethod,$cacheFactory) {
    $scope.publicMethod = publicMethod;
    /*打开二级菜单模态框的方法-start*/
    $scope.subMenuList=[
        {text:"活动消息",sref:"tab.volunteerNews"},
        {text:"志愿者资格",sref:"volunteerAuth"},
        {text:"活动足迹",sref:"activityhistory"},
        //{text:"管理活动",sref:"activityManagement"},
        {text:"管理直播",sref:"liveManagement"},
        {text:"管理志愿者",sref:"volunteerManagement"},
        {text:"选择管理协会",sref:"assnManagement"}
    ];

    var userid = numberToLong($rootScope.userMessing.userid);
    var page = new cstruct.Page(10,1);
    /*打开二级菜单模态框的方法-end*/
    ice_init.request(vos,'VosService','VosServicePrx','queryMyActs',[page,"",userid],function(resp){//根据用户id查询加入的协会
        $scope.dataList = resp[0];
        angular.forEach($scope.dataList,function(data,index){
            if(!data.actitle){
                data.actitle = "无题";
            }
        });
        if(!$scope.trackIndex){
            var trackIndex=$scope.trackIndex=$cacheFactory("trackIndex");
            trackIndex.put("trackIndex",$scope.dataList);
        }
        console.log("我的活动足迹：",$scope.dataList);
    });

    $scope.publicMethod.initModal($scope);
    $scope.showSubMenu=function(){
        $scope.modal.show();
    };

    $scope.openList=function(id){
        //var params={id:id,type:"hope"}
        $state.go("activityDetails",{'id':id,'type':"4"});
    };
    $scope.doRefresh= function () {
        console.log("doRefresh");
    };
    $scope.couldLoadMore=true;
    $scope.loadMore=function(){

        console.log("loadMore");
        $scope.couldLoadMore=false;
    }
}]);

/**
 * Created by Administrator on 2017/3/17.
 */
App.controller('ActivityManagementCtrl', ["$scope","$state","$stateParams","$ionicModal","$rootScope","publicMethod","$timeout","$cacheFactory","$ionicPopup",
function($scope,$state,$stateParams,$ionicModal,$rootScope,publicMethod,$timeout,$cacheFactory,$ionicPopup) {
    $scope.publicMethod = publicMethod;
    /*打开二级菜单模态框的方法-start*/
    $scope.subMenuList=[
        {text:"活动消息",sref:"tab.volunteerNews"},
        {text:"志愿者资格",sref:"volunteerAuth"},
        {text:"活动足迹",sref:"activityhistory"},
        {text:"管理活动",sref:"activityManagement"},
        // {text:"管理直播",sref:"liveManagement"},
        {text:"管理志愿者",sref:"volunteerManagement"},
        {text:"选择管理协会",sref:"assnManagement"}
    ];
    $scope.publicMethod.initModal($scope);
    $scope.showSubMenu=function(){
        $scope.modal.show();
    };
    /*打开二级菜单模态框的方法-end*/


    var page = new cstruct.Page(10,1);
    $scope.dataList = [];
    var timer;

    $scope.search = function(){
        var news=new vos.VosActivity();
        //Page page String sortBy int  查询志愿活动
        // type:1为查询自己发布的志愿活动，2为管理员查询待审核 3为管理员查询已审核志愿活动，4为APP都可见的志愿活动  5为查询协会的志愿活动,
        // VosActivity vosActivity
        ice_init.request(vos,'VosService','VosServicePrx','queryActs',[page,"",4,news],function(resp){//志愿活动信息数据模型
            $scope.$apply(function(){
                if(resp){
                    $scope.dataList = $scope.dataList.concat(resp[0]);
                    angular.forEach($scope.dataList,function(data,index){
                        if(!data.actitle){
                            data.actitle = "无题";
                        }
                    });
                    if(!$scope.addActIndex){
                        var addActIndex=$scope.addActIndex=$cacheFactory("addActIndex");
                        addActIndex.put("addActIndex",$scope.dataList);
                    }
                    console.log("返回志愿者活动数据_____",resp);
                    page.pageIndex++;
                    timer = $timeout(function () {
                        $scope.$broadcast('scroll.infiniteScrollComplete');
                        $scope.couldLoadMore=true;

                    }, 1500);
                }else{
                }
            });
        });
    };
    $scope.search();


    $scope.addAct = function(){
        $state.go("createActivity");
    };

    $scope.openList=function(id){
        //var params={id:id,type:"hope"}
        $state.go("activityDetails",{id:id,type:3})
    };

    $scope.couldLoadMore=true;
    $scope.doRefresh = function () {
        console.log("doRefresh");
        $scope.dataList=[];
        page.pageIndex=1;
        $scope.search();
    };

    $scope.loadMore=function(){
        //获得能取的最大页数
        var totalCount=(!!$scope.totalPageCount&&$scope.totalPageCount<5?$scope.totalPageCount:5);
        if(page.pageIndex>totalCount){
            $scope.couldLoadMore=false;
            return false;
        }
        console.log("loadMore");
        //一次取数据未完成前，不能进行下一次取数据
        $scope.couldLoadMore=false;
        $scope.search();
    };

    $scope.$on("$destroy", function () {
        //clearTimeout(timer.$$timeoutId);
        $timeout.cancel(timer);
        //清除配置,不然scroll会重复请求
    });


    $scope.mgrLive = function(item){
        $state.go("liveManagement",{obj:item});
    };
    $scope.delLive = function(item){
        //actid志愿活动id集合
        ice_init.request(vos,'VosService','VosServicePrx','delVosActivitys',[[item.actid]],function(resp){
            $scope.$apply(function(){
                if(resp){
                    var dlg = $ionicPopup.show({
                        template: '<i class="icon ion-checkmark-circled qy-hook"></i>',
                        title: '<b>提示</b>',
                        subTitle: '删除成功',
                        scope: $scope,
                        // buttons: [
                        //     { text: '确定',type:'button-small qy-cancel-button qy-mr0' },
                        // ]
                    });
                    dlg.then(function(res) {
                        console.log('Tapped!', res);
                    });
                    $timeout(function(){
                        dlg.close();
                        for(var i=0,ii=$scope.dataList.length;i<ii;i++){
                            if(item.actid == $scope.dataList[i].actid ){
                                $scope.dataList.splice(i,1);
                                break;
                            }
                        }
                    },1000);
                }else{

                }
            })
        });
    };
}]);

/**
 * Created by Administrator on 2017/3/28.
 */
App.controller("AssnManagementCtrl",["$scope","$state","$stateParams","$ionicModal","$rootScope","$window","$ionicPopup","$timeout","$cacheFactory","publicMethod",
    function($scope,$state,$stateParams,$ionicModal,$rootScope,$window,$ionicPopup,$timeout,$cacheFactory,publicMethod){
        $scope.publicMethod = publicMethod;

        $scope.subMenuList=[
            {text:"活动消息",sref:"tab.volunteerNews"},
            {text:"志愿者资格",sref:"volunteerAuth"},
            {text:"活动足迹",sref:"activityhistory"},
            {text:"管理活动",sref:"activityManagement"},
            //{text:"管理直播",sref:"liveManagement"},
            {text:"管理志愿者",sref:"volunteerManagement"},
            {text:"选择管理协会",sref:"assnManagement"}
        ];

        $scope.publicMethod.initModal($scope);
        $scope.showSubMenu=function(){
            $scope.modal.show();
        };


        var userid = numberToLong($rootScope.userMessing.userid);
        $scope.arr = [];//储存所有--用户是管理员身份的协会
        $scope.data = {};
        ice_init.request(vos,'VosService','VosServicePrx','queryAssnsByUserid',[userid],function(resp){//根据用户id查询加入协会
            $scope.assnList = resp;
            console.log("$scope.assnList:",$scope.assnList);
            for(var i = 0; i < $scope.assnList.length; i++){
                if($scope.assnList[i].cstates == 128){
                    $scope.data = angular.copy($scope.assnList[i]);
                    console.log("$scope.data:",$scope.data);
                    ice_init.request(vos,'VosService','VosServicePrx','isManger',[userid,$scope.data.oid],function(resp){
                        console.log("是否为管理者：",resp);
                        if(resp){
                            $scope.arr.push($scope.data);
                            console.log("协会管理员：",$scope.arr);
                            $rootScope.selectedManageOrgId=$scope.arr[0].oid;//协会列表中第一个协会作为默认选择协会
                        }
                    });
                }
            }

        //$scope.arr = [];
        //$scope.str = [];
        //ice_init.request(vos,'VosService','VosServicePrx','queryAssnsByUserid',[userid],function(data){//根据用户id查询加入协会
        //    $scope.$apply(function(){
        //        $scope.assnList = data;
        //
        //        //test data-------
        //        $scope.assnList = [
        //            {assname:'协会1构造数据',assnid:1,assntype:"0",assntypeid:1,cstates:0,oid:1}
        //            ,{assname:'协会2',assnid:2,assntype:"0",assntypeid:1,cstates:128,oid:2}
        //            ,{assname:'协会3',assnid:3,assntype:"0",assntypeid:1,cstates:128,oid:3}
        //            ,{assname:'协会4',assnid:4,assntype:"0",assntypeid:1,cstates:128,oid:4}
        //            ,{assname:'协会5',assnid:5,assntype:"0",assntypeid:1,cstates:128,oid:5}
        //            ,{assname:'协会6',assnid:6,assntype:"0",assntypeid:1,cstates:128,oid:6}
        //            ,{assname:'协会7',assnid:7,assntype:"0",assntypeid:1,cstates:128,oid:7}
        //            ,{assname:'协会8',assnid:8,assntype:"0",assntypeid:1,cstates:128,oid:8}
        //        ];
        //        //test data----------
        //
        //    });
        });

        $scope.applyList = [{assname:"管理活动",value:1},{assname:"管理志愿者",value:2}];

        $scope.choiceResult={};
        $scope.choiceResult.choices="1";
        $scope.openList = function(id){//当前选中协会的id
            $rootScope.selectedManageOrgId=id;
            var myPopup = $ionicPopup.show({
                templateUrl: 'templates/popUp/applyPop.html',
                title: '<b>请选择申请机构</b>',
                //subTitle: '账号注册已完成，立即登录？',
                scope: $scope,
                buttons: [
                    {text: '取消',type:'button-small button-cancel'},
                    {text: '确定',
                        type: 'button-small button-ensure',
                        onTap: function() {
                            console.log("获取的数据————————",$scope.choiceResult.choices);
                            if($scope.choiceResult.choices == 1){
                                $state.go("activityManagement");
                            }else{
                                $state.go("volunteerManagement");
                            }
                        }
                    }
                ]
            });
            myPopup.then(function(res) {
                //console.log('Tapped!', res);
            });
          $state.go("volunteerManagement");
        };

        $scope.$window=$window;
        $scope.go_back = function() {
            //$ionicHistory.goBack();
            $window.history.back();
            //alert(111);
        };
    }]);
/**
 * Created by Administrator on 2017/3/20.
 */
App.controller('CreateActivityCtrl',["$scope","$state","$stateParams","$ionicModal","$rootScope","$window","publicMethod","$ionicPopup","$timeout",
    function($scope,$state,$stateParams,$ionicModal,$rootScope,$window,publicMethod,$ionicPopup,$timeout){
        $scope.publicMethod = publicMethod;
        $scope.activity={};
        $scope.inform = function(){
            var vosActivity = new vos.VosActivity();
            vosActivity.actitle =  $scope.activity.title;
            vosActivity.actcon = $scope.activity.content;
            vosActivity.imgurl =  "";
            vosActivity.supeo = $scope.activity.count;
            vosActivity.spowner =  0;
            vosActivity.assnoid =  0;
            vosActivity.cstates = 0;
            console.log("vosActivity",vosActivity);
            ice_init.request(vos,'VosService','VosServicePrx','addVosActivity',[2,vosActivity],function(resp){//志愿活动信息数据模型
                if(resp.flag){
                    console.log("respfail:",resp);
                }else{
                    console.log("resp:",resp);
                }
            })
        };

        $scope.$window=$window;
        $scope.go_back = function() {
            //$ionicHistory.goBack();
            $window.history.back();
            //alert(111);
        };
    }])
/**
 * Created by Administrator on 2017/3/21.
 */
App.controller('createLiveCtrl',["$scope","$state","$stateParams","$ionicModal","$rootScope","$window","publicMethod","$ionicPopup","$timeout",
    function($scope,$state,$stateParams,$ionicModal,$rootScope,$window,publicMethod,$ionicPopup,$timeout){
        $scope.publicMethod = publicMethod;
        $scope.actlive={};
        $scope.inform = function(){
            var vosActlive = new vos.VosActlive();
            vosActlive.tcon = $scope.actlive.tcon;
            console.log("vosActlive:",vosActlive);
            ice_init.request(vos,'VosService','VosServicePrx','addVosActlive',[vosActlive],function(resp){//志愿活动信息数据模型
                if(resp.flag){
                    console.log("resp:",resp);
                }else{
                    console.log("resp:",resp);
                }
            })
        };

        $scope.$window=$window;
        $scope.go_back = function() {
            //$ionicHistory.goBack();
            $window.history.back();
            //alert(111);
        };
    }]);
/**
 * Created by ywkj sunersheng on 2017/3/17.
 * 直播管理
 */
App.controller('LiveManagementCtrl', ["$scope","$state","$stateParams","$ionicModal","$rootScope","publicMethod","$cacheFactory","$timeout",
function($scope,$state,$stateParams,$ionicModal,$rootScope,publicMethod,$cacheFactory,$timeout) {
    $scope.publicMethod = publicMethod;
    $scope.actItem = $stateParams.obj;  //活动管理页面传递过来的活动项数据；

    // var fromCache = $cacheFactory.get('actItem');
    // if(fromCache){
    //     $scope.actItem = angular.fromJson(fromCache);
    // }else {
    //     $scope.actItem = $stateParams.obj;  //活动管理页面传递过来的活动项数据；
    //     var cache  = $cacheFactory('actItem');
    //     cache.put('jsonActItem',angular.toJson($stateParams.obj));
    // }
    // console.log("$scope.actItem:",$scope.actItem);

    /*打开二级菜单模态框的方法-start*/
    $scope.subMenuList=[
        {text:"活动消息",sref:"tab.volunteerNews"},
        {text:"志愿者资格",sref:"volunteerAuth"},
        {text:"活动足迹",sref:"activityhistory"},
        {text:"管理活动",sref:"activityManagement"},
        {text:"管理志愿者",sref:"volunteerManagement"},
        {text:"选择管理协会",sref:"assnManagement"}
    ];

    $scope.publicMethod.initModal($scope);
    $scope.showSubMenu=function(){
        $scope.modal.show();
    };
    /*打开二级菜单模态框的方法-end*/

    var page = new cstruct.Page(10,1);
    $scope.dataList = [];
    var timer;

    $scope.search = function(){
        //queryVosActlivesByActid   Page page String sortBy int actid活动id
        ice_init.request(vos,'VosService','VosServicePrx','queryVosActlivesByActid',[page,"",$scope.actItem.actid],function(resp){
            $scope.$apply(function(){
                if(resp){
                    $scope.dataList = $scope.dataList.concat(resp[0]);
                    angular.forEach($scope.dataList,function(data,index){
                        if(!data.actitle){
                            data.actitle = "无题";
                        }
                    });
                    // if(!$scope.liveIndex){
                    //     var liveIndex = $scope.liveIndex = $cacheFactory("liveIndex");
                    //     $cacheFactory.put("liveIndex",$scope.dataList);
                    // }
                    page.pageIndex++;

                    ///test
                    $scope.dataList = [
                        {id:1,context:'者就是就是你给的就是一个不知道多少人的的事实上的事情哦',imgurl:'img/adam.jpg'}
                        ,{id:2,context:'者就是就是你给的就是一个不知道多少人的的事实上的事情哦;者就是就是你给的就是一个不知道多少人的的事实上的事情哦',imgurl:'img/adam.jpg'}
                    ];
                    ///test

                    timer = $timeout(function () {
                        $scope.$broadcast('scroll.infiniteScrollComplete');
                        $scope.couldLoadMore=true;

                    }, 1000);
                }else{
                }
            });
        });
    };
    $scope.search();

    $scope.openList=function(id){
        $state.go("activityDetails",{id:id,type:2}); //因为存在共用一个展示页面的情况，所以type代表从哪个模块打开的该页面
    };

    $scope.createLive=function(){
        //var params={id:id,type:"hope"}
        $state.go("createLive");
    };

    $scope.couldLoadMore=true;
    $scope.doRefresh = function () {
        console.log("doRefresh");
        $scope.dataList=[];
        page.pageIndex=1;
        $scope.search();
    };

    $scope.loadMore=function(){
        //获得能取的最大页数
        var totalCount=(!!$scope.totalPageCount&&$scope.totalPageCount<5?$scope.totalPageCount:5);
        if(page.pageIndex>totalCount){
            $scope.couldLoadMore=false;
            return false;
        }
        console.log("loadMore");
        //一次取数据未完成前，不能进行下一次取数据
        $scope.couldLoadMore=false;
        $scope.search();
    };

    $scope.$on("$destroy", function () {
        //clearTimeout(timer.$$timeoutId);
        $timeout.cancel(timer);
        //清除配置,不然scroll会重复请求
    });

}]);

/**
 * Created by Administrator on 2017/3/22.
 */
App.controller('MemberAuditCtrl',["$scope","$state","$stateParams","$ionicModal","$rootScope","$window","publicMethod","$ionicPopup","$timeout",
    function($scope,$state,$stateParams,$ionicModal,$rootScope,$window,publicMethod,$ionicPopup,$timeout){
        $scope.publicMethod = publicMethod;

        var userid = numberToLong($rootScope.assnMemberId);
        ice_init.request(usermanage,'UserManageService','UserManageServicePrx','queryUserdetByuserid',[userid],function(resp){//查询用户信息
            $scope.userdetDetails = resp;
            console.log("用户信息:",resp);
        });

        $scope.$window=$window;
        $scope.go_back = function() {
            //$ionicHistory.goBack();
            $window.history.back();
            //alert(111);
        };
    }]);
/**
 * Created by Administrator on 2017/3/21.
 */
App.controller('MemberDetailsCtrl',["$scope","$state","$stateParams","$ionicModal","$rootScope","$window","publicMethod","$ionicPopup","$timeout","$cacheFactory",
    function($scope,$state,$stateParams,$ionicModal,$rootScope,$window,publicMethod,$ionicPopup,$timeout,$cacheFactory){
        $scope.publicMethod = publicMethod;

        var userid = numberToLong($rootScope.assnMemberId);
        /*打开二级菜单模态框的方法-end*/
        ice_init.request(usermanage,'UserManageService','UserManageServicePrx','queryUserdetByuserid',[userid],function(resp){//查询用户信息
            $scope.userdetDetails = resp;
            console.log("用户信息:",resp);
        });
        var page = new cstruct.Page(10,1);
        ice_init.request(vos,'VosService','VosServicePrx','queryMyActs',[page,"",userid],function(resp){//根据用户id查询加入的协会
            $scope.dataList = resp[0];
            angular.forEach($scope.dataList,function(data,index){
                if(!data.actitle){
                    data.actitle = "无题";
                }
            });
            if(!$scope.memberIndex){
                var memberIndex=$scope.memberIndex=$cacheFactory("memberIndex");
                memberIndex.put("memberIndex",$scope.dataList);
            }
            console.log("我的活动足迹：",$scope.dataList);
        });

        $scope.arr = [];//已加入协会列表
        $scope.volAuth = {};
        ice_init.request(vos,'VosService','VosServicePrx','queryAssnsByUserid',[userid],function(resp){//查询用户已加入协会和已申请协会的相关信息
            $scope.assnList = resp;
            for(var i = 0; i < $scope.assnList.length; i++){
                if($scope.assnList[i].cstates == 128){
                    $scope.arr.push($scope.assnList[i]);//已加入协会列表
                    console.log("已加入协会:",$scope.arr);
                }
            }
        });

        $scope.openList=function(id){
            //var params={id:id,type:"hope"}
            $state.go("activityDetails",{'id':id,'type':"5"});
        };


        $scope.$window=$window;
        $scope.go_back = function() {
            //$ionicHistory.goBack();
            $window.history.back();
            //alert(111);
        };
    }]);
/**
 * Created by Administrator on 2017/3/17.
 */

App.controller('VolunteerAuthCtrl', ["$scope","$state","$stateParams","$ionicModal","$rootScope","publicMethod","$ionicPopup","$window",function($scope,$state,$stateParams,$ionicModal,$rootScope,publicMethod,$ionicPopup,$window) {
    $scope.publicMethod = publicMethod;
    /*打开二级菜单模态框的方法-start*/
    $scope.subMenuList=[
        {text:"活动消息",sref:"tab.volunteerNews"},
        {text:"志愿者资格",sref:"volunteerAuth"},
        {text:"活动足迹",sref:"activityhistory"},
        //{text:"管理活动",sref:"activityManagement"},
        {text:"管理直播",sref:"liveManagement"},
        {text:"管理志愿者",sref:"volunteerManagement"},
        {text:"选择管理协会",sref:"assnManagement"}
    ];
    $scope.publicMethod.initModal($scope);
    $scope.showSubMenu=function(){
        $scope.modal.show();
    };

    var userid = numberToLong($rootScope.userMessing.userid);
    ice_init.request(usermanage,'UserManageService','UserManageServicePrx','queryUserdetByuserid',[userid],function(resp){//查询用户信息
        $scope.userdetDetails = resp;
        console.log("用户信息:",resp);
    });

    $scope.arr = [];//已加入协会列表
    $scope.str = [];//未通过审核或审核中协会列表
    $scope.volAuth = {};
    ice_init.request(vos,'VosService','VosServicePrx','queryAssnsByUserid',[userid],function(resp){//查询用户已加入协会和已申请协会的相关信息
        $scope.assnList = resp;
        console.log("查询协会:",$scope.assnList);
        for(var i = 0; i < $scope.assnList.length; i++){
            if($scope.assnList[i].cstates == 128){
                $scope.arr.push($scope.assnList[i]);//已加入协会列表
                console.log("已加入协会:",$scope.arr);
            }else{
                $scope.str.push($scope.assnList[i]);//未通过审核或审核中协会列表
                console.log("未通过审核或审核中协会:",$scope.str);
            }
        }
        $scope.volAuth.position = $scope.arr.length == 0 ? "普通" : "志愿者";
    });

    var assn = new vos.Assn();
    var page = new cstruct.Page(10,1);   //分页
    ice_init.request(vos,'VosService','VosServicePrx','queryAssns',[page,"",assn],function(resp){//查询协会
        $scope.applyList = resp[0];
        var count = 1;
        angular.forEach($scope.applyList,function(data,index){
            data.value = count;
            count++;
        });
        console.log("获取协会列表:",resp);
    });

    $scope.doRefresh= function () {
        console.log("doRefresh");
    };
    $scope.couldLoadMore=true;
    $scope.loadMore=function(){

        console.log("loadMore");
        $scope.couldLoadMore=false;
    };

    $scope.choiceResult={};
    $scope.choiceResult.choices="1";
    $scope.applyPop = function(){
        var myPopup = $ionicPopup.show({
            templateUrl: 'templates/popUp/applyPop.html',
            title: '<b>请选择申请机构</b>',
            //subTitle: '账号注册已完成，立即登录？',
            scope: $scope,
            buttons: [
                {text: '取消',type:'button-small button-cancel'},
                {text: '确定',
                    type: 'button-small button-ensure',
                    onTap: function() {
                        console.log("获取的数据————————",$scope.choiceResult.choices);
                        $rootScope.selectedAssnid = $scope.applyList[$scope.choiceResult.choices - 1].oid;;//当前要申请志愿活动的协会id
                        console.log("当前选择协会的id:",$rootScope.selectedAssnid);
                        $state.go("writeApplications");
                    }
                }
            ]
        });
        myPopup.then(function(res) {
            //console.log('Tapped!', res);
        });
    };

    $scope.$window=$window;
    $scope.go_back = function() {
        //$ionicHistory.goBack();
        $window.history.back();
        //alert(111);
    };
}]);

/**
 * Created by Administrator on 2017/3/17.
 */

App.controller('VolunteerManagementCtrl', ["$scope","$state","$stateParams","$ionicModal","$rootScope","publicMethod","$window","$ionicPopup",function($scope,$state,$stateParams,$ionicModal,$rootScope,publicMethod,$window,$ionicPopup) {
    $scope.publicMethod = publicMethod;
    /*打开二级菜单模态框的方法-start*/
    $scope.subMenuList=[
        {text:"活动消息",sref:"tab.volunteerNews"},
        {text:"志愿者资格",sref:"volunteerAuth"},
        {text:"活动足迹",sref:"activityhistory"},
        {text:"管理活动",sref:"activityManagement"},
        //{text:"管理直播",sref:"liveManagement"},
        {text:"管理志愿者",sref:"volunteerManagement"},
        {text:"选择管理协会",sref:"assnManagement"}
    ];
    $scope.publicMethod.initModal($scope);
    $scope.showSubMenu=function(){
        $scope.modal.show();
    };

    var page = new cstruct.Page(10,1);
    $scope.getOrgMember=function(id){
        ice_init.request(vos,'VosService','VosServicePrx','queryVoser',[page,"", id],function(resp){//查询协会下所有成员
            $scope.memberList = resp[0];//获取当前协会下所有成员
            angular.forEach($scope.memberList,function(data,index){
                data.isShow = true;
            });
            console.log("当前协会下所有协会成员:",$scope.memberList);
        });
    };

    var userid = numberToLong($rootScope.userMessing.userid);
    $scope.arr = [];//储存所有--用户是管理员身份的协会
    $scope.data = {};
    if(!$rootScope.selectedManageOrgId){
        ice_init.request(vos,'VosService','VosServicePrx','queryAssnsByUserid',[userid],function(resp){//根据用户id查询加入协会
            $scope.assnList = resp;
            console.log("$scope.assnList:",$scope.assnList);
            for(var i = 0; i < $scope.assnList.length; i++){
                if($scope.assnList[i].cstates == 128){
                    $scope.data = angular.copy($scope.assnList[i]);
                    console.log("$scope.data:",$scope.data);
                    ice_init.request(vos,'VosService','VosServicePrx','isManger',[userid,$scope.data.oid],function(resp){
                        console.log("是否为管理者：",resp);
                        if(resp){
                            $scope.arr.push($scope.data);
                            console.log("协会管理员：",$scope.arr);
                            $rootScope.selectedManageOrgId=$scope.arr[0].oid;
                            $scope.getOrgMember($rootScope.selectedManageOrgId);
                        }
                    });
                }
            }
        });
    }else{
        $scope.getOrgMember($rootScope.selectedManageOrgId);
    }


    $scope.auditList = [];
    ice_init.request(vos,'VosService','VosServicePrx','queryApplyToVos',[page,"",1,userid],function(resp){//查询待审核认证志愿者
        if(resp.flag){

        }else{
            $scope.waitAuditList = resp[0];
            ice_init.request(vos,'VosService','VosServicePrx','queryApplyToVos',[page,"",2,userid],function(resp){//查询已审核认证志愿者
                if(resp.flag){

                }else{
                    $scope.hasAuditList = resp[0];
                    console.log("已审核认证志愿者",$scope.hasAuditList);
                    console.log("待审核认证志愿者:",$scope.waitAuditList);
                    angular.forEach($scope.hasAuditList,function(data,index){
                        data.auditState = data.shStates == 128 ? "已通过" : "已拒绝";
                        $scope.auditList.push(data);
                    });
                    console.log("$scope.auditList:",$scope.auditList);
                    angular.forEach($scope.waitAuditList,function(data,index){
                        data.auditState = "待审核";
                        $scope.auditList.push(data);
                    });
                    console.log("$scope.auditList:",$scope.auditList);

                }
            });
        }
    });

    $scope.openMemberDetail=function(id){//查看当前选中成员的详细信息
        //var params={id:id,type:"hope"}
        $rootScope.assnMemberId = id.toNumber();
        console.log("$rootScope.assnMemberId:",$rootScope.assnMemberId);
        $state.go("memberDetails");
    };
    $scope.memberAudit=function(id){//查询待审核或已审核用户详细信息
        //var params={id:id,type:"hope"}
        $rootScope.assnMemberId = id.toNumber();
        $state.go("memberAudit")
    };

    $scope.deleteMember = function(item){//当前欲删除成员
        var myPopup = $ionicPopup.show({
            //templateUrl: 'templates/popUp/authenticationPop.html',
            title: '<b>提示</b>',
            template:'<div style="color:#212121;font-size: 14px;text-align: center;line-height: 1.5em;"><span>删除后该用户将不再是协会成员，是否删除？</span></div>',
            //subTitle: '账号注册已完成，立即登录？',
            scope: $scope,
            buttons: [
                {text: '取消',type:'button-small button-cancel'},
                {text: '确定',
                    type: 'button-small button-ensure',
                    onTap: function() {
                        //console.log("获取的数据————————",$scope.choiceResult.choices);
                        //$state.go("volunteerAuth");
                        var delList = [];//欲删除成员集合
                        delList.push(item.userid.toNumber());
                        ice_init.request(vos,'VosService','VosServicePrx','delVosers',[delList,$rootScope.selectedManageOrgId],function(resp){//删除协会下成员
                            item.isShow = false;
                        });
                    }
                }
            ]
        });
        myPopup.then(function(res) {
            //console.log('Tapped!', res);
        });
    };

    $scope.doRefresh= function () {
        console.log("doRefresh");
    };
    $scope.couldLoadMore=true;
    $scope.loadMore=function(){

        console.log("loadMore");
        $scope.couldLoadMore=false;
    };

    $scope.$window=$window;
    $scope.go_back = function() {
        //$ionicHistory.goBack();
        $window.history.back();
        //alert(111);
    };
}]);

/**
 * Created by Administrator on 2017/3/17.
 */
App.controller('VolunteerNewsCtrl', ["$scope","$state","$stateParams","$ionicModal","$rootScope","publicMethod","$cacheFactory","$ionicPopup",function($scope,$state,$stateParams,$ionicModal,$rootScope,publicMethod,$cacheFactory,$ionicPopup) {
    $scope.publicMethod = publicMethod;
    /*打开二级菜单模态框的方法-start*/
    $scope.subMenuList=[
        {text:"活动消息",sref:"tab.volunteerNews"},
        {text:"志愿者资格",sref:"volunteerAuth"},
        {text:"活动足迹",sref:"activityhistory"},
        {text:"管理活动",sref:"activityManagement"},
        //{text:"管理直播",sref:"liveManagement"},
        {text:"管理志愿者",sref:"volunteerManagement"},
        {text:"选择管理协会",sref:"assnManagement"}
    ];

    $scope.publicMethod.initModal($scope);
    $scope.showSubMenu=function(){
        $scope.modal.show();
    };

    /*打开二级菜单模态框的方法-end*/
    var news=new vos.VosActivity();
    var page = new cstruct.Page(10,1);   //分页
    ice_init.request(vos,'VosService','VosServicePrx','queryActs',[page,"",4,news],function(resp){//查询所有志愿活动信息
        $scope.dataList = resp[0];
        angular.forEach($scope.dataList,function(data,index){
            if(!data.actitle){
                data.actitle = "无题";
            }
        });
        if(!$scope.newsIndex){
            var newsIndex=$scope.newsIndex=$cacheFactory("newsIndex");
            newsIndex.put("newsIndex",$scope.dataList);
        }
        console.log("所有志愿活动信息列表:",$scope.dataList);

    });

    $scope.openList=function(id){//id:当前选中活动或直播所属协会id
        $state.go("activityDetails",{id:id,type:1})
    };

    $scope.doRefresh= function () {
        console.log("doRefresh");
    };
    $scope.couldLoadMore=true;
    $scope.loadMore=function(){

        console.log("loadMore");
        $scope.couldLoadMore=false;
    };

}]);

/**
 * Created by Administrator on 2017/3/21.
 */
App.controller('writeApplicationCtrl',["$scope","$ionicPopup","$timeout","$state","$rootScope","$window","$stateParams",function($scope,$ionicPopup,$timeout,$state,$rootScope,$window,$stateParams){
    var userid = numberToLong($rootScope.userMessing.userid);
    $scope.apply={};//申请绑定的数据
    $scope.docData = {};
    $scope.successPop=function(){

        var userdet = new cstruct.Userdet();
        userdet.userid = userid;
        userdet.username = $scope.apply.username;
        userdet.userpro = $scope.apply.userpro;
        userdet.userstp = $scope.apply.userstp;
        userdet.cstates = 0;
        console.log("userdet:",userdet);


        var cermat = new cstruct.Cermat();
        cermat.userid = userid;
        cermat.docurl = $scope.docData.docurl;
        cermat.cstates =0;
        console.log("cermat:",cermat);

        ice_init.request(vos,'VosService','VosServicePrx','applyToVol',[userdet,cermat,$rootScope.selectedAssnid],function(resp){//志愿者申请认证
            if(resp.flag){

            }else{
                if(resp.fmessage == "已经提交该协会,无需重复申请"){
                    console.log("resp:",resp);
                    var prompt2=$ionicPopup.show({
                        template:'<i class="icon ion-ios-checkmark qy-hook"></i>',
                        title:'提示',
                        subTitle:'已经提交该协会,无需重复申请',
                        scope:$scope
                    });
                    prompt2.then(function(){

                    });
                    $timeout(function(){
                        prompt2.close();
                        $state.go("volunteerAuth");
                    },3000);
                }else{
                    console.log("resp:",resp);
                    var prompt1=$ionicPopup.show({
                        template:'<i class="icon ion-ios-checkmark qy-hook"></i>',
                        title:'提示',
                        subTitle:'申请已提交，请等待审核',
                        scope:$scope
                    });
                    prompt1.then(function(){

                    });
                    $timeout(function(){
                        prompt1.close();
                        $state.go("volunteerAuth");
                    },3000);
                }
            }
        });
    };

    $scope.$window=$window;
    $scope.go_back = function() {
        //$ionicHistory.goBack();
        $window.history.back();
        //alert(111);
    };
}]);
App.controller("applyCtrl",["$scope","$state","$rootScope","$cacheFactory","publicMethod","$timeout",function($scope,$state,$rootScope,$cacheFactory,publicMethod,$timeout){
    $scope.seeRecruit=[];//已查看的申请记录
    $scope.noSeeRecruit=[];//未查看的申请记录
    $scope.publicMethod=publicMethod;
    $scope.crux={};
    /*打开二级菜单模态框的方法-start*/
    $scope.subMenuList=[
        {text:"招聘信息",sref:"tab.recruitMessing"},
        {text:"我的简历",sref:"myResume"},
        {text:"简历信息",sref:"resumeMarket"},
        {text:"申请记录",sref:"apply"},
        {text:"创业信息",sref:"entrepreneurship"},
        {text:"我的发布",sref:"myRelease"}
    ]
    $scope.publicMethod.initModal($scope);
    $scope.showSubMenu=function(){
        $scope.modal.show();
    }
    //查询我的申请记录
    console.log("userid",$rootScope.userMessing.userid);
    var page= new cstruct.Page(10,1);
    $scope.detailDate=[];
    var timer=null;
    $scope.getData=function(){
        ice_init.request(jsb,'JsbService','JsbServicePrx','queryJsbSjobAndRec',[page,"",numberToLong($rootScope.userMessing.userid)],function(resp){
            $scope.$apply(function() {
                if(resp){
                    $scope.detailDate=$scope.detailDate.concat(resp[0]);
                    page.pageIndex++;
                    $scope.totalPageCount=resp[1].totalPageCount;
                    timer = $timeout(function () {
                        $scope.$broadcast('scroll.infiniteScrollComplete');
                        $scope.couldLoadMore=true;
                    }, 1500);
                    console.log("申请记录返回的数据————————",resp);
                    angular.forEach($scope.detailDate,function(data,index,array){
                        if(data.jsbRec.cstates&32==1){
                            $scope.seeRecruit.push(data);
                        }else{
                            $scope.noSeeRecruit.push(data);
                        }
                    })
                }else{
                }
                console.log("已查看的数据___________",$scope.seeRecruit);
                console.log("未查看的数据___________",$scope.noSeeRecruit);
            })
        });
    }
    $scope.getData();
    $scope.couldLoadMore=true;
    $scope.doRefresh= function () {
        console.log("doRefresh");
        $scope.detailDate=[];
        page.pageIndex=1;
        $scope.getData();
    }

    $scope.loadMore=function(){
        //获得能取的最大页数
        var totalCount=(!!$scope.totalPageCount&&$scope.totalPageCount<5?$scope.totalPageCount:5);
        if(page.pageIndex>totalCount){
            $scope.couldLoadMore=false;
            return false;
        }
        console.log("loadMore");
        //一次取数据未完成前，不能进行下一次取数据
        $scope.couldLoadMore=false;
        $scope.getData();

    }
    $scope.$on("$destroy", function () {
        //clearTimeout(timer.$$timeoutId);
        $timeout.cancel(timer);
        //清除配置,不然scroll会重复请求
    });
    $scope.goList=function(item){
        $state.go("jobDetails",{oid:item.jsbRec.oid,type:2,obj:item});
    }
    $scope.jobReturn=function(num){//返回所选职位的中文字符串
        if($rootScope.positionList.detailed){
            for(var i=0;i<$rootScope.positionList.detailed.length;i++){
                if($rootScope.positionList.detailed[i].occid==parseInt(num)){
                    return  $rootScope.positionList.detailed[i].occname;
                }
            }
        }
    }
}])

App.controller("educationCtrl",["$scope","$state","$rootScope",function($scope,$state,$rootScope){
    $scope.save=function(){
        $state.go('myResume')
    }
    //查询学习经历
    ice_init.request(jsb,'JsbService','JsbServicePrx','queryJsbSwexpsByUser',[null,"",numberToLong($rootScope.userMessing.userid)],function(resp){
        $scope.$apply(function() {
            console.log("学历返回的数据____________",resp);
            if(resp.flag){

            }else{
                angular.forEach(resp[0],function(data,index,array){
                    if(data.cstates==32){
                        $rootScope.resumeDetails.education.push(data);
                    }
                })
                console.log("push进入的数据————",$rootScope.resumeDetails.education);
            }
        })
    });
    $scope.onItemDelete = function(item) {//删除不需要的简历信息
        $scope.items.splice($scope.items.indexOf(item), 1);
    };

}])

App.controller("educationEditCtrl",["$scope","$filter","$rootScope","$state",function($scope,$filter,$rootScope,$state){
    $scope.education={};
    //学历数组定义
    $scope.educationList=[
        {name:'小学',value:"0"},
        {name:'初中',value:"1"},
        {name:'高中',value:"2"},
        {name:'中专或职高',value:"3"},
        {name:'大专',value:"4"},
        {name:'本科',value:"5"},
        {name:'硕士',value:"6"},
        {name:'博士',value:"7"},
        {name:'其他',value:"8"}
    ];
    $scope.education.entDate= new Date();
    $scope.education.graDate= new Date();
    $scope.selectEntranceDate=function(){//入学时间选择
        plugins.datePicker.show({
            // date : myNewTime,
            // mode : 'time', // date or time or blank for both
            // allowOldDates : true
            date: new Date(),
            mode: 'date', // or 'time'
            // minDate: new Date() - 10000,
            allowOldDates: true,
            allowFutureDates: true,
            doneButtonLabel: '确定',
            cancelButtonLabel: '取消',
            okText: '确定',
            cancelText: '取消', //ANDROID_THEMES: THEME_HOLO_LIGHT
            androidTheme: 2
        }, function(returnDate) {
            $scope.$apply(function(){
                console.log("returnDate____________",returnDate)
                $scope.education.entDate=returnDate;
            });
        });
    }
    $scope.selectGraduationDate=function(){//毕业时间选择
        plugins.datePicker.show({
            // date : myNewTime,
            // mode : 'time', // date or time or blank for both
            // allowOldDates : true
            date: new Date(),
            mode: 'date', // or 'time'
            // minDate: new Date() - 10000,
            allowOldDates: true,
            allowFutureDates: true,
            doneButtonLabel: '确定',
            cancelButtonLabel: '取消',
            okText: '确定',
            cancelText: '取消', //ANDROID_THEMES: THEME_HOLO_LIGHT
            androidTheme: 2
        }, function(returnDate) {
            $scope.$apply(function(){
                console.log("returnDate____________",returnDate)
                $scope.education.graDate=returnDate;
            });
        });
    }
    //教育经历提交
    $scope.submit=function(){
        var jsbSwexp=new jsb.JsbSwexp();
        jsbSwexp.userid=numberToLong($rootScope.userMessing.userid);
        jsbSwexp.begdate=$scope.education.entDate.toLocaleDateString();
        jsbSwexp.endate=$scope.education.graDate.toLocaleDateString();
        jsbSwexp.swsc=$scope.education.name;
        jsbSwexp.cstates=32;
        $rootScope.resumeDetails.education.push(jsbSwexp);
        console.log("教学经历传输数据______",jsbSwexp);
        ice_init.request(jsb,'JsbService','JsbServicePrx','addJsbSwexp',[jsbSwexp],function(resp){
            $scope.$apply(function() {
                console.log("教学经历____________",resp);
                if(resp.flag==true){
                    $state.go("education");
                }else{

                }
            })
        });
    }
}])

App.controller("entrepreneurshipCtrl",["$scope","$rootScope","publicMethod","$timeout",function($scope,$rootScope,publicMethod,$timeout) {
    $scope.publicMethod=publicMethod;
    $scope.crux={};
    /*打开二级菜单模态框的方法-start*/
    $scope.subMenuList=[
        {text:"招聘信息",sref:"tab.recruitMessing"},
        {text:"我的简历",sref:"myResume"},
        {text:"简历信息",sref:"resumeMarket"},
        {text:"申请记录",sref:"apply"},
        {text:"创业信息",sref:"entrepreneurship"},
        {text:"我的发布",sref:"myRelease"}
    ]
    $scope.publicMethod.initModal($scope);
    $scope.showSubMenu=function(){
        $scope.modal.show();
    }
    //查询创业信息
    $scope.jobProject=[];
    var page=new cstruct.Page(10,1);
    var jsbProject=new jsb.JsbProject();
    var timer=null;
    console.log("查询创业信息时传入的参数______________",jsbProject);
    $scope.getData=function(){
        ice_init.request(jsb,'JsbService','JsbServicePrx','queryJsbProjects',[page,"",jsbProject],function(resp){
            $scope.$apply(function(){
                console.log("查询创业信息的返回值______________",resp);
                if(resp){
                    $scope.jobProject=$scope.jobProject.concat(resp[0]);
                    page.pageIndex++;
                    $scope.totalPageCount=resp[1].totalPageCount;
                    timer = $timeout(function () {
                        $scope.$broadcast('scroll.infiniteScrollComplete');
                        $scope.couldLoadMore=true;
                    }, 1500);
                }else{

                }
            })
        });
    }
    $scope.getData();
    $scope.couldLoadMore=true;
    $scope.doRefresh= function () {
        console.log("doRefresh");
        $scope.jobProject=[];
        page.pageIndex=1;
        $scope.getData();
    }
    $scope.loadMore=function(){
        //获得能取的最大页数
        var totalCount=(!!$scope.totalPageCount&&$scope.totalPageCount<5?$scope.totalPageCount:5);
        if(page.pageIndex>totalCount){
            $scope.couldLoadMore=false;
            return false;
        }
        console.log("loadMore");
        //一次取数据未完成前，不能进行下一次取数据
        $scope.couldLoadMore=false;
        $scope.getData();

    }
    $scope.$on("$destroy", function () {
        //clearTimeout(timer.$$timeoutId);
        $timeout.cancel(timer);
        //清除配置,不然scroll会重复请求
    });

    //查询我的项目申请
    var jsbProgress=new jsb.JsbProgress();
    var myPage=new cstruct.Page(10,1);
    $scope.projectApply=[]
    jsbProgress.userid=numberToLong($rootScope.userMessing.userid);
    console.log("查询我的项目申请信息传入的参数______________",jsbProgress);
    $scope.getMyData=function(){
        ice_init.request(jsb,'JsbService','JsbServicePrx','queryJsbProgress',[myPage,"",2,jsbProgress],function(resp){
            $scope.$apply(function(){
                console.log("查询我的项目申请信息返回值______________",resp);
                if(resp){
                    $scope.projectApply=$scope.projectApply.concat(resp[0]);
                    myPage.pageIndex++;
                    $scope.totalPageCount=resp[1].totalPageCount;
                    timer = $timeout(function () {
                        $scope.$broadcast('scroll.infiniteScrollComplete');
                        $scope.couldLoadMore=true;
                    }, 1500);
                }else{

                }
            })
        });
    }
    $scope.couldLoadMore=true;
    $scope.doRefresh= function () {
        console.log("doRefresh");
        $scope.projectApply=[];
        page.pageIndex=1;
        $scope.getMyData();
    }
    $scope.loadMore=function(){
        //获得能取的最大页数
        var totalCount=(!!$scope.totalPageCount&&$scope.totalPageCount<5?$scope.totalPageCount:5);
        if(page.pageIndex>totalCount){
            $scope.couldLoadMore=false;
            return false;
        }
        console.log("loadMore");
        //一次取数据未完成前，不能进行下一次取数据
        $scope.couldLoadMore=false;
        $scope.getMyData();

    }
    $scope.$on("$destroy", function () {
        //clearTimeout(timer.$$timeoutId);
        $timeout.cancel(timer);
        //清除配置,不然scroll会重复请求
    });
}])
App.controller("essentialMesCtrl",["$scope","$ionicModal","$filter","$state","$rootScope","$ionicPopup",function($scope,$ionicModal,$filter,$state,$rootScope,$ionicPopup){
    $rootScope.resumeDetails.age=new Date();
    $scope.selectDate=function(){
        plugins.datePicker.show({
            // date : myNewTime,
            // mode : 'time', // date or time or blank for both
            // allowOldDates : true
            date: new Date(),
            mode: 'date', // or 'time'
            // minDate: new Date() - 10000,
            allowOldDates: true,
            allowFutureDates: true,
            doneButtonLabel: '确定',
            cancelButtonLabel: '取消',
            okText: '确定',
            cancelText: '取消', //ANDROID_THEMES: THEME_HOLO_LIGHT
            androidTheme: 2
        }, function(returnDate) {
            $scope.$apply(function(){
                console.log("returnDate____________",returnDate)
                $rootScope.resumeDetails.age=returnDate;
            });
        });
    }
    if($rootScope.personalSetting.username==""){

    }else{
        console.log("!$rootScope.personalSetting",$rootScope.personalSetting);
        $rootScope.resumeDetails.name=$rootScope.personalSetting.username;
        if($rootScope.personalSetting.userpro=="男"){
            $rootScope.resumeDetails.sex=2;
        }else if($rootScope.personalSetting.userpro=="女"){
            $rootScope.resumeDetails.sex=1;
        }
        $rootScope.resumeDetails.email=$rootScope.personalSetting.useremail;
        $rootScope.resumeDetails.phone=$rootScope.personalSetting.usertel;
        //$rootScope.resumeDetails.age=$rootScope.personalSetting.usertel

    }
    $scope.save=function(){
        if($rootScope.personalSetting.username==""){
            //$scope.returnKey($scope.personalDetail.selectedAddress);
            var userSettingInfo=new usermanage.UserSettingInfo()
            //userSettingInfo.nickname=$scope.personalDetail.nkname;
            userSettingInfo.username=$rootScope.resumeDetails.name;
            userSettingInfo.usertel=$rootScope.resumeDetails.phone;
            userSettingInfo.userpro=$rootScope.resumeDetails.sex;
            //userSettingInfo.orgid=$scope.personalDetail.orgid;
            userSettingInfo.useremail=$rootScope.resumeDetails.email;
            //userSettingInfo.docid=$scope.personalDetail.id;
            //userSettingInfo.doctype=1;
            userSettingInfo.userid=numberToLong($rootScope.userMessing.userid);
            console.log("userSettingInfo________",userSettingInfo);
            ice_init.request(usermanage,'UserManageService','UserManageServicePrx','updateUserSettingInfo',[userSettingInfo],function(resp){
                console.log("返回值____________",resp);
                $scope.$apply(function(){
                    if(resp.flag){
                        $state.go("myResume");
                    }else{

                    }
                })
            });
        }else{
            var userSettingInfo=new usermanage.UserSettingInfo()
            userSettingInfo.nickname=$rootScope.personalSetting.nickname;
            userSettingInfo.username=$rootScope.personalSetting.username;
            userSettingInfo.usertel=$rootScope.personalSetting.usertel;
            if($rootScope.personalSetting.userpro=="男"){
                userSettingInfo.userpro=2;
            }else if($rootScope.personalSetting.userpro=="女"){
                userSettingInfo.userpro=1;
            }
            userSettingInfo.orgid=$rootScope.personalSetting.orgid;
            userSettingInfo.useremail=$rootScope.personalSetting.useremail;
            userSettingInfo.docid=$rootScope.personalSetting.docid;
            userSettingInfo.doctype=1;
            userSettingInfo.userid=$rootScope.personalSetting.userid;
            console.log("userSettingInfo________",userSettingInfo);
            ice_init.request(usermanage,'UserManageService','UserManageServicePrx','updateUserSettingInfo',[userSettingInfo],function(resp){
                console.log("返回值____________",resp);
                $scope.$apply(function(){
                    if(resp.flag){
                        $state.go("myResume");
                    }else{

                    }
                })
            });
        }
    }
}]);
App.controller("fromApplyCtrl",["$scope","$state","$rootScope","$cacheFactory","$stateParams",function($scope,$state,$rootScope,$cacheFactory,$stateParams){
    $scope.seeRecruit=[];//已查看的申请记录
    $scope.noSeeRecruit=[];//未查看的申请记录
    //查询我的申请记录
    var oid=parseInt($stateParams.oid);
    console.log("recid————————————————————————————————————",oid);
    console.log("userid",$rootScope.userMessing.userid);
    ice_init.request(jsb,'JsbService','JsbServicePrx','queryJsbSjobAndUserInfo',[oid],function(resp){
        $scope.$apply(function() {
            console.log("申请记录返回的数据————————",resp);
            angular.forEach(resp,function(data,index,array){
                if(data.jsbSjob.cstates&32==1){
                    $scope.seeRecruit.push(data);
                }else{
                    $scope.noSeeRecruit.push(data);
                }
            })
            var cache_recordList=$cacheFactory('cache_recordList');//保存数据到本地
            cache_recordList.put('list',resp);
            console.log("已查看的数据___________",$scope.seeRecruit);
            console.log("未查看的数据___________",$scope.noSeeRecruit);
        })
    });
}])
App.controller("jobDetailsCtrl",["$scope","$state","$ionicPopup","$rootScope","$cacheFactory","$stateParams","$timeout",function($scope,$state,$ionicPopup,$rootScope,$cacheFactory,$stateParams,$timeout){
    var oid=$stateParams.oid;
    var type=$scope.type=$stateParams.type;
    var recruitList=$stateParams.obj;
    $scope.recruitList=[];
    $scope.recruitDetails=[];
    $scope.disabled
    //根据type判断是从哪里进入的招聘列表，1位招聘信息页面进入，2为我的申请进入,3我的发布页面进入
    if(type==1){
        console.log("type=1__________",recruitList);
        $scope.recruitDetails=$scope.recruitDetails.concat(recruitList);
    }else if(type==2){
        $scope.recruitDetails=$scope.recruitDetails.concat(recruitList.jsbRec);
    }else if(type==3){
        console.log("type=333333333",recruitList);
        $scope.recruitDetails=$scope.recruitDetails.concat(recruitList);
    }
    console.log("招聘信息详情表__________",$scope.recruitList);
    //根据传输的oid展示相应的数据
    //$scope.recruitDetails=[];
    // angular.forEach($scope.recruitList,function(data,index,array){
    //     console.log("比较值____________",data.oid==parseInt(oid));
    //     if(parseInt(data.oid)==parseInt(oid)){
    //         $scope.recruitDetails.push(data);
    //     }
    // })
    console.log("根据id显示相应的信息___________",$scope.recruitDetails);
    $scope.applyJob=function(){//申请职位
        if($rootScope.userMessing){
            var jsbSjob=new jsb.JsbSjob();
            jsbSjob.userid=numberToLong($rootScope.userMessing.userid);
            jsbSjob.recid=parseInt(oid);
            console.log("申请职位是传入的参数_________",jsbSjob);
            ice_init.request(jsb,'JsbService','JsbServicePrx','addJsbSjob',[jsbSjob],function(resp){
                $scope.$apply(function(){//申请职位
                    console.log("返回数据________________",resp)
                    if(resp.flag){
                        var mySuccessPop=$ionicPopup.show({
                            title:'提示',
                            subTitle:"职位申请成功，请静待佳音。",
                            template:'<i class="icon ion-checkmark-circled qy-hook"></i>',
                        })
                        mySuccessPop.then(function(res) {
                            console.log('Tapped!', res);
                        });
                        $timeout(function(){
                            mySuccessPop.close();
                            $state.go("tab.recruitMessing")
                        },3000)
                    }else{
                        var errorPop=$ionicPopup.show({
                            title:"提示",
                            subTitle:resp.fmessage
                        })
                        errorPop.then(function(res){
                            console.log('Tapped!', res);
                        })
                        $timeout(function() {
                            errorPop.close();
                        },3000)
                    }
                })
            });
        }else{
            var myPop=$ionicPopup.show({
                title:'提示',
                template:'<p>您还没有创建简历，是否立即创建？</p>',
                buttons: [
                    { text: '取消',type:'button-small' },
                    {text: '确定',
                        type: 'button-small',
                        onTap: function() {
                            $state.go('myResume');
                        }
                    },
                ]
            })
            myPop.then(function(res) {
                console.log('Tapped!', res);
            });
        }
    }
    //打开收到的申请页面
    $scope.openApply=function(){
        $state.go("fromApply",{oid:oid});
    }
    $scope.jobReturn=function(num){//返回所选职位的中文字符串
        if($rootScope.positionList.detailed){
            for(var i=0;i<$rootScope.positionList.detailed.length;i++){
                if($rootScope.positionList.detailed[i].occid==parseInt(num)){
                    return  $rootScope.positionList.detailed[i].occname;
                }
            }
        }
    }
}])

App.controller("jobHistoryCtrl",["$scope","$state","$rootScope",function($scope,$state,$rootScope){
    $scope.save=function(){
        $state.go('myResume')
    }
    $scope.onItemDelete = function(item) {//删除不需要的简历信息
        $scope.items.splice($scope.items.indexOf(item), 1);
    };
   //获取工作经历数据
    ice_init.request(jsb,'JsbService','JsbServicePrx','queryJsbSwexpsByUser',[null,"",numberToLong($rootScope.userMessing.userid)],function(resp){
        $scope.$apply(function() {
            console.log("工作经历返回的数据____________",resp);
            if(resp.flag){

            }else{
                angular.forEach(resp[0],function(data,index,array){
                    if(data.cstates==64){
                        $rootScope.resumeDetails.jobHistory.push(data);
                    }
                })
                console.log("push进入的数据————",$rootScope.resumeDetails.education);
            }
        })
    });
}])

App.controller("jobHistoryEditCtrl",["$scope","$filter","$rootScope","$state",function($scope,$filter,$rootScope,$state){
    $scope.jobHistory={};
    $scope.jobHistory.entDate=new Date();//初始化入职时间
    $scope.jobHistory.graDate=new Date();//初始化离职时间
    $scope.selectEntranceDate=function(){//入职时间
        plugins.datePicker.show({
            // date : myNewTime,
            // mode : 'time', // date or time or blank for both
            // allowOldDates : true
            date: new Date(),
            mode: 'date', // or 'time'
            // minDate: new Date() - 10000,
            allowOldDates: true,
            allowFutureDates: true,
            doneButtonLabel: '确定',
            cancelButtonLabel: '取消',
            okText: '确定',
            cancelText: '取消', //ANDROID_THEMES: THEME_HOLO_LIGHT
            androidTheme: 2
        }, function(returnDate) {
            $scope.$apply(function(){
                console.log("returnDate____________",returnDate)
                $scope.jobHistory.entDate=returnDate;
            });
        });
    }
    $scope.selectGraduationDate=function(){//离职时间
        plugins.datePicker.show({
            // date : myNewTime,
            // mode : 'time', // date or time or blank for both
            // allowOldDates : true
            date: new Date(),
            mode: 'date', // or 'time'
            // minDate: new Date() - 10000,
            allowOldDates: true,
            allowFutureDates: true,
            doneButtonLabel: '确定',
            cancelButtonLabel: '取消',
            okText: '确定',
            cancelText: '取消', //ANDROID_THEMES: THEME_HOLO_LIGHT
            androidTheme: 2
        }, function(returnDate) {
            $scope.$apply(function(){
                console.log("returnDate____________",returnDate)
                $scope.jobHistory.graDate=returnDate;
            });
        });
    }
    //提交工作经历函数
    $scope.submit=function(){
        var jsbSwexp=new jsb.JsbSwexp();
        jsbSwexp.userid=numberToLong($rootScope.userMessing.userid);
        jsbSwexp.begdate=$scope.jobHistory.entDate.toLocaleDateString();
        jsbSwexp.endate=$scope.jobHistory.graDate.toLocaleDateString();
        jsbSwexp.swsc=$scope.jobHistory.name;
        jsbSwexp.cstates=64;
        $rootScope.resumeDetails.jobHistory.push(jsbSwexp);
        console.log("教学经历传输数据______",jsbSwexp);
        ice_init.request(jsb,'JsbService','JsbServicePrx','addJsbSwexp',[jsbSwexp],function(resp){
            $scope.$apply(function() {
                console.log("教学经历____________",resp);
                if(resp.flag==true){
                    $state.go("jobHistory");
                }else{

                }
            })
        });
    }
}])

App.controller("jobIntentionCtrl",["$scope","$state","$rootScope","$stateParams",function($scope,$state,$rootScope,$stateParams){
    $scope.save=function(){
        $state.go("myResume")
        console.log("数据信息__________",$rootScope.resumeDetails);
    };
    $scope.jobReturn=function(num){
        if($rootScope.positionList.detailed){
            for(var i=0;i<$rootScope.positionList.detailed.length;i++){
                if($rootScope.positionList.detailed[i].occid==num){
                    return  $rootScope.positionList.detailed[i].occname;
                }
            }
        }
    }
}])
App.controller("jobSkillCtrl",["$scope","$stateParams","$state","$rootScope",function($scope,$stateParams,$state,$rootScope){
    $scope.title=$stateParams.title;
    console.log("传过来的title__________",$scope.title);
    $scope.save=function(){
        $state.go("myResume")
        console.log("数据信息__________",$rootScope.resumeDetails);
    }
}])

App.controller("myReleaseCtrl",["$scope","$rootScope","$state","$cacheFactory",function($scope,$rootScope,$state,$cacheFactory){
    $scope.myReleaseList=[];
    //查询我的发布信息
    var jsbRec=new jsb.JsbRec();
    jsbRec.userid=numberToLong($rootScope.userMessing.userid);
    ice_init.request(jsb,'JsbService','JsbServicePrx','queryJsbRecs',[null,"",1,jsbRec],function(resp){
        $scope.$apply(function() {
            console.log("我的发布_________",resp);
            if(resp){
                $scope.myReleaseList=angular.copy(resp[0]);
                // var cache_position=$cacheFactory("cache_position");
                // cache_position.put('list',$scope.myReleaseList);
            }
        })
    });
    $scope.modify=function(oid){//修改我的发布
        $state.go("positionEdit",{oid:oid})
    }
    $scope.deleteMyRelease=function(index){
        $scope.myReleaseList.pop(index);
        console.log("需要删除的数据_____________",index);
    }
    $scope.goJobDetails=function(item){
        $state.go("jobDetails",{oid:item.oid,type:3,obj:item})
    }
}])

App.controller("myResPreCtrl",["$scope","$rootScope",function($scope,$rootScope){
    $scope.myResList={};
    ice_init.request(jsb,'JsbService','JsbServicePrx','queryJsbSwexpsByResumeByUser',[numberToLong($rootScope.userMessing.userid)],function(resp){
        $scope.$apply(function() {
            console.log("查询个人工作学历信息____________",resp);
            if(!resp.jsbResume){
                $scope.myResList=angular.copy(resp.jsbResume);
            }else{
                $scope.myResList=$rootScope.resumeDetails;
            }
            if(!$scope.myResList.education){$scope.myResList.education=[];};//定义学历数组
            if(!$scope.myResList.jobHistory){$scope.myResList.jobHistory=[];};//定义工作经历数组
            angular.forEach(resp.jsbSwexpList,function(data,index,array){//过滤，如果是30教育经历就push进education中，如果是64工作经历，就push进jobHistory中
                if(data.cstates==32){
                    $scope.myResList.education.push(data);
                }
                if(data.cstates==64){
                    $scope.myResList.jobHistory.push(data);
                }
            })
        })
        console.log("myResList————————————————————",$scope.myResList)
    });
    if($rootScope.personalSetting.username==""){
        ice_init.request(usermanage,'UserManageService','UserManageServicePrx','queryUserSettingInfo',[numberToLong($rootScope.userMessing.userid)],function(resp){//查询个人设置信息
            $rootScope.$apply(function(){
                console.log("查询个人设置返回的信息_____________",resp);
                if(resp){
                    $rootScope.personalSetting=angular.copy(resp);
                }else{

                }
            })
        });
    }else{
        console.log("查询个人设置返回的信息_____________",$rootScope.personalSetting);
    }
}])

App.controller("myResumeCtrl",["$scope","$stateParams","$rootScope","publicMethod",function($scope,$stateParams,$rootScope,publicMethod) {
    $rootScope.resumeDetails.education=[];//定义学历数组
    $rootScope.resumeDetails.jobHistory=[];//定义工作经历数组
    $scope.publicMethod=publicMethod;
    /*打开二级菜单模态框的方法-start*/
    $scope.subMenuList=[
        {text:"招聘信息",sref:"tab.recruitMessing"},
        {text:"我的简历",sref:"myResume"},
        {text:"简历信息",sref:"resumeMarket"},
        {text:"申请记录",sref:"apply"},
        {text:"创业信息",sref:"entrepreneurship"},
        {text:"我的发布",sref:"myRelease"}
    ]
    $scope.publicMethod.initModal($scope);
    $scope.showSubMenu=function(){
        $scope.modal.show();
    }
    //查询简历信息
    console.log("userid_________________",numberToLong($rootScope.userMessing.userid));
    ice_init.request(jsb,'JsbService','JsbServicePrx','queryJsbSwexpsByResumeByUser',[numberToLong($rootScope.userMessing.userid)],function(resp){
        $scope.$apply(function() {
            console.log("查询个人简历信息____________",resp);
            if(resp){
                $rootScope.resumeDetails=angular.copy(resp.jsbResume);
            }else{

            }
            if(!$rootScope.resumeDetails.education){$rootScope.resumeDetails.education=[];};//定义学历数组
            if(!$rootScope.resumeDetails.jobHistory){$rootScope.resumeDetails.jobHistory=[];};//定义工作经历数组
            // angular.forEach(resp.jsbSwexpList,function(data,index,array){//过滤，如果是30教育经历就push进education中，如果是64工作经历，就push进jobHistory中
            //     if(data.cstates==32){
            //         $rootScope.resumeDetails.education.push(data);
            //     }
            //     if(data.cstates==64){
            //         $rootScope.resumeDetails.jobHistory.push(data);
            //     }
            // })
            console.log("$rootScope.resumeDetails____",$rootScope.resumeDetails);
        })
    });
    //新增简历信息
    $scope.saveResume=function(){
        //传输数据的拼接
        //var JsbResume=new jsb.JsbResume();
        var jsbResumeInfo=new jsb.JsbResumeInfo();
        jsbResumeInfo.jsbResume.userid=numberToLong($rootScope.userMessing.userid);
        jsbResumeInfo.jsbResume.age=parseInt(new Date($rootScope.resumeDetails.age).getFullYear())-parseInt(new Date().getFullYear());//年龄把日期类型转化成数值
        //jsbResumeInfo.jsbResume.inposit=$rootScope.resumeDetails.inposit;
        jsbResumeInfo.jsbResume.salary=$rootScope.resumeDetails.salary;
        jsbResumeInfo.jsbResume.skills=$rootScope.resumeDetails.skills;
        jsbResumeInfo.jsbResume.selfev=$rootScope.resumeDetails.selfev;
        jsbResumeInfo.jsbResume.inposit=$rootScope.resumeDetails.position;
        console.log("传输的数据___________",jsbResumeInfo);
        ice_init.request(jsb,'JsbService','JsbServicePrx','addJsbResume',[jsbResumeInfo],function(resp){
            $scope.$apply(function() {
                console.log("新怎简历返回信息____________",resp);
                if(resp.flag){
                    //$state.go("jobHistory");
                }else{

                }
            })
        });
    }
    //修改简历信息
    $scope.upDateResum=function(){
        console.log("$rootScope.resumeDetails.jsbSwexpList______",$rootScope.resumeDetails.jsbSwexpList);
        //传输数据的拼接
        //var JsbResume=new jsb.JsbResume();
        var jsbResumeInfo=new jsb.JsbResumeInfo();
        jsbResumeInfo.jsbResume.userid=$rootScope.resumeDetails.userid;
        jsbResumeInfo.jsbResume.oid=$rootScope.resumeDetails.oid;
        jsbResumeInfo.jsbResume.age=$rootScope.resumeDetails.age;
        //jsbResumeInfo.jsbResume.inposit=$rootScope.resumeDetails.inposit;
        jsbResumeInfo.jsbResume.salary=$rootScope.resumeDetails.salary;
        jsbResumeInfo.jsbResume.skills=$rootScope.resumeDetails.skills;
        jsbResumeInfo.jsbResume.selfev=$rootScope.resumeDetails.selfev;
        jsbResumeInfo.jsbResume.inposit=$rootScope.resumeDetails.inposit;
        console.log("传输的数据___________",jsbResumeInfo);
        ice_init.request(jsb,'JsbService','JsbServicePrx','updateJsbResume',[jsbResumeInfo],function(resp){
            $scope.$apply(function() {
                console.log("新怎简历返回信息____________",resp);
                if(resp.flag){
                    //$state.go("jobHistory");
                }else{

                }
            })
        });
    }
    //保存简历信息
    $scope.submitResum=function(){
        console.log("保存简历");
        if($rootScope.resumeDetails.oid<=0){
            console.log("新增");
            $scope.saveResume()
        }else if($rootScope.resumeDetails.oid>0){
            console.log("修改");
            $scope.upDateResum()
        }
    }
}])

App.controller("positionEditCtrl",["$scope","$rootScope","$stateParams","$cacheFactory",function($scope,$rootScope,$stateParams,$cacheFactory){
    $scope.oid=$stateParams.oid;
    if($scope.oid){
        var cache_position=$cacheFactory.get("cache_position");
        $scope.recruitList=cache_position.get("list")
        angular.forEach($scope.recruitList,function(data,index,array){
            if(data.oid==$scope.oid){
                $rootScope.recruitMsg=angular.copy(data);
            }
        })
    }
    $scope.positionNature=[//定义工作性质
        {text:"全职",value:1},
        {text:"兼职",value:2}
    ]
    $scope.educationList=[//定义学历
        {text:'小学',value:1},
        {text:'初中',value:2},
        {text:'高中',value:3},
        {text:'中专或职高',value:4},
        {text:'大专',value:5},
        {text:'本科',value:6},
        {text:'硕士',value:7},
        {text:'博士',value:8},
        {text:'其他',value:9}
    ];
    $scope.salary=[
        {text:"1000元/月以下"},
        {text:"1000-2000元/月"},
        {text:"2001-4000元/月"},
        {text:"4001-6000元/月"},
        {text:"6001-8000元/月"},
        {text:"8001-10000元/月"},
        {text:"10001-15000元/月"},
        {text:"15000-25000元/月"},
        {text:"25000-35000元/月"},
        {text:"35000-50000元/月"},
        {text:"50000-70000元/月"},
        {text:"70000-100000元/月"},
        {text:"100000元/月以上"}
    ]

    $scope.submitRecruit=function(){//招聘信息编辑
        var jsbRec=new jsb.JsbRec()
        if($rootScope.recruitMsg.salary){//格式化工资
            var reg=/[\u4e00-\u9fa5]\/[\u4e00-\u9fa5]*/;
            console.log("薪资________",$rootScope.recruitMsg.salary)
            var num=$rootScope.recruitMsg.salary.replace(reg,"");
            //var num=$scope.salary[0].text.replace(reg,"");
            var array=num.split("-");
            console.log("格式化后的数据",array);
            if(array.length==1){
                jsbRec.minsalary=parseInt(array[0]);
            }else{
                jsbRec.minsalary=parseInt(array[0]);
                jsbRec.maxsalary=parseInt(array[1]);
            }
        }
        jsbRec.userid=numberToLong($rootScope.userMessing.userid);
        jsbRec.posit=parseInt($rootScope.recruitMsg.position);
        jsbRec.worknat=$rootScope.recruitMsg.worknat;
        jsbRec.workadd=$rootScope.recruitMsg.workadd;
        jsbRec.edureq=parseInt($rootScope.recruitMsg.edureq);
        jsbRec.reqpeos=parseInt($rootScope.recruitMsg.reqpeos);
        jsbRec.salben=$rootScope.recruitMsg.salben;
        jsbRec.pdec=$rootScope.recruitMsg.pdec;
        jsbRec.preq=$rootScope.recruitMsg.preq;
        console.log("传入参数____________",jsbRec);
        ice_init.request(jsb,'JsbService','JsbServicePrx','addJsbRec',[jsbRec],function(resp){
            $scope.$apply(function(){
                console.log("返回数据________________",resp)
                if(resp.flag){

                }else{

                }
            })
        });
    }
    $scope.jobReturn=function(num){//根据传入的occid返回对应岗位字符串
        if($rootScope.positionList.detailed){
            for(var i=0;i<$rootScope.positionList.detailed.length;i++){
                if($rootScope.positionList.detailed[i].occid==num){
                    return  $rootScope.positionList.detailed[i].occname;
                }
            }
        }
    }
}])

App.controller("postSelectCtrl",["$scope","$rootScope","$state","$filter","$stateParams",function($scope,$rootScope,$state,$filter,$stateParams){
    $scope.jobPost={};
    $scope.type=$stateParams.type;//通过传过来的type来判断是从哪个页面传过来的，1位期望职位处跳转，2位招聘职位处跳转。
    $scope.transferPosition=function(){
        if(parseInt($scope.type)==1){
            $rootScope.resumeDetails.position=$scope.jobPost.position;
            $state.go("jobIntention");
            console.log("工作岗位_________",$rootScope.resumeDetails.position)
        }else if(parseInt($scope.type)==2){
            $rootScope.recruitMsg.position=$scope.jobPost.position;
            $state.go("positionEdit");
            console.log("招聘岗位______________",$rootScope.recruitMsg.position)
        }
    }

    // //查询所有的岗位
    // var jsbOcctype=new jsb.JsbOcctype();
    // ice_init.request(jsb,'JsbService','JsbServicePrx','queryJsbOcctypes',[null,"",jsbOcctype],function(resp){
    //     $scope.$apply(function() {
    //         $rootScope.positionList=resp[0];
    //         if(!$rootScope.positionList.detailed){$rootScope.positionList.detailed=[]};
    //         console.log("返回的所有岗位类别____________",resp);
    //         angular.forEach(resp,function(data,index,array){
    //             if(data.occid>9&&data.occid<100){
    //                 data.child=[];
    //                 $rootScope.post.push(data);
    //             }
    //         });
    //         angular.forEach(resp,function(data,index,array){
    //             if(data.occid>100&&data.occid<10000){
    //                 data.grandson=[];
    //                 for(var i=0;i<$rootScope.post.length;i++){
    //                     if(parseInt($rootScope.post[i].occid)==parseInt(data.occid/100)){
    //                         $rootScope.post[i].child.push(data);
    //                     }
    //                 }
    //             }
    //         });
    //         angular.forEach(resp,function(data,index,array){
    //             if(data.occid>99999){
    //                 $rootScope.positionList.detailed.push(data);
    //                 for(var i=0;i<$rootScope.post.length;i++){
    //                     for(var r=0;r<$rootScope.post[i].child.length;r++){
    //                         if(parseInt($rootScope.post[i].child[r].occid)==parseInt(data.occid/100)){
    //                             $rootScope.post[i].child[r].grandson.push(data);
    //                         }
    //                     }
    //                 }
    //             }
    //         });
    //         console.log("重组后的数据______________",$rootScope.post);
    //     })
    // });
    $scope.jobReturn=function(num){//返回所选职位的中文字符串
        if($rootScope.positionList.detailed){
            for(var i=0;i<$rootScope.positionList.detailed.length;i++){
                if($rootScope.positionList.detailed[i].occid==num){
                    return  $rootScope.positionList.detailed[i].occname;
                }
            }
        }
    }
    //点击搜索时模糊查询函数
    $scope.search=function(){
        $scope.filterPositionList=$filter('filter')($scope.positionList.detailed,$scope.jobPost.keyWord);
        console.log("过滤后的数组________",$scope.filterPositionList);
    }
}])

App.controller("resumeMarketCtrl",["$scope","$state","publicMethod","$timeout","$rootScope",function($scope,$state,publicMethod,$timeout,$rootScope){
    $scope.publicMethod=publicMethod;
    $scope.crux={};
    /*打开二级菜单模态框的方法-start*/
    $scope.subMenuList=[
        {text:"招聘信息",sref:"tab.recruitMessing"},
        {text:"我的简历",sref:"myResume"},
        {text:"简历信息",sref:"resumeMarket"},
        {text:"申请记录",sref:"apply"},
        {text:"创业信息",sref:"entrepreneurship"},
        {text:"我的发布",sref:"myRelease"}
    ]
    $scope.publicMethod.initModal($scope);
    $scope.showSubMenu=function(){
        $scope.modal.show();
    }
    $scope.recruitList=[];
    //查询所有简历信息
    var jsbResume=new jsb.JsbResume();
    var page=new cstruct.Page(10,1);
    var timer=null;
    $scope.getData=function(){
        console.log("heahadfh_____",jsbResume);
        if($scope.crux.key){
            //jsbResume.username=$scope.crux.key;
        }
        ice_init.request(jsb,'JsbService','JsbServicePrx','queryJsbResumes',[page,"",jsbResume],function(resp){
            $scope.$apply(function() {
                if(resp){
                    $scope.recruitList=$scope.recruitList.concat(resp[0]);
                    page.pageIndex++;
                    $scope.totalPageCount=resp[1].totalPageCount;
                    timer = $timeout(function () {
                        $scope.$broadcast('scroll.infiniteScrollComplete');
                        $scope.couldLoadMore=true;
                    }, 1500);
                }

                console.log("简历信息_________",resp);
            })
        });
    }
    $scope.getData();
    $scope.couldLoadMore=true;
    $scope.doRefresh= function () {
        console.log("doRefresh");
        $scope.recruitList=[];
        page.pageIndex=1;
        $scope.getData();
    }

    $scope.loadMore=function(){
        //获得能取的最大页数
        var totalCount=(!!$scope.totalPageCount&&$scope.totalPageCount<5?$scope.totalPageCount:5);
        if(page.pageIndex>totalCount){
            $scope.couldLoadMore=false;
            return false;
        }
        console.log("loadMore");
        //一次取数据未完成前，不能进行下一次取数据
        $scope.couldLoadMore=false;
        $scope.getData();

    }
    $scope.$on("$destroy", function () {
        //clearTimeout(timer.$$timeoutId);
        $timeout.cancel(timer);
        //清除配置,不然scroll会重复请求
    });
    $scope.openResumePreview=function(item){
        $state.go("resumePreview",{userid:item.userid.toNumber(),type:1,obj:item});
    }
    console.log("$rootScope.positionList.detailed_________",$rootScope.positionList.detailed);
    $scope.jobReturn=function(num){//返回所选职位的中文字符串
        if($rootScope.positionList.detailed){
            for(var i=0;i<$rootScope.positionList.detailed.length;i++){
                if($rootScope.positionList.detailed[i].occid==parseInt(num)){
                    return  $rootScope.positionList.detailed[i].occname;
                }
            }
        }
    }
}])
App.controller("RecruitMessingCtrl",["$scope","$state","$rootScope","$ionicModal","$cacheFactory","publicMethod","$filter","$timeout",function($scope,$state,$rootScope,$ionicModal,$cacheFactory,publicMethod,$filter,$timeout){
    $scope.publicMethod=publicMethod;
    $scope.crux={};
    /*打开二级菜单模态框的方法-start*/
    $scope.subMenuList=[
        {text:"招聘信息",sref:"tab.recruitMessing"},
        {text:"我的简历",sref:"myResume"},
        {text:"简历信息",sref:"resumeMarket"},
        {text:"申请记录",sref:"apply"},
        {text:"创业信息",sref:"entrepreneurship"},
        {text:"我的发布",sref:"myRelease"}
    ]
    $scope.publicMethod.initModal($scope);
    $scope.showSubMenu=function(){
        $scope.modal.show();
    }
    //查询招聘信息
    var jsbRec=new jsb.JsbRec();
    var page= new cstruct.Page(10,1);
    var timer=null;
    $scope.recruitList=[];
    $scope.queryRecruit=function(){

        if($scope.crux.key){
            jsbRec.username=$scope.crux.key;
        }
        ice_init.request(jsb,'JsbService','JsbServicePrx','queryJsbRecs',[page,"",2,jsbRec],function(resp){
            $scope.$apply(function(){
                if(resp){
                    $scope.recruitList=$scope.recruitList.concat(resp[0]);
                    page.pageIndex++;
                    $scope.totalPageCount=resp[1].totalPageCount;
                    timer = $timeout(function () {
                        $scope.$broadcast('scroll.infiniteScrollComplete');
                        $scope.couldLoadMore=true;
                    }, 1500);

                }else{

                }
            })
        });
    }
    $scope.queryRecruit();
    $scope.couldLoadMore=true;
    $scope.doRefresh= function () {
        console.log("doRefresh");
        $scope.recruitList=[];
        page.pageIndex=1;
        $scope.queryRecruit();
    }

    $scope.loadMore=function(){
        //获得能取的最大页数
        var totalCount=(!!$scope.totalPageCount&&$scope.totalPageCount<5?$scope.totalPageCount:5);
        if(page.pageIndex>totalCount){
            $scope.couldLoadMore=false;
            return false;
        }
        console.log("loadMore");
        //一次取数据未完成前，不能进行下一次取数据
        $scope.couldLoadMore=false;
        $scope.queryRecruit();

    }
    $scope.$on("$destroy", function () {
        //clearTimeout(timer.$$timeoutId);
        $timeout.cancel(timer);
        //清除配置,不然scroll会重复请求
    });
    $scope.jobDetails=function(item){
        $state.go("jobDetails",{oid:item.oid,type:1,obj:item});
    }
    $ionicModal.fromTemplateUrl("templates/popUp/subMenu.html",{
        scope:$scope
    }).then(function(modal){
        $rootScope.modal=modal;
    });
    //查询所有的岗位
    var jsbOcctype=new jsb.JsbOcctype();
    ice_init.request(jsb,'JsbService','JsbServicePrx','queryJsbOcctypes',[null,"",jsbOcctype],function(resp){
        $scope.$apply(function() {
            $rootScope.positionList=resp[0];
            if(!$rootScope.positionList.detailed){$rootScope.positionList.detailed=[]};
            angular.forEach(resp[0],function(data,index,array){
                if(data.occid>9&&data.occid<100){
                    data.child=[];
                    $rootScope.post.push(data);
                }
            });
            angular.forEach(resp[0],function(data,index,array){
                if(data.occid>100&&data.occid<10000){
                    data.grandson=[];
                    for(var i=0;i<$rootScope.post.length;i++){
                        if(parseInt($rootScope.post[i].occid)==parseInt(data.occid/100)){
                            $rootScope.post[i].child.push(data);
                        }
                    }
                }
            });
            angular.forEach(resp[0],function(data,index,array){
                if(data.occid>99999){
                    $rootScope.positionList.detailed.push(data);
                    for(var i=0;i<$rootScope.post.length;i++){
                        for(var r=0;r<$rootScope.post[i].child.length;r++){
                            if(parseInt($rootScope.post[i].child[r].occid)==parseInt(data.occid/100)){
                                $rootScope.post[i].child[r].grandson.push(data);
                            }
                        }
                    }
                }
            });
        })
    });
    $scope.jobReturn=function(num){//返回所选职位的中文字符串
        if($rootScope.positionList.detailed){
            for(var i=0;i<$rootScope.positionList.detailed.length;i++){
                if($rootScope.positionList.detailed[i].occid==parseInt(num)){
                    return  $rootScope.positionList.detailed[i].occname;
                }
            }
        }
    }
}])

App.controller("resumeNameCtrl",["$scope","$state",function($scope,$state){
    $scope.save=function(){
        $state.go("myResume",{name:$scope.name})
    }
}])

App.controller("resumePreviewCtrl",["$scope","$stateParams","$rootScope",function($scope,$stateParams,$rootScope){
    $scope.resumenDetail={};
    $scope.jobHistory=[];
    $scope.school=[];
    $scope.sendOutMsg=false;
    var userid=$stateParams.userid;
    var type=$scope.type=$stateParams.type;//1为简历信息模块跳入的，2为申请记录模块进入的
    var sendMsgid=$stateParams.jsbSjob;
    //根据穿过的userid查询相关的简历详细信息
    ice_init.request(jsb,'JsbService','JsbServicePrx','queryJsbSwexpsByResumeByUser',[numberToLong(userid)],function(resp){
        $scope.$apply(function() {
            $scope.resumenDetail=angular.copy(resp);
            console.log("简历信息_________",resp);
            angular.forEach(resp.jsbSwexpList,function(data,index,array){
                if(data.cstates==64){
                    $scope.jobHistory.push(data);
                }else{
                    $scope.school.push(data);
                }
            })
            console.log("工作经历__________",$scope.jobHistory);
            console.log("毕业院校__________",$scope.school);
        })
    });

    // if(($rootScope.userMessing.roles&128)==128){
    //     $scope.sendOutMsg=true;
    // }else{
    //     $scope.sendOutMsg=false;
    // }
    $scope.sendMsg=function(){
        console.log("发送的消息___________",$scope.message);
        var params=[];
        params.push(sendMsgid);
        params.push($scope.message);
        console.log("发送消息传输的数据____________",params);
        ice_init.request(jsb,'JsbService','JsbServicePrx','entfeb',params,function(resp){
            $scope.$apply(function(){
                console.log("返回数据________________",resp)
                if(resp.flag){

                }else{

                }
            })
        });
    }
}])